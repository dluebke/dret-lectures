<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy-new" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="colombia.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Colombia 2018</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-06">June 19-21, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="continuous-architecting">
		<title>Continuous Architecting</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" title='Gregor Hohpe, "Reverse Engineering the Organization", May 2018'>Reverse Engineering the Organization</a>&#160;· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a></toc>
		<slide id="dret">
			<title><code>@dret</code> on Twitter/GitHub</title>
			<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
		</slide>
		<part id="introduction-team">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation">
			<title>Digital Transformation</title>
			<slide id="digital-transformation-meme">
				<title>Digital Transformation</title>
				<img href="http://hdwallpaperfx.com/angry-jaguar/" src="jaguar-digital-transformation.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation-status">
				<title>Digital Transformation Status</title>
				<img href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" src="cio-reporting-line.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-pattern">
				<title>The API Pattern</title>
				<div style="height: 70%">
					<img style="float: left; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Uniform interface" src="pneumatic-tubes.jpg" href="https://twitter.com/NotableHistory/status/529966375125544960"/>
					<img style="float: right; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Self-describing representations and stateless interactions" src="nj-gun-permit.png"/>
				</div>
			</slide>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="loose-coupling">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Loose Coupling Matters</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The MSA Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
		</part>
		<part id="continuous-architecting">
			<title>Continuous Architecting</title>
			<slide id="architecture-as-process">
				<title>Architecture as Process</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Do not focus on <b>changing into something</b>;<br/>
							Focus on <b>being changeable</b> as your <b>mode of existence</b>;<br/>
							Make sure you become good at <b>being changeable</b> and <b>keep doing it</b>.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="web-evolution">
				<title>Watching Web Evolution</title>
				<img title="Webby Amazon" src="webby-amazon.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="robots.txt">
				<title>Amazon's <code>robots.txt</code></title>
				<listing title="Amazon's robots.txt" href="https://www.amazon.com/robots.txt" src="robots.txt"/>
			</slide>
			<slide id="web-architecture">
				<title>How the Web Works</title>
				<ul>
					<li>Start from a set of architectural ground truths</li>
					<ul>
						<li>All resources can be identified through a <em>global identification scheme (URI)</em></li>
						<li>Resource interactions happen through a <em>uniform interface (HTTP)</em></li>
						<li>State changes are communicated by exchanging <em>representations (HTML/XML/JSON)</em></li>
					</ul>
					<li>Continually evolve the architecture by using its extension model</li>
					<ul>
						<li>Everything that is in place can be used in a meaningful way</li>
						<li>All pieces have openness and extensibility built into their designs</li>
						<li>Processing models make sure that the landscape can evolve organically</li>
					</ul>
					<li>The cost of <em>breaking things at Web scale</em> is prohibitively high</li>
				</ul>
			</slide>
			<slide id="integration-decentralization">
				<title>Integration vs. Decentralization</title>
				<ul>
					<li>Both approaches are valid but for different scenarios</li>
					<li><em>Integration</em> allows to build systems that can be highly optimized</li>
					<ul>
						<li>Optimization is useful for implementing/operating one specific problem solution</li>
						<li>Optimization makes it hard to change things outside of the initial design scope</li>
					</ul>
					<li><em>Decentralization</em> allows to evolve ecosystems that can grow organically</li>
					<ul>
						<li>Decentralization is useful for allowing independent parts to evolve</li>
						<li>Operations are harder and optimization potential is limited</li>
					</ul>
					<li><em>Digital Transformation</em> first and foremost needs decoupling and flexibility</li>
				</ul>
			</slide>
			<slide id="interface-implementation">
				<title>Interface vs. Implementation</title>
				<ul>
					<li>APIs are <em>service interfaces</em> and are the stepping stone to improved agility</li>
					<ul>
						<li>Having APIs means that components can be reused without touching them</li>
						<li>Component utilization via API means coupling and needs to be managed</li>
					</ul>
					<li>MSA are <em>service implementations</em> and allow faster evolution of services</li>
					<ul>
						<li>Having MSA means that components can be added/changed without touching others</li>
						<li>Increasing the rate of change increases the need for API management</li>
					</ul>
					<li>MSA is optional but places higher demands on API management maturity</li>
				</ul>
			</slide>
			<slide id="api-management">
				<title>Decouple API Lifecycle Management</title>
				<img title="API Lifecycle" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="never-stop-architecting">
				<title>Never Stop Architecting</title>
				<ul>
					<li>Treat APIs as if <em>they could be implemented and changed independently</em></li>
					<li><q>API first</q> encourages teams to envision their products as accessible and reusable</li>
					<li>Evolve services and their APIs organically to minimize breakage in the landscape</li>
					<li>Decoupling implementations allows architecture to evolve without mandatory refactoring</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/colombia-2018"><code>dret.net/lectures/colombia-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/colombia-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="api-the-apis">
		<title>API the APIs</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a>&#160;· <a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a></toc>
		<slide id="dret">
			<title><code>@dret</code> on Twitter/GitHub</title>
			<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
		</slide>
		<part id="introduction-team">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, and <a href="http://www.linkedin.com/in/netdret">LinkedIn</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="two-platform-concepts">
			<title>Two Platform Concepts</title>
			<slide id="platform-dilemma">
				<title>The Platform Dilemma</title>
				<ul>
					<li>Platforms provide <em>support</em> but also create <em>constraints</em></li>
					<ul>
						<li><em>Support</em> in the form of a foundation and shared services/infrastructure</li>
						<li><em>Constraints</em> in the form of removing certain design options</li>
					</ul>
					<li>Balancing support and constraints is not always done explicitly</li>
					<ul>
						<li><em>Adding features</em> is more immediately visible than <em>removing options</em></li>
					</ul>
					<li><em>Microservices</em> for the first time in enterprise IT take a step <q>back</q></li>
					<ul>
						<li><em>Remove constraints</em> to foster innovation and give teams more solution options</li>
						<li><em>Add support</em> in an attempt to make the platform more productive/robust</li>
					</ul>
				</ul>
			</slide>
			<slide id="esb-platform">
				<title>Shared Runtime for Services: ESB</title>
				<ul>
					<li>Platforms often are conceived as <em>being actual infrastructure</em></li>
					<ul>
						<li><em>Centralized components</em> that provide capabilities and host services</li>
						<li>They become convenient components where every infrastructure problem is solved</li>
					</ul>
					<li>Is the <em>ESB platform pattern</em> an inescapable vicious circle?</li>
					<ul>
						<li>What if <em>every capability had to be an API-driven service itself?</em></li>
						<li>What if the platform would focus on <em>defining/providing APIs?</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="web-platform">
				<title>Principles/Protocols/Practices (P<sup>3</sup>): The Web Platform</title>
				<ul>
					<li>A set of shared <em>principles</em>, <em>protocols</em>, and <em>practices</em></li>
					<ul>
						<li><em>Principles</em> govern the general architectural style</li>
						<li><em>Protocols</em> define the way in which components interact</li>
						<li><em>Practices</em> are design patterns for when/how to use certain protocols</li>
					</ul>
					<li>The Web is and always has been about microservices</li>
					<ul>
						<li><em>Encapsulation</em> and strict API-only interactions</li>
						<li><em>Services</em> can start/evolve/succeed/fail/disappear entirely on their own</li>
						<li><em>Discovery</em> is just another service</li>
						<li><em>Description</em> is part of a service itself</li>
					</ul>
					<li><em>Shared nothing</em> architecture with no single point of contention</li>
				</ul>
			</slide>
		</part>
		<part id="p3-example">
			<title>P<sup>3</sup> Example: Service Sunsets</title>
			<slide id="why-what-how">
				<title>Managing P<sup>3</sup>: Separating Why/What/How</title>
				<ul>
					<li><em>Why</em> is there a need to provide a capability?</li>
					<ul>
						<li>Some requirements may be <em>ecosystem-driven</em></li>
						<li>Some requirements may be <em>service-driven</em></li>
					</ul>
					<li><em>What</em> can be done to API-enable the capability?</li>
					<ul>
						<li>Design capabilities so that they become <em>part of the service ecosystem</em></li>
						<li>Some capabilities may become <em>API-enabled services</em></li>
						<li>Some capabilities may become <em>part of the API design culture</em></li>
					</ul>
					<li><em>How</em> can services expose/use a capability?</li>
					<ul>
						<li>APIs are <em>strictly about the service surface</em></li>
						<li>Service implementation is a separate concern</li>
						<li>Provide assistance for <em>implementation</em> and <em>testing</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="service-sunset-why">
				<title>Why? No Service Lives Forever</title>
				<img title="Sunset" href="https://www.flickr.com/photos/dret/5960563328" src="sunset.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="service-sunset-what">
				<title>What? Signal Sunsets with <a href="http://webconcepts.info/concepts/http-header/Sunset">HTTP <code>Sunset</code></a></title>
				<ul>
					<li>APIs can change in terms of features and will be decommissioned at some point</li>
					<ul>
						<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
						<li><em>Hypermedia</em> helps as a pattern to extend extensibility beyond data models</li>
						<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
						<li><a href="http://dret.typepad.com/dretblog/2015/08/http-sunset-header.html">HTTP <code>Sunset</code>ting</a> can be used to signal upcoming sunsets on the HTTP level</li>
					</ul>
					<li>One possible pattern is that <em>APIs</em> should support <a href="http://webconcepts.info/concepts/http-header/Sunset">HTTP <code>Sunset</code></a></li>
					<ul>
						<li>Services must document/describe the support of <code>Sunset</code></li>
						<li>Services may implement <code>Sunset</code> any way they like</li>
					</ul>
				</ul>
			</slide>
			<slide id="service-sunset-how">
				<title>How? Whatever makes most sense…</title>
				<ul>
					<li>Implementation is up to individual services</li>
					<li>Implementation options will change over time</li>
					<ul>
						<li>Control the header through code explicitly written for the service</li>
						<li>Use an HTTP framework that treats sunsets as an aspect</li>
						<li>Provide configurable support in the <em>connective fabric</em> of the service ecosystem</li>
					</ul>
					<li><em><q>How</q></em> evolves more quickly than <em><q>What</q></em></li>
					<ul>
						<li><em><q>What</q></em> are the shared <em>design practices</em> of the API ecosystem</li>
						<li><em><q>How</q></em> is the shared <em>implementation practice</em> across teams</li>
					</ul>
				</ul>
			</slide>
			<slide id="capability-sedimentation">
				<title>Capability Sedimentation</title>
				<img title="Capability Sedimentation" src="capability-sedimentation.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="api-guidelines">
			<title>Writing API Guidelines</title>
			<slide id="api-guideline-why">
				<title>API Guideline: Why?</title>
				<ul>
					<li>API guidelines should communicate clear rationales</li>
					<li>Anything can be a reason but there should be some reason</li>
				</ul>
			</slide>
			<slide id="api-guideline-what">
				<title>API Guideline: What?</title>
				<ul>
					<li>For each <q>why</q> there must be at least one <q>what</q></li>
					<ul>
						<li>What can be done to address the <q>why</q> and solve the associated issue</li>
					</ul>
					<li>Each <q>what</q> must stay away from telling teams <q>how</q> to do things</li>
					<ul>
						<li>API design issues are questions of what design decisions to take</li>
						<li>Behavioral issues are questions of what a service should be doing</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-guideline-how">
				<title>API Guideline: How?</title>
				<ul>
					<li>For each <q>what</q> there must be at least one <q>how</q></li>
					<ul>
						<li>How is it possible to implement <q>what</q> the proposed solution asks for</li>
					</ul>
					<li>Each <q>how</q> must be replaceable and not be the only accepted way of doing things</li>
					<ul>
						<li>Teams can pick from the available <q>how</q> to get tooling/support</li>
						<li>Teams can invent new ways of solving the problem and invent a new <q>how</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-guideline-test">
				<title>API Guideline: Help!</title>
				<ul>
					<li>For each <q>what</q> there must be at least one <q>help</q></li>
					<li>Provide tooling to help with following the guidelines</li>
					<ul>
						<li>Test suites can check the implementation of an API</li>
						<li>Runtime tests can check the implementation of behavioral guidelines</li>
					</ul>
					<li>Guideline tests can be integrated into deployment pipelines</li>
					<ul>
						<li>Each guideline must make it easy to verify its implementation</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-guideline-format">
				<title>API Guideline Format</title>
				<ul>
					<li>API guidelines are <em>good current practices</em> for API design and evolution</li>
					<ul>
						<li>They should reflect <em>current practice</em> and not some future target state</li>
						<li>Any API can contribute to the guidelines and thus change the current practices</li>
					</ul>
					<li>API guidelines in the wild can be found in a variety of formats</li>
					<ul>
						<li><em>PDF</em> indicates <em>read-only</em> access and often means too much top-down design</li>
						<li><em>HTML</em> may be the source but still requires access and knowledge of the CMS</li>
						<li><em>GitHub</em> provides access to the sources and is a well-known tool for many</li>
					</ul>
					<li>GitHub guidelines still needs a process around how to discuss/propose/submit/approve changes</li>
					<ul>
						<li><a href="https://guides.github.com/features/mastering-markdown/">GitHub markdown</a> is the most direct way of editing/rendering content</li>
						<li><a href="https://help.github.com/articles/what-is-github-pages/">GitHub pages</a> is slightly more advanced and provides site generation</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-labels">
			<title>API Labels and Web Concepts</title>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="specs">
				<title>Web Concepts: <a href="http://webconcepts.info/specs/">Specifications</a></title>
				<ul>
					<li>Specifications define values for <link href="concepts">existing concepts</link></li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234 (HTTP/1.1 Caching)</a> defines new values for three existing Web Concepts:</li>
					<ul>
						<li><a href="http://webconcepts.info/concepts/http-cache-directive/" title="List of all HTTP Cache Directives">HTTP Cache Directives</a>: <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-age" title="The 'max-age' request directive indicates that the client is unwilling to accept a response whose age is greater than the specified number of seconds. Unless the max-stale request directive is also present, the client is not willing to accept a stale response. The 'max-age' response directive indicates that the response is to be considered stale after its age is greater than the specified number of seconds.">max-age</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-stale" title="The 'max-stale' request directive indicates that the client is willing to accept a response that has exceeded its freshness lifetime. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its freshness lifetime by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.">max-stale</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/min-fresh" title="The 'min-fresh' request directive indicates that the client is willing to accept a response whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.">min-fresh</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/must-revalidate" title="The 'must-revalidate' response directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server.">must-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-cache" title="The 'no-cache' request directive indicates that a cache MUST NOT use a stored response to satisfy the request without successful validation on the origin server. The 'no-cache' response directive indicates that the response MUST NOT be used to satisfy a subsequent request without successful validation on the origin server. This allows an origin server to prevent a cache from using it to satisfy a request without contacting it, even by caches that have been configured to send stale responses.">no-cache</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-store" title="The 'no-store' directive indicates that a cache MUST NOT store any part of either this request or any response to it. This directive applies to both private and shared caches. 'MUST NOT store' in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it.">no-store</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-transform" title="The 'no-transform' directive indicates that an intermediary (whether or not it implements a cache) MUST NOT transform the payload.">no-transform</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/only-if-cached" title="The 'only-if-cached' request directive indicates that the client only wishes to obtain a stored response. If it receives this directive, a cache SHOULD either respond using a stored response that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status code. If a group of caches is being operated as a unified system with good internal connectivity, a member cache MAY forward such a request within that group of caches.">only-if-cached</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/private" title="The 'private' response directive indicates that the response message is intended for a single user and MUST NOT be stored by a shared cache. A private cache MAY store the response and reuse it for later requests, even if the response would normally be non-cacheable.">private</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/proxy-revalidate" title="The 'proxy-revalidate' response directive has the same meaning as the must-revalidate response directive, except that it does not apply to private caches.">proxy-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/public" title="The 'public' response directive indicates that any cache MAY store the response, even if the response would normally be non-cacheable or cacheable only within a private cache.">public</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/s-maxage" title="The 's-maxage' response directive indicates that, in shared caches, the maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header field. The s-maxage directive also implies the semantics of the proxy-revalidate response directive.">s-maxage</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a>: <code><a href="http://webconcepts.info/concepts/http-header/Age" title="The 'Age' header field conveys the sender's estimate of the amount of time since the response was generated or successfully validated at the origin server.">Age</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Cache-Control" title="The 'Cache-Control' header field is used to specify directives for caches along the request/response chain. Such cache directives are unidirectional in that the presence of a directive in a request does not imply that the same directive is to be given in the response.">Cache-Control</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Expires" title="The 'Expires' header field gives the date/time after which the response is considered stale. The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.">Expires</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Pragma" title="The 'Pragma' header field allows backwards compatibility with HTTP/1.0 caches, so that clients can specify a 'no-cache' request that they will understand (as Cache-Control was not defined until HTTP/1.1). When the Cache-Control header field is also present and understood in a request, Pragma is ignored.">Pragma</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Warning" title="The 'Warning' header field is used to carry additional information about the status or transformation of a message that might not be reflected in the status code. This information is typically used to warn about possible incorrectness introduced by caching operations or transformations applied to the payload of the message.">Warning</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-warn-code/" title="List of all HTTP Warn Codes">HTTP Warn Codes</a>: <code><a href="http://webconcepts.info/concepts/http-warn-code/110" title="A cache SHOULD generate this whenever the sent response is stale.">110</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/111" title="A cache SHOULD generate this when sending a stale response because an attempt to validate the response failed, due to an inability to reach the server.">111</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/112" title="A cache SHOULD generate this if it is intentionally disconnected from the rest of the network for a period of time.">112</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/113" title="A cache SHOULD generate this if it heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours.">113</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/199" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user.">199</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/214" title="This Warning code MUST be added by a proxy if it applies any transformation to the representation, such as changing the content-coding, media-type, or modifying the representation data, unless this Warning code already appears in the response.">214</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/299" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action.">299</a></code></li>
					</ul>
					<li>Specifications add <em>one or more values</em> for <em>one or more concepts</em></li>
					<li><a href="http://webconcepts.info/specs/IETF/">Specification series</a> define naming patterns for automated processing</li>
				</ul>
			</slide>
			<slide id="concepts">
				<title>Web Concepts: <a href="http://webconcepts.info/concepts/">Concepts and Values</a></title>
				<ul>
					<li>Concepts establish a namespace for sharing values with shared meanings</li>
					<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a> are one concept with currently 192 distinct values</li>
					<ul>
						<li>The currently listed values all are defined in W3C/IETF specifications</li>
						<li>If required the list could be extended with de-facto standards as well</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/" title="List of all Link Relations">Link Relations</a> are an extensible and fuzzy concept</li>
					<ul>
						<li>103 link relations have been established as registered values</li>
						<li>Hypermedia applications often will use <q>private</q> URI-identified relations</li>
						<li>It is possible that only registered link relations are good candidates for sharing</li>
					</ul>
				</ul>
			</slide>
			<slide id="overview">
				<title>Web Concepts Overview</title>
				<img src="web-concepts.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="constraining-concepts">
				<title>Constraining Concepts</title>
				<ul>
					<li>Ignore/remove <em>specifications</em> that you are not interested in</li>
					<li>Ignore/remove <em>specification series</em> that you are not interested in</li>
					<li>Ignore/remove <em>organizations</em> that you are not interested in</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be the starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="custom-concepts">
				<title>Custom Concepts</title>
				<ul>
					<li>Add <em>specifications</em> that you are interested in</li>
					<li>Add <em>specification series</em> that you are interested in</li>
					<li>Add <em>organizations</em> that you are interested in</li>
					<li>Anything that has potential for reuse can and should be added</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be the starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="concept-coverage">
				<title>Concept Coverage</title>
				<ul>
					<li>Track <em>concept value usage</em> across APIs</li>
					<li>Create a dashboard of concept/value popularity (possibly over time)</li>
					<li>Can be done through code analysis (up to a certain point)</li>
					<li>Probably works better/easier through <q>service fabric instrumentation</q></li>
					<li>Ideally separate tooling and backed by an API/format for representing usage data</li>
					<li>Could even detect difference between declared/used Web Concepts</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/colombia-2018"><code>dret.net/lectures/colombia-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/colombia-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>