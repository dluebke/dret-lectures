<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="sandiego.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Putting Microservice Architecture into Practice through APIs</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2017-06-01">June 1, 2017</date>
	<copyright>2017 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="microservices">
		<title>Establishing a Foundation for Microservices</title>
		<toc class="abstract">Microservices as an architectural approach are a logical consequence of the containerization of software infrastructure. Microservices as the result of a containerized landscape require a different mindset and management approach for keeping track of the more diverse, dynamic, and decentralized set of services. This talk takes a closer look at those places where becoming an effective microservice gardener presents some challenges, and where lessons learned from existing decentralized systems can present us with solutions that have been practiced and perfected since the Web turned into the largest containerized microservices ecosystem about 25 years ago.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices">
			<title>Microservices</title>
			<slide>
				<title>Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from..." href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>How to get there?</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="bimodal-it">
				<title>Bimodal IT</title>
				<img title="Bimodal IT office workers" href="https://en.wikipedia.org/wiki/Minions_(film)" src="minions.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and documentation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/san-diego-2017"><code>dret.net/lectures/san-diego-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/san-diego-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="api-design">
		<title>Designing Microservice APIs</title>
		<title>API Design</title>
		<toc class="abstract">APIs play a crucial role in modern IT architecture because they delineate and define the boundaries of IT capabilities. Producers and consumers of APIs interact using the API itself as a language for communications. Designing this language makes a big difference in how easy it is for consumers to use the API, and thus can make a big difference in API discovery, understanding, adoption, and productivity. Additional challenges in the API space are caused by the fact that API producers and consumers are not necessarily synchronized in their development cycles, meaning that API designs should take into account that both producers and consumers can evolve independently, and should try to minimize potential disruption because of incompatibilities.</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/10/api-usability-matters.html" title='Erik Wilde, "API Usability Matters: UX and CX is like DX and …", October 2016'>API Usability</a>&#160;· <a href="http://apistylebook.com/" title="Arnaud Lauret, 'API Stylebook'">API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="design-process">
			<title>Design as a Process</title>
			<slide id="design-eames">
				<title>Design and Constraints</title>
				<blockquote><q href="http://www.markwunsch.com/eames">Design depends largely on constraints.</q> (<a href="https://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles Eames</a>)</blockquote>
			</slide>
			<slide id="design-questions">
				<title>Design Questions</title>
				<ul>
					<li>Design is an iterative process to solve a given problem</li>
					<ol>
						<li>Identify a <em>problem</em> (provided externally or identified internally)</li>
						<li><em>Why</em> is the problem a problem?</li>
						<li>Identify the <em>constraints</em></li>
						<li><em>What</em> can be done to address the problem?</li>
						<li>Identify the possible solutions</li>
						<li><em>How</em> is the problem solved given the constraints?</li>
						<li>Assess design quality and repeat	</li>
					</ol>
				</ul>
			</slide>
			<slide id="api-lifecycle-design">
				<title>API Lifecycle and Design</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="messages-models">
			<title>Messages vs. Models</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
					<ul>
						<li>Expose <em>as little as possible</em> of the domain complexity</li>
						<li>Resist the temptation to <em>expose your domain model</em></li>
					</ul>
					<li>Interfaces are languages for communication</li>
					<ul>
						<li>They establish a language between API provider and consumer</li>
						<li>Keeping the language simple keeps the API usable</li>
					</ul>
					<li><q>Model Creep</q> is an obstacle for API adoption</li>
					<ul>
						<li>There is no <q>one true model</q> for any domain</li>
						<li>Keeping the language simple minimizes conflict potential</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-messages">
				<title>APIs and Messages</title>
				<ul>
					<li>Messages are the sentences in API communications</li>
					<ul>
						<li>They transport meaning between collaborating peers</li>
						<li>They are independent of how peers implement their activities</li>
					</ul>
					<li>Messages can follow patterns that make APIs easier to use</li>
					<ul>
						<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, …)</li>
						<li><em>API models</em> add message models (SOAP, HAL, GraphQL, …)</li>
						<li><em>Vocabularies</em> help to describe specific APIs</li>
					</ul>
					<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
				</ul>
			</slide>
			<slide id="messaging-start">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction forms</q> to be as succinct as possible</li>
				</ul>
			</slide>
		</part>
		<part id="api-scope">
			<title>API Scope</title>
			<slide id="api-tool">
				<title>APIs as Tools</title>
				<ul>
					<li>APIs exist to solve specific problems</li>
					<ul>
						<li>Think about the problem and not the solution</li>
						<li>Design a <em>capability</em> that hides solution details</li>
					</ul>
					<li>Collaborate with consumers and gather their feedback</li>
					<ul>
						<li><q>API first</q> is all about driving solutions from the API</li>
						<li>Use approaches the make incremental design easy</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-maslow">
				<title>Tools and Problems</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-design-simple">
				<title>KISS API Design</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<li>There is no single correct path to well-designed APIs</li>
					<ul>
						<li>What is the capability that the API is exposing?</li>
						<li>What are the assumptions about API consumers?</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api">
				<title>Microservice APIs</title>
				<ul>
					<li>A bigger landscape of APIs</li>
					<li>A more diverse landscape of APIs</li>
					<li>A landscape of faster evolving APIs</li>
				</ul>
			</slide>
		</part>
		<part id="design-dx">
			<title>Developer Experience (DX)</title>
			<slide id="design-thinking">
				<title>Design Thinking</title>
				<ul>
					<li>Design is driven by creating products/solutions</li>
					<ul>
						<li>How well does the product address a given problem?</li>
						<li>How easy is the designed product to use?</li>
					</ul>
					<li>APIs often are <em>part of a bigger picture</em></li>
					<ul>
						<li>Developers have to use APIs to <em>design their applications</em></li>
						<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-integration-client">
				<title>Ad-Hoc API Integration</title>
				<img title="Client-Side API Integration" src="apis-application-layer-client.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-integration-server">
				<title>Pre-Packaged API Integration</title>
				<img title="Server-Side API Integration" src="apis-application-layer-server.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="design-coherence">
				<title>Design Coherence</title>
				<ul>
					<li>Establish a <em>culture of API design</em></li>
					<ul>
						<li><q>This is how APIs are usually looking like</q></li>
						<li>Here are some tools to help with design and documentation</li>
						<li>Here is a breakdown of what the API landscape looks like</li>
					</ul>
					<li>Observing reality helps to document <em>and</em> establish culture</li>
					<ul>
						<li>One way to think of establishing coherence is by writing <em>guidelines</em></li>
						<li>An alternative path is to document and disseminate <em>existing practices</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
					</ul>
					<li>Teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to success</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Modern service architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="design-conclusions">
			<title>Design Conclusions</title>
			<slide id="design-culture">
				<title>Design Culture</title>
				<ul>
					<li>API design matters for making APIs successful</li>
					<li>API design should be established as shared best practices</li>
					<li>Culture is formed by practice and collaboration</li>
					<li>Steer culture with tooling for design and sharing</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/san-diego-2017"><code>dret.net/lectures/san-diego-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/san-diego-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>