<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="deconstructing-the-web.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="http://www.restfest.org/">RESTfest 2016</a>, Greenville, SC</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2016-09-16">September 16, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<presentation id="index">
		<title>Deconstructing the Web</title>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract">One of REST's constraints is that of a uniform interface. The main idea of the uniform interface is that it allows components to interact without prior knowledge of each other. Web Architecture is a great example of how a uniform interface creates a large and dynamic ecosystem of interacting components. On the other hand, Web technologies as they exist today also highlight the fact that the uniform interface from 20 years ago is not quite as uniform anymore: A growing number of specifications add to the Web's uniform interface, and often knowing which interface a component is using is necessary for successful interactions. This talks presents an overview of the various axes of the uniform interface, and introduces <a href="http://webconcepts.info/"><code>webconcepts.info</code></a>, a resource intended to provide an overview of the constantly evolving set of Web concepts that make up the Web's uniform interface. These concepts serve as the starting point for documenting RESTful services, which then can focus on documenting what they do beyond implementing the uniform interface.</p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH ZÃ¼rich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Design and Strategy</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://www.flickr.com/photos/dret/" title="dret">flickr</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
				</ul>
			</slide>
			<slide id="lego-city">
				<title>The Service Web</title>
				<img title="Lego City" href="http://commons.wikimedia.org/wiki/File:HKPIEG_Infrastructure_Gallery_exhibit_-_TST_%E5%B0%96%E6%B2%99%E5%92%80_%E5%BE%80%E6%98%94%E5%BB%BA%E7%AF%89%E7%89%A9_Lego_model_past_May-2013_old_Tram_Station_Salisburg_Road_Peninsula_Hotel.JPG" src="lego-city.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="why">
				<title>Why?</title>
				<ul>
					<li>Enterprise IT has discovered <em>Web Architecture</em>: They call it <em>Microservices</em>!</li>
					<li><em>Visibility</em> is a key issue for <em>making <q>webby</q> work</em></li>
					<ul>
						<li>Enterprise IT still needs control over the evolving service landscape</li>
						<li>Being more cooperative will help the success of webby approaches</li>
					</ul>
					<li><em>Design Instrumentation</em> allows better service landscaping</li>
					<ul>
						<li>Think of it as <a href="http://www.w3.org/WAI/ER/tools/">accessibility checkers for the service web</a></li>
						<li><em>Balancing speed and safety</em> requires understanding what you are balancing</li>
					</ul>
				</ul>
			</slide>
			<slide id="uniform-interface-lie">
				<title>The Uniform Interface is a Lie!</title>
				<ul>
					<li>It is <a href="http://webconcepts.info/specs/">not that uniform</a></li>
					<li><q>Self-description</q> just gives you a chance to <a href="http://webconcepts.info/concepts/">look up concepts</a></li>
					<li>Many Web technologies are built <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">to be robust and extensible</a></li>
					<ol>
						<li>Design a meaningful and extensible foundation</li>
						<li>Have well-defined extension points for it</li>
						<li>Have a well-defined processing model (<em>must ignore</em> is a good choice)</li>
						<li>Have some idea how to manage extensions (decentralized vs. <a href="http://tools.ietf.org/html/draft-wilde-registries">registries</a>)</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="uniform-interface">
			<title>The Uniform Interface</title>
			<slide id="ui-theory">
				<title>Uniform Interface Theory</title>
				<ul>
					<li>Spontaneous interactions without prior agreement</li>
					<li><q>Surfing the Web</q> means <q>Surfing the Uniform Interface</q></li>
					<ul>
						<li>Shared assumptions mean seamless transition between services/sites</li>
						<li>The human Web hardcodes assumptions into browser capabilities</li>
					</ul>
					<li>The human Web has advantages over the service Web</li>
					<ul>
						<li>Painful memory of <em>browser wars</em> and their effect on Web development</li>
						<li>Humans are highly adaptable to deal with non-technology changes</li>
					</ul>
				</ul>
			</slide>
			<slide id="ui-practice">
				<title>Uniform Interface Practice</title>
				<ul>
					<li>The Web of today is very different from the Web we had</li>
					<ul>
						<li>HTML5 has <a href="http://html5-overview.net/current">129 current specs and counting</a></li>
						<li>HTTP has <a href="http://webconcepts.info/concepts/http-headers">175 well-known header fields and counting</a></li>
					</ul>
					<li><q>Surfing the Web</q> means <q>Surfing an evolving surface</q></li>
					<li>How to keep track of the changing landscape?</li>
					<ul>
						<li><em>Run-time instrumentation</em> helps understanding what is really happening</li>
						<li><em>Design-time instrumentation</em> allows some level of self-declaration</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="web-concepts">
			<title>Web Concepts</title>
			<slide id="snowflakes">
				<title>Sunlight Melts Snowflakes</title>
				<img title="Snowflakes" href="http://www.flickr.com/photos/amagill/4223790595" src="snowflake.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="ui-patterns">
				<title>Uniform Interface Patterns</title>
				<ul>
					<li>Identify <q>design patterns</q> based on shared concepts</li>
					<ul>
						<li>Treating concepts as a <em>flat space</em> leaves out many details</li>
						<li><q>Deeper models</q> can still be based on the <q>shared concept surface</q></li>
					</ul>
					<li>The uniform interface evolves and so should attempt to track it</li>
					<ul>
						<li>New <a href="https://github.com/dret/webconcepts/commits">Web Concepts values</a> are defined/created constantly</li>
						<li>New <a href="http://webconcepts.info/concepts">Web Concept</a> appear less frequently</li>
					</ul>
					<li><q>Make any model <em>as shallow as possible</em>, model depth tightly couples and makes model matching and mapping much harder.</q></li>
				</ul>
			</slide>
			<slide id="interface-compose">
				<title>Composing the Uniform Interface</title>
				<ul>
					<li>What is the <link href="ui-practice">Uniform Interface</link> of the Web?</li>
					<ul>
						<li>It depends on who you are asking</li>
						<li>It depends on when you are asking</li>
						<li>There is probably a relatively agreed-upon core and many extension areas</li>
					</ul>
					<li>Create a <em>composable view of the uniform interface</em> that evolves and extends</li>
					<ul>
						<li>Model as little as you can get away with</li>
						<li>Create a <em>common core</em> that everybody can start with</li>
						<li>Encourage evolution and extension</li>
					</ul>
				</ul>
			</slide>
			<slide id="concepts">
				<title>Concepts</title>
				<listing src="concepts.json" line="2-18" href="http://webconcepts.info/concepts/concepts.json"/>
			</slide>
			<slide id="specs">
				<title>Specifications</title>
				<listing src="specs.json" line="2-21" href="http://webconcepts.info/specs/specs.json"/>
			</slide>
			<slide id="concepts-and -sepcs">
				<title>Concepts and Specifications</title>
				<ul>
					<li>Concepts are established by defining/documenting them</li>
					<ul>
						<li>The most popular ones are defined and documented in standards</li>
						<li>Many concepts allow private uses of their namespace</li>
					</ul>
					<li>Many specifications establish more than one concept</li>
					<ul>
						<li>Solving a problem often requires more than just one concept</li>
						<li>The specification established the <em>domain</em> that matters for the concept</li>
					</ul>
					<li>Specifications (and services) may also depend on existing concepts</li>
				</ul>
			</slide>
			<slide id="http">
				<title>HTTP/1.1 Concepts</title>
				<listing src="rfc7231.xml" line="2-6" href="http://webconcepts.info/specs/IETF/RFC/7231"/>
				<listing src="rfc7231.xml" line="119-120" href="http://webconcepts.info/specs/IETF/RFC/7231"/>
				<listing src="rfc7231.xml" line="173-174" href="http://webconcepts.info/specs/IETF/RFC/7231"/>
			</slide>
		</part>
		<part id="webby-documentation">
			<title>Webby Documentation</title>
			<slide id="discoverable-concepts">
				<title>Discoverable Concepts</title>
				<ul>
					<li>There is not one single API documentation format</li>
					<ul>
						<li>API style and tooling affect the choice of API documentation format</li>
						<li>Microservices allow teams to pick their preferred format/tools</li>
					</ul>
					<li>Manage diversity by focusing on the surface</li>
					<ul>
						<li>Webby API documentation should be able to clearly markup Web concepts</li>
					</ul>
					<li><q>Harvesting Web concepts</q> should be relatively easy</li>
					<ul>
						<li>Microformats/RDFa/Microdata or similar tooling might be helpful</li>
						<li><em>Building </em> becomes a natural </li>
					</ul>
				</ul>
			</slide>
			<slide id="surface-focusing">
				<title>Focus on the Surface</title>
				<ul>
					<li>Having a shallow model <em>is a good thing</em></li>
					<ul>
						<li>When talking about shared concepts all that matters are the concepts</li>
						<li>Any <em>model depth</em> can be added by anybody who thinks they need it</li>
					</ul>
					<li></li>
				</ul>
			</slide>
			<slide id="surface-extension">
				<title>Extend the Surface</title>
				<ul>
					<li><em>Web Concepts</em> are different for different communities</li>
					<li>Adding concepts should be relatively easy</li>
					<ul>
						<li>Adding individual values just requires adding specifications/services</li>
						<li>Adding concepts introduces a new <q>class of concepts</q></li>
					</ul>
					<li>What is the best way to add and manage and discover extensions?</li>
					<ul>
						<li>A <a href="http://tools.ietf.org/html/draft-wilde-registries">Registry</a> is one possible way of managing extensions</li>
						<li><a href="http://webconcepts.info/concepts/">Web Concepts</a> could be the initial registry contents</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="getting-there">
			<title>The Grand Plan</title>
			<slide id="describe">
				<title>Describe Services</title>
				<ul>
					<li>Description formats are up for services to choose</li>
					<li>There must be a way to extract concepts from descriptions</li>
					<ul>
						<li>Description formats likely will be richer than the <q>flat concept space</q></li>
					</ul>
					<li>Formats and tooling can be updated to expose concepts</li>
					<ul>
						<li>Concept surface may be adjusted depending on coverage needs</li>
					</ul>
					<li>Descriptions per resource are too noisy and granular</li>
					<ul>
						<li>(Some) resources link to the service's <em>home resource</em></li>
						<li>Home resources link to service <em>documentation</em> and <em>description</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="harvest">
				<title>Harvest Descriptions for Aggregation</title>
				<ul>
					<li>Find descriptions via submission or crawling</li>
					<li></li>
				</ul>
			</slide>
			<slide id="guide">
				<title>Description-Driven Design Guide</title>
				<ul>
					<li>Harvested description can drive analytics</li>
					<li>Current use provides a good overview of the current landscape</li>
					<li>Historical use provides a good overview of service design trends</li>
				</ul>
			</slide>
			<slide id="enforce">
				<title>Monitor Service Behavior</title>
				<ul>
					<li>Descriptions can be used for behavioral monitoring</li>
					<ul>
						<li>Gracefully handle incomplete descriptions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="webby-enterprises">
				<title>Be RESTful!</title>
				<ul>
					<li>Add visibility to Web APIs</li>
					<ul>
						<li>Communicates designs and prevents snowflakes</li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/restfest-2016/"><code>dret.net/lectures/restfest-2016/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/restfest-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>