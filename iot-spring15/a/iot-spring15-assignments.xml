<?xml version="1.0" encoding="UTF-8"?>
<assignments xmlns="http://www.w3.org/1999/xhtml">
	<course link="../">IoT Spring 2015</course>
	<assignment-css-uri>../spring15.css</assignment-css-uri>
	<assignment-base-uri>http://dret.net/lectures/iot-spring15/a/</assignment-base-uri>
	<html-author-block>Instructors: Simon Mayer, Florian Michahelles, and <a href="http://dret.net/netdret/">Erik Wilde</a></html-author-block>
	<html-footer>
		<hr/>
		<table border="0" width="100%">
			<tr>
				<td align="left" style="padding-right : 5px">
					<a xmlns:cc="http://creativecommons.org/licenses/" rel="cc:license" href="http://creativecommons.org/licenses/by/3.0/" class="img">
						<img alt="Creative Commons License" title="This work is licensed under a Creative Commons Attribution 3.0 Unported License" border="0" src="../../img/somerights20.png" height="31" width="88"/>
					</a>
				</td>
				<td align="left" width="100%">
					<span class="footnote">Please send comments to <a href="mailto:dret@berkeley.edu">dret@berkeley.edu</a>
						<br/>Last modification: <!--#echo var="LAST_MODIFIED" -->
					</span>
				</td>
				<td align="right">
					<a href="http://jigsaw.w3.org/css-validator" class="img">
						<img src="../../img/vcss.gif" height="31" width="88" border="0" alt="valid CSS!" title="valid CSS!"/>
					</a>
				</td>
				<td>
					<a href="http://validator.w3.org/check/referer" class="img">
						<img src="../../img/vxhtml10.gif" height="31" width="88" border="0" alt="valid XHTML 1.0!" title="valid XHTML 1.0!"/>
					</a>
				</td>
			</tr>
		</table>
	</html-footer>
	<assignment>
		<title>Internet/Web Basics</title>
		<dates assigned="2015-01-30" due="2015-02-05"/>
		<abstract>In this assignment you will learn to develop simple distributed applications using Web technologies. After getting familiar with establishing HTTP connections and sending different kinds of HTTP requests, you will create an application that gathers data from a Web service and visualizes it locally.</abstract>
		<instructions>
			<h5>Objectives:</h5>
			<p><b>Rationale:</b> You will require a solid HTTP foundation and basic knowledge in user interface technologies for the course project. This assignment prepares you for both of these.</p>
			<p><b>Prerequisites:</b> The Web services that you will be using throughout this assignment are the <a href="http://api.bart.gov">BART API</a> as well as a <a href="http://russel.ischool.berkeley.edu:8084">simple test API</a> to a crude online forum.</p>
			<p><b>Used Languages:</b> Python, JavaScript (+ jQuery)</p>
			<h5>Deliverables:</h5>
			<p>You should create a zip file containing the Python and JavaScript code created in this assignment. You must make sure that the Python code runs with version 2.7 of the interpreter - remember that your submitted code must work on our machines as well, so use relative paths if you add external libraries to your project, and include these libraries with your zip file. Please use UTF-8 encoding for your documents and avoid special characters. <b>Submit your zip file to <a href="mailto:alexander.jones@ischool.berkeley.edu">Alexander Jones</a> (content line: "IoT Assignment 1 (your-calnet-login)") by February 5 2015, at 8pm PST.</b></p>
			<h4>1. REST Web Services in Python (3 Points)</h4>
			<p>Your task is to create a Python script that reads data from <a href="http://russet.ischool.berkeley.edu:8084">our test API</a> and pushes data to it. You will see different ways of how this can be done.</p>
			<h5>1.1 Raw HTTP Requests</h5>
			<p>Our Web API speaks the HTTP protocol, version 1.1. In this assignment, your first task is to fetch a piece of data from the API using a <q>raw</q> HTTP request, i.e. without the use of any external library: Create a method in your Python program that opens a TCP connection and sends an HTTP GET request to obtain the HTML representation of the <code>/posts</code> resource from the API. Your method should then display the API's raw, unparsed response on the screen (i.e. including the returned HTTP headers).</p>
			<h6>Hints:</h6>
			<ul>
				<li>Use the Python socket module to create a basic TCP socket. You will need to use the IP of our test API (128.32.78.37, port 8084) instead of its hostname to create the socket.</li>
				<li>Make sure that you implement a valid HTTP client according to <a href="http://tools.ietf.org/html/rfc2616">the HTTP specification</a> which includes several examples of HTTP exchanges.</li>
				<li>Note that HTTP headers are required to have a carriage return and newline (CRLF) at the end of each line - it is however not guaranteed that this is the standard line separator on your platform, so take care!</li>
				<li>Make sure that the connection to the server is properly closed.</li>
			</ul>
			<h5>1.2 HTTP Headers and Status Codes</h5>
			<p>From the raw HTTP response of the previous exercise, find the values of each of the following parameters. Summarize the meaning of each parameter in a short paragraph (include your answers as comments in your Python code).</p>
			<ul>
				<li>The HTTP Status Code</li>
				<li>The Content-Type header</li>
				<li>The Cross-Origin Resource Sharing (CORS) headers</li>
			</ul>
			<p>The response to your request in the previous exercise should carry the <q>200 OK</q> HTTP status code. Also have a look at the following four HTTP status codes and look up their exact semantics - you will maybe encounter some of these when dealing with the Activity Streams platform during the course project:</p>
			<ul>
				<li>401 Unauthorized</li>
				<li>404 Not Found</li>
				<li>409 Conflict</li>
				<li>415 Unsupported Media Type</li>
			</ul>
			<h5>1.3 HTTP Content Negotiation</h5>
			<p>So far, you only received HTML responses back from the server. A REST service can, however, offer several representations of the same resource. For instance, many resources also provide  <a href="http://json.org">JSON</a> representations - JSON is a lightweight version of XML that is often used in Web mashups and REST interfaces because it can directly be translated to JavaScript objects.</p>
			<p>To obtain a representation of the <code>/posts</code> resource that is more appropriate for machine-machine communication than HTML, we can make use of the HTTP content negotiation mechanism: Set the <code>Accept</code> header of your raw HTTP request to ask the server for a representation of the resource in the JSON format by specifying the appropriate media type. If successful, the Web server will now return a JSON file that contains all forum posts. Display the raw JSON response on the screen.</p>
			<h5>1.4 HTTP Requests using the requests Library</h5>
			<p>HTTP requests are usually not implemented by hand, but rather using one of many different libraries that take care of the intricacies of the HTTP protocol and connection management. In this task, you should create a method that uses the Python <a href="http://docs.python-requests.org/en/latest/">Requests library</a> (you'll need to install that from the given URL) for sending the same HTTP request as you created by hand in task 1.3. This method should also display the JSON representation of the <code>/posts</code> resource on the screen.</p>
			<h5>1.5 Switching Gears: POSTing Data</h5>
			<p>Up until now, you have only used the HTTP GET method to obtain data from the API. For this task, first look up the exact semantics of a few other methods that are specified in the HTTP protocol: POST, PUT, DELETE, HEAD, and OPTIONS. Next, use an HTTP POST request to send a new forum post to the API's <code>/posts</code> resource. The payload of your POST request should be in the JSON format and have the following structure:</p>
			<pre>{ 'author' : 'your-name', 'message' : 'your-message' }</pre>
			<h6>Hints:</h6>
			<ul>
				<li>Take care to correctly set the HTTP Content-Type header inside your request.</li>
				<li>Be careful about the format of your POST payload.</li>
			</ul>
			<h5>1.6 Submission Instructions for this Task</h5>
			<p>You should create a single method for each of the tasks 1.1, 1.3, 1.4, and 1.5. Your Python script should call each of these methods in-order. The script should be executable with the command <code>python main.py</code> from the command line.</p>
			<h4>2 REST Web Services and User Interfaces in JavaScript (2 Points)</h4>
			<p>In this part, you will create a website that uses JavaScript to obtain input from a remote source and display this input.</p>
			<h5>2.1 Obtaining and parsing XML</h5>
			<p>In this task, you should use <a href="http://api.bart.gov">the BART API</a>. Using its API documentation, find the resource that enables you to access BART's real-time departure estimates. Using this resource, create a simple website that loads the real-time departure estimates from the Downtown Berkeley station and displays a countdown (in steps of seconds) until the next train leaves toward Millbrae. Your website should update itself by re-loading the latest information from the BART API every 30 seconds.</p>
			<h6>Hints:</h6>
			<ul>
				<li>The BART API provides its data in XML format. Use an appropriate library to parse the responses, a good tutorial about this is available at <a href="http://www.w3schools.com/xml/xml_parser.asp">W3CSchools</a>.</li>
				<li>Your application should run in Firefox and Chrome.</li>
				<li>We encourage you to make use of the jQuery library for simplifying HTTP requests and parsing of the XML.</li>
			</ul>
			<h5>2.2: The Same-Origin Policy</h5>
			<p>The JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</a> aims to prevent cross-site request forgery by limiting how resources on different hosts can interact with each other. Knowing this, why is it possible for your website from task 2.1 to load and display data from the BART API? Include your answer as a comment within the HTML markup of your created website.</p>
			<h5>2.3 Optional: A jQuery Counter</h5>
			<p>Visualize the remaining time until the next train using the <q>Countdown</q> widget from the jQuery library.</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Mashing Up Things and Services</title>
		<dates assigned="2015-02-06" due="2015-02-12"/>
		<abstract>In this assignment you will build on Assignment 1 by connecting two Web services using Python. You will use output from the BART API as input for the Yelp API in order to find the top-rated restaurants near a few different BART stations.</abstract>
		<instructions>
			<h4>Rationale</h4>
			<p>Many of your projects (and ultimately all of them, when all of you will be asked to <q>mix and migle</q> projects) will incorporate mashups of various Web services. This assignment will teach you how to authenticate developer credentials and create a simple mashup of two Web services.</p>
			<h4>Used Languages</h4>
			<p>You will be using Python, the BART API, the Yelp API, and the Requests, oauth2, and ElementTree libraries.</p>
			<h4>Deliverables</h4>
			<p>You should create a zip file containing the Python code. You must make sure that the Python code runs with version 2.7 of the interpreter - remember that your submitted code must work on our machines as well, so use relative paths if you add external libraries to your project, and include these libraries with your zip file. Please use UTF-8 encoding for your documents and avoid special characters. Submit your zip file to <a href="mailto:alexander.jones@ischool.berkeley.edu">Alexander Jones</a> (subject line: "<q>IoT Assignment 2 (your-calnet-login)</q>) by Thursday, February 12, 2015, at 8pm PST.</p>
			<h4>Instructions</h4>
			<h5>Section 1: Working with oauth2 &amp; the Yelp API (3 points)</h5>
			<p>For Section 1 you will be learning how to authenticate developer credentials, create structured API search queries, and parse through response data using the Yelp API.</p>
			<h6>1.1 Setting up Yelp API access</h6>
			<p>In order to work with the Yelp API, as is common with many APIs, you will need to get <a href="https://www.yelp.com/signup?return_url=%2Fdevelopers%2Fmanage_api_keys">a developer key</a>. You can use a throw-away email account if you do not feel like using your actual email to register. Once registered, visit the <a href="http://www.yelp.com/developers/manage_api_keys"><q>Manage API Access</q> page</a> to retrieve your credentials for the v2.0 API.</p>
			<h6>1.2	Authenticating using the oauth2 library</h6>
			<p>For this section you will be creating a function to call the Yelp API.</p>
			<p>Create a new Python script that you will be using throughout the rest of Section 1.</p>
			<p>Next, authenticate with Yelp's Web service using the <a href="https://pypi.python.org/pypi/python-oauth2/0.7.0">oauth2 library</a> (which you will need to download/install) and your developer credentials. In addition to the <a href="https://github.com/simplegeo/python-oauth2">oauth2 documentation</a>, review <a href="http://www.yelp.com/developers/documentation/v2/authentication">Yelp's authentication documentation</a> to get a better idea of how to use your credentials to authenticate with Yelp's API. Yelp also provides <a href="https://github.com/Yelp/yelp-api/blob/master/v2/python/sample.py">a good example</a> of how to set up authentication in Python.</p>
			<p>Once your authentication is set up, your function should use the <a href="http://docs.python-requests.org/en/latest/">Requests library</a> to perform a GET request to the Yelp API call with the following query parameters:</p>
			<pre>term="restaurants"
location="Berkeley"</pre>
			<p>You should receive a JSON response, and your code should print this response.</p>
			<p><b>HINT:</b> Create a variable that is a structured query URL, then use this URL with the oauth2.Request function.</p>
			<h6>1.3	Getting &amp; parsing data from the Yelp API using structured queries</h6>
			<p>Now that you have made a basic API call, you are going to make a new call with additional query parameters in order to narrow the results. You will then extract certain information from the response data. Refer to the <a href="http://www.yelp.com/developers/documentation/v2/search_api">Yelp Search API documentation</a> to learn how to manipulate query parameters.</p>
			<p>First, create a new structured query URL, identical to the one from Section 1.2, except without the <q>location</q> parameter. Next, add the appropriate query parameters to accomplish the following:</p>
			<ul>
				<li>Set the search center point to the latitude &amp; longitude for Berkeley: Latitude=37.8759471; Longitude=-122.280622</li>
				<li>Limit your search results to a 1-kilometer radius around Berkeley's lat/lon</li>
				<li>Limit your search results to the top-10 restaurants</li>
				<li>Sort your search by restaurant rating</li>
			</ul>
			<p>Now that you have more specific search results, you are going to extract the following information for each restaurant from the response JSON:</p>
			<ul>
				<li>Name</li>
				<li>Top-level category (e.g., <q>Mexican</q>)</li>
				<li>Rating</li>
				<li>Number of ratings</li>
				<li>Distance</li>
			</ul>
			<p>Your code should print the above information for each restaurant.</p>
			<p><b>HINT:</b> You can traverse JSON objects similar to how you would traverse a dictionary.</p>
			<h5>Section 2: Working with the BART API &amp; connecting Web services (2 points)</h5>
			<h6>2.1 Getting &amp; parsing data from the BART API</h6>
			<p>Now that you have a working script for accessing the Yelp API, you are going to create a separate script that calls the BART API.</p>
			<p>In a new Python file, create a function that calls the <a href="http://api.bart.gov/docs/overview/index.aspx">BART API</a> using the Requests library to find all the stations. Parse through the response XML using the built-in <a href="https://docs.python.org/3/library/xml.etree.elementtree.html">xml.etree.ElementTree module</a>, and then return the city name (Berkeley), station name, and lat/long information for each of the Berkeley BART stations.</p>
			<p>Your code should print the station information for each Berkeley station before returning.</p>
			<p><b>HINT:</b> Consider the type of data structure return in this section – you will need to extract the station information in the next section.</p>
			<h5>2.2 Using BART API data as inputs for the Yelp API</h5>
			<p>In this section you will be using the outputs of Section 2.1 as query parameters for the Yelp API script you made in Section 1.</p>
			<p>First, go back to the Yelp API script from Section 1 and import the BART API script from Section 2 just as if you were importing a normal Python library. You can now use the function from your BART API script inside of your Yelp API script.</p>
			<p>Next you will create a new function that uses your structured query from Section 1.3 to find the best Yelp options around each of the Berkeley BART stations. This time, however, set the results limit to 20 instead of 10.</p>
			<p>Your code should print the Yelp results for each of the Berkeley BART station locations.</p>
			<p><b>HINT:</b> Call the function in your BART API script to get the station information needed to update the Yelp API query.</p>
			<h6>2.3 (Optional) Display results using a web framework</h6>
			<p>Create a simple web framework using <a href="http://flask.pocoo.org/docs/0.10/api/">Flask</a> that displays the output from Section 2.2 on a locally served web page. If you have never used Flask before, <a href="https://github.com/bev-a-tron/MyFlaskTutorial">here is a great tutorial</a>.</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Project Proposals</title>
		<dates assigned="2015-02-13" due="2015-02-15"/>
		<abstract>Everyone develops and formulates an individual project idea for the lab lightning talks. The project proposals will be used to form project teams. Ideally, the proposals should suggest connections to components or services that already exist, so that the projects can realize value without having to start from zero.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Project Development</title>
		<dates assigned="2015-02-20" due="2015-02-26"/>
		<abstract>Project group formation and development of a more concrete description of the project. This includes a detailed list of sources for input data, targets for outputs, how this data maps to activities, and what the detailed meaning of the data is with respect to the project scenario.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Activity Vocabulary Development</title>
		<dates assigned="2015-02-27" due="2015-03-05"/>
		<abstract>Our Activity Streams platform ASbase is using Activity Streams as its data model. This assignment is about developing a vocabulary that is sufficient to represent the data that is required to make the group project work. The vocabulary that is used for conveying activities which are relevant to the scenario should be formalized in this step. Also, examples for concrete activities that are exchanged during the scenario should be given.</abstract>
		<instructions>
			<p>AS vocabularies can be developed and modeled in many different ways, even when looking at the same scenario. As general guidelines, keep the following aspects in mind:</p>
			<ul>
				<li>The activity (the verb) should be specific enough so that it conveys meaningful information about what happened, so that consumers can use it to filter for the activities they do and do not want to process.</li>
				<li>The activity (the verb) should be general enough so that it is not only useful for the one specific scenario, but has potential for reuse in other scenarios as well.</li>
				<li>The activity should be accompanied by metadata that allows consumers to further narrow their selection of activities that the do or do not want to process.</li>
				<li>If possible, try to design the activity metadata in a way so that there is potential for reuse across different activities (i.e., verbs).</li>
			</ul>
			<p>AS1 (the version of AS that ASbase is using and that we are focusing on in this course) has no formalism for describing vocabularies (other than documenting in some way, very often simply in human-readable form), and therefore it is sufficient for AS1 vocabularies to be defined a way that is sufficient (and this very fuzzy term in used intentionally here) to establish shared understanding between those producing activities using a particular vocabulary, and those consuming them.</p>
			<p>AS2, on the contrary, seems to be moving in the direction of allowing or even mandating a formal foundation for vocabularies, which is the <em>Resource Description Framework (RDF)</em> (which will be covered in our lecture about <a href="../../bigdata-semweb">Big Data and Semantic Technologies</a>). AS2 is still using JSON as its representation, but also uses JSON-LD to define a mapping between the JSON representation of AS2 activities, and their RDF-based model. For this assignment and course we will not be using this more complex and sophisticated approach, but keep in mind that our lightweight and informal way of defining and documenting AS vocabularies applies to AS1 alone, and may be replaced by a more heavyweight and formal way in AS2.</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Getting Data into ASbase</title>
		<dates assigned="2015-03-06" due="2015-03-19"/>
		<abstract>Based on the vocabulary, in this assignment data sources (either APIs or networked things) are used to get information, convert it into Activity Streams, and then submit it to ASbase to that it can be used by ASbase consumers.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Getting Data out of ASbase</title>
		<dates assigned="2015-03-20" due="2015-04-09"/>
		<abstract>In this assignment, activity streams that are distributed by the platform should be consumed by ASbase clients. These can for instance be analysis modules or user interfaces/dashboards. The goal is to have an up-and-running prototype implementation of the project idea by the end of this assignment.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Mixing Groups: Scenario Mashups</title>
		<dates assigned="2015-04-10" due="2015-04-16"/>
		<abstract>Each group should coordinate with others with the goal of making use of their information within your own scenario. This will involve negotiating how to use and align the (perhaps differing) vocabularies.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
	<assignment>
		<title>Planning and Building the Mashup</title>
		<dates assigned="2015-04-17" due="2015-04-30"/>
		<abstract>Each group shall implement a mashup that is based on data from your own sources and from at least one other group, with the ASbase platform as the central coordinator.</abstract>
		<instructions>
			<p>...</p>
		</instructions>
	</assignment>
</assignments>
