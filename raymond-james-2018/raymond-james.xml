<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy-new" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="raymond-james.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Workshop, Raymond James, Tampa, FL</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-04-20">April 20, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="microservices">
		<title short="Moving to Microservices">Moving to Microservices: The Why, What, and How</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a></toc>
		<part id="academy-introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
		</part>
		<part id="microservices-why">
			<title>Microservices: Why?</title>
			<slide id="digital-transformation">
				<title>Digital Transformation</title>
				<img href="https://commons.wikimedia.org/wiki/File:Crocodile_Gaping.jpg" src="digital-transformation-crocodile.jpg" title="Digital Transformation: Because being more agile than the competition just may be a good idea..." style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="why-now">
				<title>APIs! Microservices! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-economy">
				<title>Business Agility</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Microservices: What?</title>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="web-works">
				<title>The Web Works</title>
				<ul>
					<li>MSA is about service autonomy in service-oriented landscapes</li>
					<ul>
						<li><em>Developer autonomy</em> is the freedom to choose the best tools for the job</li>
						<li><em>Operations autonomy</em> means that every service is operated standalone</li>
					</ul>
					<li>MSA is also about effectiveness in autonomy-focused service-oriented landscapes</li>
					<ul>
						<li><em>Rapid provisioning</em> means that getting started is an easy task</li>
						<li><em>Basic monitoring</em> establishes visibility into service operations</li>
						<li><em>Rapid deployment</em> increases the velocity of service landscape evolution</li>
					</ul>
				</ul>
			</slide>
			<slide id="web-industrialized">
				<title>The Web, Industrialized</title>
				<ul>
					<li>MSA applies Web Architecture's <em href="http://dret.net/netdret/publications#pau09a">loose coupling</em> to the API space</li>
					<ul>
						<li>Build services with no hidden dependencies</li>
						<li>Choose the best tool for the job</li>
						<li>Decouple service provisioning from delivery architecture</li>
						<li>Monitor service state and usage</li>
						<li>React quickly when customers or market demand change</li>
						<li>Experiment ruthlessly and keep experimentation cost low</li>
					</ul>
					<li>MSA is all about being webby while minimizing the cost</li>
				</ul>
			</slide>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="microservices-cargo-cult">
				<title>Microservices Cargo Cult</title>
				<img title="Microservices Cargo Cult" src="microservices-cargo-cult.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="how">
			<title>Microservices: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Microservices</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>Service Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>APIs emphasize independence and autonomy of capabilities</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <em>services change</em>, do people need to adapt to changing services?</li>
						<li>When <em>the landscape changes</em>, do people need to adapt to the changing landscape?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="introduction-conclusions">
		<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/raymond-james-2018"><code>dret.net/lectures/raymond-james-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/raymond-james-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="landscapes">
		<title short="Managing Microservices at Scale">Managing Microservices at Scale: The Challenges of API Landscapes</title>
		<toc class="resources"><a href="http://apistylebook.com/">API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<part id="msa-seven-v">
			<title>The Seven V's of Microservice Architecture</title>
			<slide id="msa-7v">
				<title>MSA 7V Executive Summary</title>
				<ul>
					<li><em>Variety:</em> More design freedom for teams</li>
					<li><em>Vocabulary:</em> Sharing languages across the organization</li>
					<li><em>Volume:</em> Make experimentation economical</li>
					<li><em>Velocity:</em> No more slow coordinated release schedule</li>
					<li><em>Visibility:</em> Teams work decentralized</li>
					<li><em>Vulnerability:</em> More openness means a bigger attack surface</li>
					<li><em>Volatility:</em> Manage dependencies with decentralization in mind</li>
				</ul>
			</slide>
			<slide id="variety">
				<title>Variety</title>
				<ul>
					<li>Increased <em>diversity</em> of the API and implementation landscape</li>
					<li>Manage API descriptions in extensible ways</li>
					<ul>
						<li>Your API ecosystem will evolve and new types will appear</li>
					</ul>
					<li>Provide <em>guidance</em> and <em>assistance</em> for preferred API styles/types</li>
					<ul>
						<li>Guidance should be driven by observed team preferences</li>
						<li>API ecosystems tend to converge around few technology clusters</li>
					</ul>
				</ul>
			</slide>
			<slide id="vocabulary">
				<title>Vocabulary</title>
				<ul>
					<li>APIs are languages for interactions with services</li>
					<ul>
						<li>Each <q>API language</q> can be defined individually</li>
						<li>Reusing <q>API language</q> building blocks makes APIs more coherent</li>
					</ul>
					<li>Defining shared languages is a well-known and hard problem</li>
					<ul>
						<li>A minimal goal is to share the <em>API domain languages</em></li>
						<li>A more ambitious goal is to share <em>application domain languages</em></li>
					</ul>
					<li>Landscapes should provide ways in which vocabularies are managed</li>
					<ul>
						<li>For example, the <a href="https://www.iana.org/protocols">IANA protocol registry</a> manages ~2000 namespaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="volume">
				<title>Volume</title>
				<ul>
					<li><em>More services</em> are created because there is less ceremony</li>
					<li>Make API management part of general MSA automation efforts</li>
					<ul>
						<li><em>API landscaping</em> should focus on scalable methods</li>
					</ul>
					<li><em>API landscape automation</em> must be able to adapt</li>
					<ul>
						<li>Build as little bias as possible into the foundation</li>
					</ul>
				</ul>
			</slide>
			<slide id="velocity">
				<title>Velocity</title>
				<ul>
					<li>Services <em>change more often</em> (if required) because of agile practices</li>
					<li><em>Loose coupling</em> should be one of the pillars of API design culture</li>
					<ul>
						<li>Design practices for loose coupling depend a lot on style and technology</li>
					</ul>
					<li>Expose version information as a way how service evolution can be tracked</li>
					<ul>
						<li>Versioning should be <em>informational</em> only (no breaking changes)</li>
						<li><a href="http://semver.org/">Semantic versioning</a> can be exposed through the API</li>
					</ul>
				</ul>
			</slide>
			<slide id="visibility">
				<title>Visibility</title>
				<ul>
					<li>It should be easy to <em>find and use services</em> as building blocks for new ones</li>
					<li>Deployment needs to also deploy information <em>about the API</em></li>
					<ul>
						<li><a href="https://tools.ietf.org/html/draft-wilde-service-link-rel-01">Simple description/documentation models</a> as a starting point</li>
						<li>Alternative models or more sophistication as required by landscape</li>
					</ul>
					<li><em>Service discovery</em> is both about finding and binding</li>
					<ul>
						<li><em>Finding</em> is based on searching for services by capability/feature</li>
						<li><em>Binding</em> is the ability to locate a running instance of a service</li>
					</ul>
				</ul>
			</slide>
			<slide id="vulnerability">
				<title>Vulnerability</title>
				<ul>
					<li>Support <em>service security</em> so that teams can focus on value creation</li>
					<li>APIs add to an organization's attack surface</li>
					<ul>
						<li>Any connection to an outside party is a potential attack point</li>
					</ul>
					<li>Microservices makes it harder to properly design and implement security</li>
					<ul>
						<li>Teams should not have to bother with implementing security</li>
					</ul>
					<li>Security is the classical use case of <q>API gateways</q></li>
					<li><q>Security as a Service</q> can be provided in different configurations</li>
					<ul>
						<li><em>Centralized:</em> Service logic is split between service and gateway</li>
						<li><em>Distributed:</em> Configuration is centralized while enforcement is distributed</li>
						<li><em>Decentralized:</em> Services own both configuration and enforcement</li>
					</ul>
				</ul>
			</slide>
			<slide id="volatility">
				<title>Volatility</title>
				<ul>
					<li><em>Service decentralization</em> needs different dependency management models</li>
					<li>Less operational coherence because of DevOps and differing service levels</li>
					<li><em>Resilient services</em> are necessary to avoid rolling failures</li>
					<li><em>Root cause analysis</em> needs tracking through all involved services</li>
					<ul>
						<li>This must work at landscape level and thus needs service cooperation</li>
					</ul>
					<li>Change management and decommissioning are part of API landscape management</li>
					<ul>
						<li><em>Change management</em> may be informational only (for non-breaking changes)</li>
						<li><em>Decommissioning</em> allows services to announce their retirement</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-languages">
			<title>APIs are Languages</title>
			<slide id="what-is-an-api">
				<title>What is an API?</title>
				<ul>
					<li>An API is a <em>product</em></li>
					<ul>
						<li>APIs are created and designed and developed</li>
						<li>APIs have typical product lifecycles</li>
					</ul>
					<li>An API provides <em>access to a capability</em></li>
					<ul>
						<li>The API is not the interesting thing</li>
						<li>The value is in the functionality of the API</li>
					</ul>
					<li>An API is a <em>language</em></li>
					<ul>
						<li>API users utilize API functionality by accessing the API</li>
						<li>Using APIs is a conversation between service providers and consumers</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-design">
				<title>API Design</title>
				<ul>
					<li>APIs need to be designed just like any other product</li>
					<ul>
						<li>Design starts with an architectural style and associated patterns</li>
						<li>The style sets the framework but leaves a lot of freedom</li>
						<li>Some design elements can be reused from existing APIs</li>
						<li>Some design elements have to be created for the new API</li>
					</ul>
					<li>Design works best when it reuses familiar interface concepts</li>
					<ul>
						<li>For UI design this allows end users to make educated guesses for better UX</li>
						<li>For API design the same concept of <em>familiarity</em> is helpful for DX</li>
					</ul>
				</ul>
			</slide>
			<slide id="car-interior">
				<title>Interface Design</title>
				<img src="audi-rs6-plus-interior.jpg" title="Audi RS6 Plus Interior" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="design-continuity">
				<title>Design Continuity</title>
				<img src="model-t.jpg" title="Model T Speedster" href="https://commons.wikimedia.org/wiki/File:1913_Ford_Model_T_Speedster_dashboard.JPG" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="languages-landscapes">
			<title>Languages and Landscapes</title>
			<slide id="dark-age">
				<title>SOAP: The Dark Age</title>
				<ul>
					<li>API design was practiced relatively little</li>
					<ul>
						<li>Developers exposed implementation internals as <em>Web services</em></li>
						<li>Many APIs were exposed from a shared monolithic codebase</li>
					</ul>
					<li>SOAPy SOA promised webby nirvana without delivering</li>
					<ul>
						<li>The main failure was the lack of focus on <em>loosely coupled implementation</em></li>
						<li>Evolution needs <em>ecosystems</em> where individuals can flourish or wane</li>
					</ul>
				</ul>
			</slide>
			<slide id="enlightenment">
				<title>Microservices: Enlightenment</title>
				<ul>
					<li>The first time enterprise IT <q>gets the Web</q></li>
					<ul>
						<li>Decouple implementations for speed and agility at scale</li>
						<li>Embrace diversity so that teams can focus on solving problems</li>
					</ul>
					<li>What do microservices mean for scale and longevity?</li>
					<ul>
						<li>Design decisions need context for the best possible products</li>
						<li><q>Designing into the void</q> never is the best strategy</li>
					</ul>
				</ul>
			</slide>
			<slide id="design-guidelines">
				<title>The Middle Ground: Guide and Help</title>
				<ul>
					<li>Create <a href="http://apistylebook.com/design/guidelines/" title="API Stylebook: Design Guidelines">Design Guidelines</a> that teams can use</li>
					<ul>
						<li>Ideally based on existing practice</li>
						<li>Ideally continuously changed based on the evolving landscape</li>
					</ul>
					<li>Writing as a form of communication</li>
					<ul>
						<li>Writing guidelines forces teams to talk about design practices</li>
						<li>Reading guidelines allows teams to understand the current practice</li>
					</ul>
				</ul>
			</slide>
			<slide id="design-culture">
				<title>Language and Design and Culture</title>
				<ul>
					<li>Culture <em>emerges</em> as a set of shared principles and patterns</li>
					<ul>
						<li>Culture cannot be <em>created</em> from the top-down</li>
						<li>Culture can be <em>observed</em> and <em>nudged</em> over time</li>
					</ul>
					<li><em>Design culture</em> for APIs uses shared language building blocks</li>
					<ul>
						<li>Documenting what APIs and teams are using</li>
						<li>Helping teams in the API design efforts</li>
					</ul>
					<li>Documenting <em>API design culture</em> is a continuous process</li>
					<ul>
						<li>Feedback cycle based on practice and design guidance</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="continuous-architecting">
			<title>How? Continuous Architecting!</title>
			<slide id="api-api">
				<title>API your APIs</title>
				<ul>
					<li>Expose design-time and runtime API information in the API</li>
					<ul>
						<li><em>Design-time</em> allows automation of API landscape overview</li>
						<li><em>Runtime</em> allows automation of API landscape status</li>
					</ul>
					<li>Follow <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust extensibility principles</a> for these <q>API APIs</q></li>
					<ul>
						<li><em>Meaningful Core:</em> Start with a simple but useful scenario</li>
						<li><em>Extension Points:</em> Think about how scenarios might evolve</li>
						<li><em>Processing Model:</em> Be clear about how extensions are handled</li>
					</ul>
				</ul>
			</slide>
			<slide id="webby-amazon">
				<title>Webby API Design</title>
				<img title="Webby Amazon" src="webby-amazon.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-patterns">
				<title>Emerging API Patterns</title>
				<ul>
					<li>Self-description for APIs is increasing</li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7807">Problem details</a> as a way how APIs expose error information</li>
					<ul>
						<li>Enables generic error handling but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/nottingham-json-home">Home documents</a> as a way how APIs provide starting pages</li>
					<ul>
						<li>Enables harvesting of API start points but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/inadarei-api-health-check">Healthcheck reports</a> as a way how APIs expose status information</li>
					<ul>
						<li>Enables landscape-level status reports but also allows additional information</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="management-conclusions">
			<title>Conclusions</title>
			<slide id="platform-evolution">
				<title>Platforms Need Evolution</title>
				<ul>
					<li>MSA decouples implementations for improved velocity</li>
					<li>APIs need a platform that teams can build on</li>
					<li>Build extensibility and openness into the platform</li>
					<li>API platforms <em>never stop evolving</em></li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/raymond-james-2018"><code>dret.net/lectures/raymond-james-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/raymond-james-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="change-management">
		<title short="Change Management">Change Management and Versioning</title>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="https://blog.goodapi.co/api-change-management-2fe5bba32e9b" title='Zdenek Nemec, "API Change Management", April 2017'>Change Management</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a>&#160;· <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-sunset-header" title='Erik Wilde, "The Sunset HTTP Header", Internet Draft wilde-sunset-header'>Sunset Header</a></toc>
		<part id="change-management-introduction">
			<title>Introduction</title>
			<slide id="versioning-practice">
				<title>Versioning in Practice</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>But often they are only useful for signaling continuity or breakage points</li>
						<li>Most things work or break in a binary way (or simply refuse to even try)</li>
					</ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility</em> means to work with older components</li>
						<li><em>Forward compatibility</em> means to work with more advanced components</li>
					</ul>
					<li>The Web has good rules to support both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility:</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
				</ul>
			</slide>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have and document a plan for API evolution</li>
						<li>The simplest possible plan may be to never change the API</li>
					</ul>
					<li>Extensibility should be made easy for API consumers</li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li>Extension points make it clear where to expect extensions</li>
						<li>Processing models make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="version-identification">
				<title>Identifying Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions on the service surface</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to see/support in the general Web fabric</li>
						<li>Media types often are not used by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used in URI path or in the domain name</li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers follow the <code>MAJOR.MINOR.PATCH</code> pattern and the following rules</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for incompatible API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
					</ul>
					<li>Mostly about how to name implementation artifacts and of limited use for APIs</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>No behavioral benefit other than allowing clients to raise errors and stop working</li>
					</ul>
				</ul>
			</slide>
			<slide id="linking-versions">
				<title>Linking Versions</title>
				<ul>
					<li>Communicating versions via links works better than naming schemes</li>
					<ul>
						<li>APIs remain self-contained as long as consumers are working with one version</li>
						<li>APIs are brought into context when consumers want versioning information</li>
					</ul>
					<li><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a> defines link relations for <q>simple version navigation</q></li>
					<ul>
						<li><code>successor-version</code> links to the newer version of the API</li>
						<li><code>latest-version</code> links to the newest version of the API</li>
						<li><code>predecessor-version</code> links to the older version of the API</li>
						<li><code>version-history</code> links to a resource about the version history</li>
					</ul>
					<li>Plays well with <em>home documents</em> and their role for an API</li>
					<ul>
						<li>APIs share home documents or at least version histories across versions</li>
						<li>Versioning links are used to allow navigation across all API versions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="decommissioning">
			<title>Decommissioning</title>
			<slide id="http-sunset">
				<title>Signaling API End-of-Life</title>
				<ul>
					<li>APIs can change in terms of features and will be decommissioned at some point</li>
					<ul>
						<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
						<li><em>Hypermedia</em> helps as a pattern to move extensibility beyond data models</li>
						<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
						<li><a href="http://dret.typepad.com/dretblog/2015/08/http-sunset-header.html">HTTP <code>Sunset</code>ting</a> can be used to <a href="http://webconcepts.info/concepts/http-header/Sunset">signal upcoming sunsets on the HTTP level</a></li>
					</ul>
					<li>One possible requirement is that APIs must support <code href="http://webconcepts.info/concepts/http-header/Sunset">Sunset</code></li>
					<ul>
						<li>Services must document/describe the support of <code>Sunset</code></li>
						<li>Services may implement <code>Sunset</code> any way they like</li>
						<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="change-management-conclusions">
			<title>Conclusions</title>
			<slide id="plan-for-evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/raymond-james-2018"><code>dret.net/lectures/raymond-james-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/raymond-james-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>