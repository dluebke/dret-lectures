<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="siemens" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="kesw2015.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/ischool/ischool/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="http://2015.kesw.ru/">International Conference on Knowledge Engineering and Semantic Web (KESW 2015)</a></title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a></author>
	<affiliation>Siemens</affiliation>
	<date short="2015-10-01">October 1, 2015</date>
	<copyright>2015 Erik Wilde</copyright>
	<presentation id="index">
		<title>What WoT means for the Web</title>
		<slide id="abstract">
			<title>Abstract</title>
			<p class="abstract">Looking back at the Internet, arguably the biggest impact on how the Internet evolved and developed was the invention of the Web. It can be argued that the nascent <em>Internet of Things (IoT)</em> might take the same trajectory, with first seeing limited and isolated success in specific domains with specific protocols, and then taking off exponentially once those barriers are removed by making the step from IoT to the <em>Web of Things (WoT)</em>. This talk is exploring the ways in which IoT and the Web may change once WoT becomes a reality.</p>
		</slide>
		<part id="IoT-and-WoT">
			<title>IoT and WoT</title>
			<slide id="iot">
				<title>Internet of Things (IoT): So Many Worlds!</title>
				<img src="internet-of-things.jpg" href="https://pixabay.com/en/network-iot-internet-of-things-782707/" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide>
				<title>Why/How IoT/WoT Changes the Web</title>
				<ul>
					<li>IoT makes <em>very many</em> things accessible and possibly actionable</li>
					<ul>
						<li><q href="http://www.gartner.com/newsroom/id/2905717">Gartner, Inc. forecasts that 4.9 billion connected things will be in use in 2015, up 30 percent from 2014, and will reach 25 billion by 2020.</q></li>
					</ul>
					<li>WoT promises to be the <q>connective fabric</q> for IoT resources</li>
					<ul>
						<li>The Internet's success was greatly accelerated by the Web</li>
						<li>The Web's main value is to avoid verticals and provide an integration layer</li>
						<li>Web architecture's model of <em>resources</em> is flexible enough to accommodate IoT</li>
					</ul>
					<li>Innovative/useful applications will increasingly include <q>IoT things</q></li>
					<ul>
						<li>Building <em>across</em> verticals can be done more easily with WoT</li>
						<li>Creating and using <em>patterns</em> for WoT resources will become essential</li>
					</ul>
					<li>WoT in 8 words: <em><q><span title="Web of Things">WoT</span> is a webby <span title="Service-Oriented Architecture">SOA</span> for <span title="Internet of Things">IoT</span> resources.</q></em></li>
				</ul>
			</slide>
			<part id="IoT-problems">
				<title>IoT Problems</title>
				<slide id="webby-things">
					<title>Making Things Webby</title>
					<ul>
						<li>IoT starts with connecting and networking things</li>
						<ul>
							<li>Big challenges on lower layers such as frequency band management</li>
							<li>Once connectivity is established, IoT can take over</li>
						</ul>
						<li>IoT is about making things accessible <em>on the Internet</em></li>
						<ul>
							<li>Internet connectivity can be slow, intermittent, and risky</li>
							<li>WoT treats IoT as an implementation issue</li>
						</ul>
						<li>What is missing to make the step from IoT to WoT?</li>
						<ul>
							<li><a href="http://www.w3.org/">W3C</a>'s <em href="http://www.w3.org/WoT/IG/">WoT Interest Group (IG)</em> is working on addressing the gaps</li>
							<li>Many IoT scenarios need more Web architecture to become more webby</li>
							<li>Generic WoT interaction models may be the same tipping point as they were for the Web</li>
						</ul>
					</ul>
				</slide>
				<slide id="invisibility">
					<title>Invisibility</title>
					<ul>
						<li>No Web-level identification of resources/services</li>
						<ul>
							<li>URIs often are resolvable HTTP URIs but don't have to be (things may be identifiable but not accessible)</li>
							<li>Identification (even without interaction) creates a lot of value</li>
							<li>Identity and identification are hard problems for real-world resources (it often depends on context what the <q>right</q> approach is)</li>
						</ul>
						<li><em>Data Fusion</em> works best with known and managed identifiers</li>
						<ul>
							<li>Entity recognition ans disambiguation are notoriously difficult tasks</li>
						</ul>
						<li>Robust naming schemes are needed for all WoT scenarios</li>
						<ul>
							<li>The network effect needs stable and relatable identifiers</li>
							<li>Actionable identifiers are a (big) plus but not required</li>
						</ul>
						<li><q>If something matters to you, you give it a name, and then you can talk about it.</q></li>
					</ul>
				</slide>
				<slide id="discoverability">
					<title>Discoverability</title>
					<ul>
						<li>No easy way to find existing (i.e., identified) resources</li>
						<ul>
							<li>Will there be a <q>Google for the IoT</q>? How would it work in today's/tomorrow's WoT?</li>
							<li>Something similar to <a href="http://schema.org/">schema.org</a> may be helpful/necessary</li>
						</ul>
						<li>Discovery in IoT often also needs a robust update channel</li>
						<ul>
							<li>The set of discovered/relevant resources can change over time</li>
							<li><q>Subscribing</q> to change messages allows clients to stay in sync</li>
						</ul>
						<li>Discovery is a highly contextual problem (what is your goal?)</li>
						<ul>
							<li><em>Building managers</em> have little interest in sensor details but need them to be working</li>
							<li><em>Maintenance personnel</em> need to track sensors through their lifecycle to manage them</li>
						</ul>
						<li><q>In an open world, resources come and go, and discovering them is essential.</q></li>
					</ul>
				</slide>
				<slide id="siloization">
					<title>Siloization</title>
					<ul>
						<li>Many of today's IoT solutions are verticals</li>
						<ul>
							<li>Easier to design and implement for vendors (engineering legacy)</li>
							<li>Easier to control and monetize (<em>walled gardens</em> can be profitable)</li>
						</ul>
						<li>A lot of value can be created by working across silo boundaries</li>
						<ul>
							<li><em>Avoid</em> <q>warehouse</q> approaches selling centralized <q>integration</q></li>
							<li><em>Prefer</em> ecosystem approaches that with a truly decentralized architecture</li>
							<li>Centralization should be a policy/operational choice, <em>not an architectural one</em></li>
						</ul>
						<li><q>The Web is an interlinked set of decentralized resources that clients can traverse any way they like.</q></li>
					</ul>
				</slide>
				<slide id="snowflakes">
					<title>Precious Snowflakes (aka NIH)</title>
					<img src="snowflakes.jpg" style="float : right ; width : 25% ; margin : 0.5em 1em 1em 1em ; "/>
					<ul>
						<li>Starting from scratch often is easier than reuse</li>
						<ul>
							<li>Many existing designs are not well-documented</li>
							<li>Many existing designs are not open/extensible</li>
							<li>In many cases there is no (immediate) incentive to reuse</li>
						</ul>
						<li><em>Service patterns</em> are a good starting point</li>
						<ul>
							<li>W3C should stay away from specific domains and focus on the <em>connective fabric</em></li>
							<li>Domain models should be left to domain experts and their organizations</li>
							<li>Domain models should be built on their preferred metamodels</li>
						</ul>
					</ul>
					<li><q>Try to minimize the element of surprise and reuse everything that you can.</q></li>
				</slide>
			</part>
		</part>
		<part id="web-challenges">
			<title>Web Challenges</title>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li><em>Loose Coupling</em> allows clean separation of concerns</li>
					<ul>
						<li>Ability to use services without the need for <em>shared deep models</em></li>
						<li><em href="http://www.domainlanguage.com/ddd/">Domain Driven Design (DDD)</em> tells us to cleanly and clearly separate domains</li>
					</ul>
					<li>APIs are <em>contracts</em> and should be as simple as possible</li>
					<ul>
						<li>The Web's basic interaction contract is the <em>Hypertext Transfer Protocol (HTTP)</em></li>
						<li>Media types (a.k.a. vocabularies) are similarly important for productive interactions</li>
					</ul>
					<li>Agreement on interaction patterns is a good foundation</li>
					<ul>
						<li><em href="http://www.w3.org/html/">Hypertext Markup Language (HTML)</em> for human-facing form-based interactions</li>
						<li><em href="https://tools.ietf.org/html/rfc4287">Atom</em> failed (mostly) because of XML's demise, but lives on in pockets such as <em href="http://www.apple.com/itunes/podcasts/">podcasts</em><!-- and <em href="" title="Open Book">OBML</em>--></li>
						<li><em href="http://www.w3.org/TR/activitystreams-core/">Activity Streams</em> may become the "JSON-based Atom" of the future</li>
						<li><em href="http://www.w3.org/TR/ldp/">Linked Data Platform (LDP)</em> as a starting point for exposing RDF-centric collections</li>
					</ul>
				</ul>
			</slide>
			<part id="wot-challenges">
				<title>WoT Challenges</title>
				<slide>
					<title><q>Selling the Web</q> can be hard</title>
					<ul>
						<li>Many IoT services/platforms are well-designed verticals</li>
						<li>Bridging IoT verticals can be uninteresting or even risky for IoT players</li>
						<ul>
							<li>Breaking out of verticals happens when users demand a better approach</li>
						</ul>
						<li>The Web is a constantly evolving set of technologies that practitioners need to know</li>
						<ul>
							<li>HTTP has <a href="https://github.com/dret/sedola/blob/master/MD/headers.md" title="probably outdated by now...">135 (registered) header field types</a></li>
							<li>The Web has <a href="https://github.com/dret/sedola/blob/master/MD/linkrels.md" title="probably outdated by now..."> (registered) link relations</a></li>
							<li>Most companies prefer monolithic frameworks that can be supported by tools</li>
						</ul>
						<li>Coming up with domain models is (a minor) part of the challenge</li>
						<ul>
							<li>Establish a Web-aware designer/developer community</li>
							<li>Look at other scenarios for inspiration</li>
							<li>Participate in the ongoing effort to <em>improve the Web one spec at a time</em></li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="ld-challenges">
				<title>Linked Data Challenges</title>
				<slide id="ldow2015-soeren">
					<title>Vocabularies are Important</title>
					<img src="ldow2015-lod-cloud-chris.jpg" title="" style="height : 65% ; margin : 4% ; "/>
				</slide>
				<slide id="ldow2015-chris">
					<title>Vocabularies are Special</title>
					<img src="ldow2015-layer-cake-soeren.jpg" title="Sharing Data vs. Sharing Concepts" style="height : 65% ; margin : 4% ; "/>
				</slide>
				<slide>
					<title>Interaction Matters</title>
					<ul>
						<li>The Web is a <em>Service/Interaction Platform</em></li>
						<ul>
							<li>The <em>primary concern</em> is the interaction model (how to navigate a service's resources)</li>
							<li>The domain model of the is <em>secondary</em> (what the resources represent and how they do it)</li>
						</ul>
						<li><em href="https://www.w3.org/community/hydra/">Hydra</em> is an RDF-centric approach for representing hypermedia</li>
						<ul>
							<li>It is an RDF model for many existing and tested interaction patterns for Web services</li>
							<li>It includes paging, templated queries, error responses, documentation links, and more</li>
							<li>It is struggling in a community that is <em>data centric</em> and not <em>service centric</em></li>
						</ul>
					</ul>
				</slide>
				<slide id="hydra-overview">
					<title>Hydra Overview</title>
					<img src="hydra-vocabulary.png" title="" style="height : 65% ; margin : 4% ; "/>
				</slide>
			</part>
		</part>
		<part id="small-is-beautiful">
			<title>Small is Beautiful</title>
			<slide id="case-against-world-models">
				<title>The Case Against World Models</title>
				<ul>
					<li><em href="http://martinfowler.com/bliki/BoundedContext.html">Bounded Context Concept</em> of <em>Domain Driven Design (DDD)</em></li>
					<ul>
						<li>For complex domains, a unified and consistent model is not a feasible goal</li>
						<li>Instead, focus on <em>shared concepts</em> between domains as the <q>service touch points</q></li>
					</ul>
					<li>Not every concept should (or can) be universally reusable</li>
					<ul>
						<li>Only the <em>service surface</em> is something users have to understand</li>
						<li>All other concepts are hidden and domain-specific (and <em>not part of the contract</em>)</li>
					</ul>
					<li><em>Information Hiding/Encapsulation</em> is well-established in software engineering</li>
					<ul>
						<li>It hides implementation (code) as well as non-interface information (hidden attributes)</li>
						<li>Similar approaches could be taken for large-scale knowledge engineering</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Models and the Web</title>
				<ul>
					<li>The Web is a place for exposing <em>interaction models</em></li>
					<ul>
						<li>Allows service users to understand as much as they have to understand</li>
					</ul>
					<li>The Web is not a place for exposing <em>implementation models</em></li>
					<ul>
						<li>Violates the principles of information hiding and service simplicity</li>
					</ul>
				</ul>
			</slide>
			<slide id="web-is-hypermedia">
				<title>The Web is Hypermedia</title>
				<ul>
					<li><em>Service Engineering</em> takes the front seat on the Web</li>
					<ul>
						<li>How are resources and services exposed and how can they be navigated?</li>
					</ul>
					<li>Use the uniform interface when appropriate (make your service visible to everybody)</li>
					<ul>
						<li>Pushing everything into a representation makes the uniform interface less powerful</li>
						<li>For example, <em href="http://tools.ietf.org/html/rfc4287">caching</em> works well because it is not specific to a media type</li>
					</ul>
					<li>Always think in the four main steps of generic REST applications</li>
					<ol>
						<li>Start with a representation of a hypermedia resource (parsing)</li>
						<li>Decide which link to follow based on application goals (navigation decision)</li>
						<li>Use representation and client state to initiate interaction (request)</li>
						<li>Retrieve representation of a hypermedia resource (response)</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="diversity">
			<title>Embrace Diversity</title>
			<slide id="xkcd-standards">
				<title>No Silver Unicorn</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide id="small-models">
				<title>Dare To Think Small</title>
				<img src="small-models.png" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide id="web-models">
				<title>Web Models</title>
				<ul>
					<li>Web models should be as simple as possible</li>
					<ul>
						<li>Web models should have well-defined extension points</li>
						<li>Almost always, <em>mustIgnore</em> is a good choice for extension semantics</li>
					</ul>
					<li>Maybe <q>μServices</q> should be based on <q>μVocabularies</q>?</li>
					<ul>
						<li>Make (exposed) vocabularies narrow and shallow, they are for communication agreement, and not for world description. The less there is to agree on, the easier it is to find agreement.</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>The 3 Main Sins of Web Models</title>
				<ol>
					<li>The Abyss of Abstraction</li>
					<ul>
						<li>Resist the urge to create <q>upper ontologies</q> unless you need to</li>
					</ul>
					<li>The Expanse of Everything that Exists</li>
					<ul>
						<li>Resist the urge to try to predict the future</li>
						<li>Instead, make sure that when the future happens, you can handle it</li>
					</ul>
					<li>The Illusion of Order</li>
					<ul>
						<li>Resist the urge to assume that everything is well-defined</li>
						<li><em>Tagging</em> may feel weird but sometimes is the way to go</li>
					</ul>
				</ol>
			</slide>
			<slide>
				<title>Models Create Value</title>
				<ul>
					<li>Metamodels are tools and shouldn't be overemphasized</li>
					<ul>
						<li>People make money because of models, not because of representing them in XML, JSON, or RDF</li>
						<li>Buying (too much) into one metamodel universe is a risk (anybody remember ASN.1?)</li>
					</ul>
					<li>Build good models and help people understand them</li>
					<ul>
						<li>The less baggage comes with a model the easier it will be to sell</li>
						<li>JSON's success is a big lesson about simplicity and ease-of-use</li>
					</ul>
					<li>Dare to be a metamodel apostate</li>
					<ul>
						<li>There is no single true answer to the complex question of how to define a model</li>
						<li>Models are tools and metamodels are tools, and not a reflection of reality</li>
					</ul>
				</ul>
			</slide>
			<slide id="wot-service-model">
				<title>WoT Service Models</title>
				<img src="wot-service-model.png" style="height : 65% ; margin : 4% ; "/>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide>
				<title>WoT is Happening!</title>
				<ul>
					<li>On the Web, narrow and shallow is beautiful!</li>
					<li>Wide and deep models are useful for implementations</li>
					<li>Reduce coupling by reducing the service surface</li>
					<li>Start from interactions, not from data models</li>
					<ul>
						<li>The first question is: <q>What can people do with a service?</q></li>
						<li>The second question is: <q>What are the resources the service exposes?</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="thanks">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="height : 65% ; margin : 4% ; "/>
			</slide>
		</part>
	</presentation>
</hotspot>