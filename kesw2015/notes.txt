main picture:

make vocabularies narrow and shallow, they are for communication agreement, not for world description. the less there is to agree on, the easier it is to find agreement.

focus on actions and not on things; things are secondary to actions. what needs agreement and the actions, and then in the scope of these actions the things that are required for them. what matters most is that actors are able to communicate; the actions then should be based on thing models that are as shallow and narrow as possible.

paint a figure with "modeling complexity/dimensions" showing the following:

- the abyss of abstraction (avoid "upper ontology" trap until you need abstract types)
- the expanse of everything that exists
- the illusion of order ("tagging" may be better than "filing" when describing things, also see the note about avoiding upper ontologies)

focus on how vocabularies fit into the communication process. the web doesn't thrive on shared world models, it thrives on actionable communication models.

- shared world models are good for tight coupling and close collaboration
- "opaque" world models are good for loose coupling and spontaneous interactions

create picture that contrasts traditional "knowledge/resource engineering" versus "interaction vocabulary engineering". reinforce the idea of "shallow and narrow" by visualizing that vocabularies should be self-contained and tightly constrained interaction models, and not sprawling world models that try to interconnect everything.

generally speaking, the main topic should be to encourage thinking in "bounded contexts" instead of trying to build a tightly interconnected weave of concepts of everything. this is not necessarily conflicting, but it makes things more challenging. interested peers should *only* be required to accept as few of these bounded contexts as possible, and ideally these should be self-contained (i.e., no dependencies on models that might change outside of the scope of the bounded context).

maybe use the model mapping paper http://dret.net/netdret/publications#wil06m as a starting point, at least in terms of mapping between service models and implementation models.

models matter (a lot!), metamodels not so much (but they are useful). don't get sucked into "one metamodel to rule them all" debates, instead try to create value by building models and making it easy for people to understand and share them.