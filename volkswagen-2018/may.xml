<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy-new" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="may.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Volkswagen May 2018</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-05-03">May 3, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc-may.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction-may">
		<title>Introduction</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="academy-introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="foundations">
		<title>API Foundations</title>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title="API Maps: Hypermedia API Design">API Maps</a></toc>
		<part id="ui-api">
			<title>UIs and APIs</title>
			<slide id="distributed-systems">
				<title>Distributed Systems</title>
				<ul>
					<li>Any system that is not one integrated system has <em>components</em></li>
					<ul>
						<li>Components help to <em>separate</em> parts of the system</li>
						<li>Components must be able to <em>cooperate</em> for the system to work</li>
					</ul>
					<li>Distributed systems are always based on some model of component <em>interaction</em></li>
					<ul>
						<li><em>Tight coupling</em> means that it is harder to change or rearrange components</li>
						<li><em>Loose coupling</em> makes it easier for the system to be changed</li>
					</ul>
					<li>Interactions happen at well defined <em>interfaces</em> within the system</li>
				</ul>
			</slide>
			<slide id="interfaces">
				<title>Interfaces</title>
				<ul>
					<li>Interfaces are well-defined ways how components interact</li>
					<li>Interfaces allow <em>decoupling</em> by separating components</li>
					<li>Interfaces allow <em>cooperation</em> by defining <q>contracts</q> for interaction</li>
					<li><em>User Interfaces (UIs)</em> are a way how machines and humans communicate</li>
					<ul>
						<li><em>Command Line Interfaces (CLIs)</em> define text-based interactions through consoles</li>
						<li><em>Graphical User Interfaces (GUIs)</em> are based on visual metaphors and interactions</li>
					</ul>
					<li><em>Application Programming Interfaces (APIs)</em> are a way how machines communicate</li>
				</ul>
			</slide>
			<slide id="interfaces-and-coupling">
				<title>Interfaces and Coupling</title>
				<ul>
					<li>Interfaces allow to separate service production and consumption</li>
					<ul>
						<li><em>Web apps</em> allow users spontaneous access from any Web-enabled client</li>
						<li><em>Native apps</em> only work for supported platforms and after app download</li>
					</ul>
					<li><em>Loose coupling</em> improves scalability and agility</li>
					<ul>
						<li>Producers provide services and interfaces</li>
						<li>Consumers can use services without prior interaction or installation</li>
						<li>Both sides can make changes without the other side having to know</li>
					</ul>
				</ul>
			</slide>
			<slide id="browser-request">
				<title>Browsers speak HTTP</title>
				<ul>
					<li>Browser request Web pages (and required resources) via HTTP requests</li>
					<li>HTTP requests have a <em>request line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-request-minimal.txt"/>
				<listing src="http-get-request-chrome.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTTP</title>
				<ul>
					<li>Browser receive Web pages (and required resources) via <em>HTTP responses</em></li>
					<li>HTTP responses have a <em>status line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-response.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTML</title>
				<listing src="http-get-response.html"/>
			</slide>
			<slide id="html-layout">
				<title>HTML Structures are Layout Structures</title>
				<ul>
					<li>HTML is designed to help <em>browsers created a formatted page</em></li>
					<ul>
						<li>Formatting is based on elements for paragraphs, lists, tables, …</li>
						<li>HTML and browsers are not concerned with content or meaning</li>
					</ul>
					<li>HTML has a rather simple formatting model</li>
					<ul>
						<li>HTML is supposed to represent the fundamental layout structures</li>
						<li>Fine-tuning the layout can be done with <em>Cascading Style Sheets (CSS)</em></li>
					</ul>
					<li><em>HTML+CSS</em> are the foundation for statically formatted Web pages</li>
					<li>Dynamic pages also use <em>DOM+JavaScript</em> for creating a dynamic browser-based GUI</li>
				</ul>
			</slide>
			<slide id="screen-scraping">
				<title>Screen Scraping</title>
				<ul>
					<li>Screen scraping uses GUIs as APIs</li>
					<li>Layout and keywords and markup allow to <q>understand</q> the content</li>
					<li>Screen scraping is always brittle and requires sophisticated monitoring</li>
					<li>Sophisticated screen scraping is hard but can be relatively robust</li>
					<ul>
						<li>It is <em>much more robust</em> when client and server cooperate (i.e., update coordination)</li>
					</ul>
					<li><em>Always</em> prefer APIs over screen scraping when they are an option</li>
				</ul>
			</slide>
			<slide id="server-response-api-xml">
				<title>Machine-Readable Data (XML)</title>
				<listing src="http-get-response.xml"/>
			</slide>
			<slide id="server-response-api-json">
				<title>Machine-Readable Data (JSON)</title>
				<listing src="http-get-response.json"/>
			</slide>
			<slide id="gui-to-api">
				<title>From GUI to API</title>
				<ul>
					<li>Applications provide a variety of services for users</li>
					<ul>
						<li>In Web-style GUIs, these are available at various pages</li>
						<li>In SPA GUIs, these are available through various interaction paths</li>
						<li>In APIs, these are available according to the <em>API style</em></li>
					</ul>
					<li>APIs can use various style and two of them are inspired by the Web</li>
					<ul>
						<li><em>URI Style</em> lists all <q>pages</q> based on their URIs or URI patterns</li>
						<li><em>Hypermedia Style</em> designs APIs as starting points and interaction paths</li>
					</ul>
					<li>API design follows a similar pattern to GUI design</li>
					<ul>
						<li>Start from use cases and design APIs that satisfy those use cases</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-product">
			<title>APIs are Products</title>
			<slide id="product-thinking">
				<title>Product Thinking</title>
				<ul>
					<li>Products are solutions for solving the problems of users</li>
					<ul>
						<li>Most users do not want to use a product, they want to solve a problem</li>
						<li>Understanding user problems leads to better product design and management</li>
						<li>Improving products should be focused on better solving user problems</li>
					</ul>
					<li>Products need to be managed throughout their full lifecycle</li>
					<ul>
						<li>Inception and design based on user stories</li>
						<li>Development and testing gathering feedback as early as possible</li>
						<li>Observing product usage and continuous improvement</li>
						<li>Retiring/replacing product as part of the overall lifecycle</li>
					</ul>
					<li>APIs are the visible/actionable part of problem-solving capabilities</li>
				</ul>
			</slide>
			<slide id="kaizen">
				<title>Kaizen: Continuous Improvement</title>
				<img title="Kaizen: Continuous Improvement" href="https://commons.wikimedia.org/wiki/File:Kaizen-1.svg" src="kaizen.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="product-evolution">
				<title>Product Consumers and Evolution</title>
				<ul>
					<li>APIs are <q>consumed</q> as a subscription-based activity</li>
					<ul>
						<li>APIs may change even if the consumers did not change anything</li>
						<li>Not breaking consumers is essential for scalable API management</li>
					</ul>
					<li>API consumers might use API products in unconventional ways</li>
					<ul>
						<li><em>Test servers</em> can help consumers to validate their implementations</li>
						<li><em>Production servers</em> should focus on maximizing operational stability</li>
						<li><em>Version freezes</em> allow consumers to never worry about possible updates</li>
					</ul>
					<li>Communicating change management and versioning clearly help to set expectations</li>
				</ul>
			</slide>
			<slide id="hyrums-law">
				<title>Hyrum's Law</title>
				<blockquote><q href="http://www.hyrumslaw.com/">With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.</q> (Hyrum Wright)</blockquote>
			</slide>
			<slide id="product-labels">
				<title>Product Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-product-maturity">
				<title>API Product Maturity</title>
				<ul>
					<li>Organizations must have safe and scalable API product management practices</li>
					<ul>
						<li>For internal APIs, this determines how quickly and safely the organization can change</li>
						<li>For external APIs, this determines how quickly and safely the organization can change course</li>
					</ul>
					<li><em>API Archaeology</em> can help to uncover existing APIs that nobody manages</li>
					<ul>
						<li>Integration projects between systems for specific interaction scenarios</li>
						<li><em>Accidental APIs</em> should be replaced by designed and managed ones</li>
					</ul>
					<li><em>API Management</em> has to be practiced by anybody producing/consuming APIs</li>
				</ul>
			</slide>
		</part>
		<part id="foundations-conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volkswagen-2018"><code>dret.net/lectures/volkswagen-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volkswagen-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="openapi">
		<title>OpenAPI</title>
		<toc class="resources"><a href="https://github.com/OAI/OpenAPI-Specification" title="OpenAPI Specification Repository">OpenAPI</a>&#160;· <a href="http://openapi-map.apihandyman.io/?version=3.0" title="Interactive OpenAPI Map by Arnaud Lauret">OpenAPI Map</a></toc>
		<part id="openapi">
			<title>OpenAPI (formerly known as Swagger)</title>
			<slide id="openapi-basics">
				<title>OpenAPI Basics</title>
				<img src="openapi-logo.png" href="https://www.openapis.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Swagger started as an easy way to generate code from an API description</li>
					<ul>
						<li><em>Server code</em> is generated by generating stubs for all specified URI paths</li>
						<li><em>Client code</em> generates SDKs for clients by wrapping API interactions</li>
					</ul>
					<li><em>Swagger</em> was renamed to <em>OpenAPI</em> at the beginning of 2016</li>
					<ul>
						<li>Swagger still exists <a href="https://smartbear.com/">as a product suite</a> offered by <a href="https://swaggerhub.com/">SmartBear</a></li>
						<li><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">OpenAPI 3.0</a> is the first standalone OpenAPI version and was <a href="https://www.openapis.org/blog/2017/07/26/the-oai-announces-the-openapi-specification-3-0-0">released in July 2017</a></li>
					</ul>
					<li>OpenAPI is focused on <em>URI Style</em> APIs by modeling APIs as sets of URI paths</li>
					<ul>
						<li>Paths can be templated and have operations and optionally parameters</li>
						<li>JSON support is built into OpenAPI for request/response schemas</li>
						<li>XML support is present but rather weak in terms of XML sophistication</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-yaml">
				<title>JSON and YAML</title>
				<ul>
					<li>JSON is the de-facto standard for structured data on the Web</li>
					<li>JSON is human-readable but visibly comes from a code background</li>
					<li><a href="http://yaml.org/" title="YAML Ain't Markup Language">YAML</a> evolved as a human-readable format for configuration data</li>
					<ul>
						<li>JSON data can be written in YAML for a more human-friendly syntax</li>
						<li>YAML has many additional features that JSON does not support</li>
					</ul>
					<li>OpenAPI is defined in JSON and allows JSON and YAML representations</li>
				</ul>
			</slide>
			<slide id="openapi-info-json">
				<title>OpenAPI Info Object (JSON)</title>
				<listing src="openapi-info.json" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="openapi-info-yaml">
				<title>OpenAPI Info Object (YAML)</title>
				<listing src="openapi-info.yaml" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="minimal-openapi-example">
				<title>Minimal OpenAPI Example</title>
				<ul>
					<li>Identification of the Swagger/OpenAPI version</li>
					<li>Minimal metadata about the described API</li>
					<li>URIs that are made available by the API</li>
					<li>Operations that can be performed on these URIs</li>
					<li>Responses to expect from these operations</li>
				</ul>
			</slide>
			<slide id="swagger-weather-json">
				<title>Minimal Swagger Example (JSON)</title>
				<listing src="swagger-weather.json"/>
			</slide>
			<slide id="swagger-weather-yaml">
				<title>Minimal Swagger Example (YAML)</title>
				<listing src="swagger-weather.yaml"/>
			</slide>
			<slide id="openapi-weather-json">
				<title>Minimal OpenAPI Example (JSON)</title>
				<listing src="openapi-weather.json"/>
			</slide>
			<slide id="openapi-weather-yaml">
				<title>Minimal OpenAPI Example (YAML)</title>
				<listing src="openapi-weather.yaml"/>
			</slide>
			<slide id="openapi-query-parameter">
				<title>Paths with Query Parameters</title>
				<ul>
					<li>URIs with Query Parameters: <code>/pets?limit=42</code></li>
				</ul>
				<listing src="petstore.yaml" line="10-23"/>
			</slide>
			<slide id="openapi-path-parameter">
				<title>Paths with Path Parameters</title>
				<ul>
					<li>URIs with Path Parameters: <code>/pets/somepetname</code></li>
				</ul>
				<listing src="petstore.yaml" line="56-68"/>
			</slide>
			<slide id="openapi-editor">
				<title>OpenAPI/Swagger Editor</title>
				<img title='Web-based interactive OpenAPI/Swagger editor' href="https://editor.swagger.io/" src="swagger-editor-petstore.png" class="fullsize"/>
			</slide>
			<slide id="openapi-map">
				<title>OpenAPI: The Complete Picture</title>
				<img title='OpenAPI Map by Arnau Lauret' href="http://openapi-map.apihandyman.io/?version=3.0" src="openapi-map.png" class="fullsize"/>
			</slide>
			<slide id="openapi-summary">
				<title>Describing URI Style APIs</title>
				<ul>
					<li>OpenAPI describes APIs by listing all resource paths</li>
					<li>OpenAPI is often used to generate server/client code</li>
					<li>OpenAPI creates a static and tightly coupled API landscape</li>
					<li>Evolving OpenAPI APIs is not a core part of OpenAPI's mission</li>
				</ul>
			</slide>
		</part>
		<part id="openapi-conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volkswagen-2018"><code>dret.net/lectures/volkswagen-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volkswagen-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="programs">
		<title>API Programs</title>
		<part id="kpi">
			<title>Key Performance Indicators (KPI)</title>
			<slide id="kpi-overview">
				<title>KPI Overview</title>
				<ul>
					<li>Providing <em>measurable</em> indicators for performance of organizations or activities</li>
					<li>KPIs in most cases are designed to follow the <a href="https://en.wikipedia.org/wiki/SMART_criteria">SMART criteria</a></li>
					<ul>
						<li><em>Specific</em>: Target a specific area for improvement</li>
						<li><em>Measurable</em>: Quantify or at least suggest an indicator of progress</li>
						<li><em>Assignable</em>: Specify who will do it</li>
						<li><em>Realistic</em>: State what results can realistically be achieved, given available resources</li>
						<li><em>Time-related</em>: Specify when the result(s) can be achieved</li>
					</ul>
					<li>Like any other measurement KPIs are always influenced by <link href="kpi-goodharts-law"/></li>
				</ul>
			</slide>
			<slide id="kpi-goodharts-law">
				<title>Goodhart's Law</title>
				<blockquote><q>When a measure becomes a target, it ceases to be a good measure.</q> (<a href="https://en.wikipedia.org/wiki/Charles_Goodhart">Charles Goodhart</a>)</blockquote>
			</slide>
			<slide id="kpi-team-number">
				<title>Number of API Product Teams</title>
				<ul>
					<li>Low numbers indicate lack of agility</li>
					<li>Low numbers indicate risk of building <q>distributed monolith</q></li>
					<li>High numbers indicate need of alignment and tooling</li>
				</ul>
			</slide>
			<slide id="kpi-api-number">
				<title>Number of APIs</title>
				<ul>
					<li>Interesting indicator but little indication of API value</li>
					<li>Differentiating <em>public/partner/private</em> helps to better track API focus</li>
				</ul>
			</slide>
			<slide id="kpi-api-consumers">
				<title>Number of API Consumers</title>
				<ul>
					<li>How many developers/teams use <em>private APIs</em>?</li>
					<li>How many customers use <em>partner APIs</em>?</li>
					<li>How many external users use <em>public APIs</em>?</li>
					<li>Increasing consumer numbers need more mature API management</li>
				</ul>
			</slide>
			<slide id="kpi-api-speed">
				<title>Speed to API Availability</title>
				<ul>
					<li>How long does it take to availability in production?</li>
					<li>What causes largest delay for accelerating API availability?</li>
				</ul>
			</slide>
			<slide id="kpi-api-onboarding">
				<title>API Onboarding</title>
				<ul>
					<li>How long does it take to onboard new API consumers?</li>
					<li>What causes most delay for API onboarding?</li>
				</ul>
			</slide>
			<slide id="kpi-api-traffic">
				<title>API Traffic Growth</title>
				<ul>
					<li>The amount of traffic an API is serving</li>
					<li>Should be augmented to better reflect the <em>value</em> the API is driving</li>
					<li>Reliability should improve when traffic/value are increasing</li>
					<li>Scalability is important to check for rapidly growing APIs</li>
				</ul>
			</slide>
			<slide id="kpi-api-business">
				<title>API Business Impact and Breadth</title>
				<ul>
					<li>Can help to identify possibly competing APIs/integrations</li>
					<li>API exposing more <em>business value</em> are more <em>valuable APIs</em></li>
					<li>Can help to identify candidates for becoming partner/public APIs</li>
				</ul>
			</slide>
			<slide id="kpi-api-revenue">
				<title>Revenue Driven by API</title>
				<ul>
					<li>Identify revenue that is directly driven by the API</li>
					<li>Separate explicit <em>API cost</em> and the <em>product revenue</em></li>
				</ul>
			</slide>
		</part>
		<part id="okr">
			<title>Objectives and Key Results (OKR)</title>
			<slide>
				<title>OKR Overview</title>
				<ul>
					<li>OKR are meant to capture specific goals</li>
					<li>They are created in response to observations that need action</li>
					<li>Objectives are coupled with measurable ways to reach them</li>
					<ul>
						<li><em>Objectives</em> are set for organization, department, team and personal levels</li>
						<li><em>Key Results</em> are 3-5 measurable result to satisfy the objective</li>
						<li><em>Actions</em> (optional) capture the plan to reach results and satisfy the objective</li>
					</ul>
					<li>OKR is <em>aspirational (goals)</em> whereas KPI is <em>monitoring (processes)</em></li>
				</ul>
			</slide>
			<slide id="okr-kpi">
				<title>OKR and KPI</title>
				<ul>
					<li>KPIs are meant to monitor/control ongoing activities</li>
					<li>OKRs are meant to capture specific actionable initiatives</li>
					<li>KPI/OKR can be combined for tracking and taking action</li>
					<ul>
						<li>Use KPI to track indicators that matter for your organization</li>
						<li>Use OKR to take action when a KPI is not within its acceptable bounds</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="programs-conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volkswagen-2018"><code>dret.net/lectures/volkswagen-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volkswagen-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>