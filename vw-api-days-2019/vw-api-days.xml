<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="goodapi" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="vw-api-days.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<title>VW API Days</title>
	<date short="2019-05-27">May 27/28, 2019</date>
	<copyright>2019 Erik Wilde</copyright>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Day</th>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td align="center"><hotspot:toc class="day"/></td>
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="intro-product">
		<title short="Product Day Introduction">Product Day Introduction: Why? What? How?</title>
		<toc class="day">Product Day</toc>
		<toc class="resources"><a href="https://www.goodapi.co/">Good API</a>&#160;· <a href="http://shop.oreilly.com/product/0636920201755.do" title="Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen, 'Continuous API Management: Making the Right Decisions in an Evolving Landscape', O'Reilly Media, December 2018">CAM Book</a>&#160;· <a href="http://shop.oreilly.com/product/0636920050308.do" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dretwitter">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Part of <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> 2016-2019 focusing on API Design and Management</li>
					<li>Joined <a href="https://www.goodapi.co/">Good API</a> in 2019 focusing on API Strategy and Guidance for Digital Transformation</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, and <a href="http://www.linkedin.com/in/netdret">LinkedIn</a></li>
				</ul>
			</slide>
			<slide id="good-api">
				<title><a href="http://www.goodapi.co/">Good API</a></title>
				<img src="good-api-black.png" href="http://www.goodapi.co/" title="Good API" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>International team based in Prague and Zurich</li>
					<ul>
						<li>Adam Kliment: <a href="http://twitter.com/ntmlk" class="twitter-follow-button" title="Adam Kliment on Twitter: @ntmlk"><code>@ntmlk</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Zdenek <q>Z</q> Nemec: <a href="http://twitter.com/zdne" class="twitter-follow-button" title="Z on Twitter: @zdne"><code>@zdne</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Working on <em>Digital Transformation</em> and <em>API Strategy and Programs</em></li>
					<ul>
						<li>Planning and coaching digital transformation initiatives</li>
						<li>Formulating API strategies for building a solid foundation</li>
						<li>Executing API programs to turn API strategies into API landscapes</li>
					</ul>
				</ul>
			</slide>
			<slide id="cam-book">
				<title>Continuous API Management (2018)</title>
				<img src="CAM-cover-2048px.jpg" href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559" title="Continuous API Management: Making the Right Decisions in an Evolving Landscape" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/continuous-api-management">Continuous API Management: Making the Right Decisions in an Evolving Landscape</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920201755.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen</li>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture (2016)</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/microservice-architecture-aligning-principles-practices-culture">Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920050308.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Microservice-Architecture-Aligning-Principles-Practices/dp/1491956259">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
				</ul>
			</slide>
		</part>
		<part id="schedule">
			<title>Schedule</title>
			<slide id="product-schedule">
				<title>Product Day</title>
				<ul>
					<li>13.15-14.30: Block I</li>
					<ul>
						<li>13.15-13.45: <link href="intro-product"/></li>
						<li>13.45-14.30: <link href="product-journey"/></li>
					</ul>
					<li>15.00-16.15: Block II</li>
					<ul>
						<li>15.00-15.45: <a href="lifecycle.pdf">API Lifecycle Management</a></li>
						<li>15.45-16.15: Discussion</li>
					</ul>
				</ul>
			</slide>
			<slide id="tech-schedule">
				<title>Tech Day</title>
				<ul>
					<li>13.15-14.30: Block I</li>
					<ul>
						<li>13.15-13.45: <link href="intro-tech"/></li>
						<li>13.45-14.30: <link href="change-management"/></li>
					</ul>
					<li>15.00-16.15: Block II</li>
					<ul>
						<li>15.00-15.45: <a href="testing.pdf">API Testing</a></li>
						<li>15.45-16.15: Discussion</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/vw-api-days-2019"><code>dret.net/lectures/vw-api-days-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="product-journey">
		<toc class="day">Product Day</toc>
		<title short="Product Journey">Product Journey: From User Story to API</title>
		<toc class="resources"><a href="https://medium.com/capital-one-tech/the-role-of-product-management-in-api-design-988f295b989" title='Matthew Reinbold, "The Role of Product Management in API Design", April 3, 2018'>Product Management in API Design</a>&#160;· <a href="https://medium.com/capital-one-tech/api-product-ownership-is-key-for-api-adoption-6a12c64b2c83" title='James Higginbotham, "API Product Ownership is Key for API Adoption", February 19, 2018'>API Product Ownership</a></toc>
		<part id="user-journey">
			<title>User Journeys</title>
			<slide id="ux-focus">
				<title>Focusing on the User (UX)</title>
				<ul>
					<li>4-12 steps of user interactions with a product</li>
					<ul>
						<li>Based on personas that capture goals, motivations, and pains</li>
						<li>Often based on assumptions of interactions with tangible products</li>
					</ul>
					<li>For API focus remove any assumptions on specific UI</li>
					<ul>
						<li>If UI products are the target details can be filled in later</li>
						<li>If API products are the target there is no need for UI/UX details</li>
					</ul>
				</ul>
			</slide>
			<slide id="dx-focus">
				<title>Focusing on the Developer (DX)</title>
				<ul>
					<li>Removing all assumptions about the UI</li>
					<ul>
						<li>Interactions are simply about information exchanges</li>
						<li>Interactions can follow various patterns of information exchange</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/vw-api-days-2019"><code>dret.net/lectures/vw-api-days-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="lifecycle.pdf">
		<toc class="day">Product Day</toc>
		<title short="Lifecycle">API Lifecycle Management</title>
		<toc class="resources"></toc>
	</presentation>
	<presentation id="intro-tech">
		<title short="Tech Day Introduction">Tech Day Introduction: Why? What? How?</title>
		<toc class="day">Tech Day</toc>
		<toc class="resources"><a href="https://www.goodapi.co/">Good API</a>&#160;· <a href="http://shop.oreilly.com/product/0636920201755.do" title="Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen, 'Continuous API Management: Making the Right Decisions in an Evolving Landscape', O'Reilly Media, December 2018">CAM Book</a>&#160;· <a href="http://shop.oreilly.com/product/0636920050308.do" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dretwitter">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Part of <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> 2016-2019 focusing on API Design and Management</li>
					<li>Joined <a href="https://www.goodapi.co/">Good API</a> in 2019 focusing on API Strategy and Guidance for Digital Transformation</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, and <a href="http://www.linkedin.com/in/netdret">LinkedIn</a></li>
				</ul>
			</slide>
			<slide id="good-api">
				<title><a href="http://www.goodapi.co/">Good API</a></title>
				<img src="good-api-black.png" href="http://www.goodapi.co/" title="Good API" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>International team based in Prague and Zurich</li>
					<ul>
						<li>Adam Kliment: <a href="http://twitter.com/ntmlk" class="twitter-follow-button" title="Adam Kliment on Twitter: @ntmlk"><code>@ntmlk</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Zdenek <q>Z</q> Nemec: <a href="http://twitter.com/zdne" class="twitter-follow-button" title="Z on Twitter: @zdne"><code>@zdne</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Working on <em>Digital Transformation</em> and <em>API Strategy and Programs</em></li>
					<ul>
						<li>Planning and coaching digital transformation initiatives</li>
						<li>Formulating API strategies for building a solid foundation</li>
						<li>Executing API programs to turn API strategies into API landscapes</li>
					</ul>
				</ul>
			</slide>
			<slide id="cam-book">
				<title>Continuous API Management (2018)</title>
				<img src="CAM-cover-2048px.jpg" href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559" title="Continuous API Management: Making the Right Decisions in an Evolving Landscape" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/continuous-api-management">Continuous API Management: Making the Right Decisions in an Evolving Landscape</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920201755.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen</li>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture (2016)</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/microservice-architecture-aligning-principles-practices-culture">Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920050308.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Microservice-Architecture-Aligning-Principles-Practices/dp/1491956259">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
				</ul>
			</slide>
		</part>
		<part id="schedule">
			<title>Schedule</title>
			<slide id="product-schedule">
				<title>Product Day</title>
				<ul>
					<li>13.15-14.30: Block I</li>
					<ul>
						<li>13.15-13.45: <link href="intro-product"/></li>
						<li>13.45-14.30: <link href="product-journey"/></li>
					</ul>
					<li>15.00-16.15: Block II</li>
					<ul>
						<li>15.00-15.45: <a href="lifecycle.pdf">API Lifecycle Management</a></li>
						<li>15.45-16.15: Discussion</li>
					</ul>
				</ul>
			</slide>
			<slide id="tech-schedule">
				<title>Tech Day</title>
				<ul>
					<li>13.15-14.30: Block I</li>
					<ul>
						<li>13.15-13.45: <link href="intro-tech"/></li>
						<li>13.45-14.30: <link href="change-management"/></li>
					</ul>
					<li>15.00-16.15: Block II</li>
					<ul>
						<li>15.00-15.45: <a href="testing.pdf">API Testing</a></li>
						<li>15.45-16.15: Discussion</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/vw-api-days-2019"><code>dret.net/lectures/vw-api-days-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="change-management">
		<toc class="day">Tech Day</toc>
		<title short="Change Management">API Change Management and Versioning</title>
		<toc class="resources"><a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a></toc>
		<part id="change-management-introduction">
			<title>Introduction</title>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="versioning-software">
				<title>Versioning in Software Engineering</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>Numbers are used to keep track of <em>any changes</em> in a software product</li>
						<li>Major numbers often are used to signal major functional upgrades</li>
					</ul>
					<li>APIs are about encapsulating implementation details</li>
					<ul>
						<li>API versioning only matters <em>when the API changes</em></li>
						<li>API versioning should <em>hide implementation changes</em></li>
					</ul>
					<li>Separating API and implementation is a good idea</li>
					<ul>
						<li>The <em>API version</em> is the version <em>of the implemented API</em></li>
						<li>The <em>software version</em> is the version <em>of the contract implementation</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have a documented plan for API evolution</li>
						<li>The simplest possible plan may be to never change the API</li>
					</ul>
					<li>Extensibility should be made easy for API consumers</li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="compatibility">
				<title>Compatibility</title>
				<ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility:</em> Ability to interact with older components</li>
						<li><em>Forward compatibility:</em> Ability to interact with newer components</li>
					</ul>
					<li>The Web supports both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility:</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
					<li>API compatibility depends on API scenarios</li>
					<ul>
						<li>Who controls API providers and API consumers?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li>Extension points make it clear where to expect extensions</li>
						<li>Processing models make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="extensibility-examples">
			<title>Extensibility Examples</title>
			<slide id="extensibility-content">
				<title>Extensibility of Content</title>
				<ul>
					<li>Extending content can be done by <em>additive</em> changes to the content</li>
					<ul>
						<li><em>Adding properties</em> to the existing content model</li>
						<li><em>Limiting properties</em> to a more constraining appearance/value model</li>
					</ul>
					<li>Extension can never change the semantics of existing content</li>
					<ul>
						<li><em>Ignoring</em> extensions always must be a safe thing to do</li>
						<li><em>Dependencies across extensions</em> should be avoided if possible</li>
					</ul>
					<li>Specifying <em>extension points</em> depends on the representation format</li>
				</ul>
			</slide>
			<slide id="extensible-content-xml">
				<title>XML Content Extension</title>
				<listing src="address.xml"/>
				<listing src="address-extended.xml"/>
			</slide>
			<slide id="extensible-content-xsd">
				<title>XML Content Extension: XSD Schema</title>
				<listing src="address.xsd"/>
			</slide>
			<slide id="extensible-content-json">
				<title>JSON Content Extension</title>
				<listing src="address.json"/>
				<listing src="address-extended.json"/>
			</slide>
			<slide id="extensibility-control">
				<title>Extensibility of Controls</title>
				<ul>
					<li>Controls expose new paths of the workflow available to clients</li>
					<ul>
						<li>New paths should not have any impact on existing paths</li>
						<li>Existing clients should ignore those paths</li>
					</ul>
					<li>Hypermedia formats should be based on controls being an open set</li>
					<ul>
						<li>Specifics on how to add and handle extensions depend on the format</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal-extension">
				<title>Extending Controls in HAL</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="30-37"/>
				<listing src="hal-extended.json"/>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers use <code>MAJOR.MINOR.PATCH</code> syntax and have well-defined semantics</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for incompatible API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
					</ul>
					<li>Mostly about how to name implementation artifacts but also applicable to APIs</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
					</ul>
				</ul>
			</slide>
			<slide id="implementation-api-version">
				<title>Implementation vs. API Version</title>
				<ul>
					<li><em>Implementation versions</em> may be internal information only</li>
					<ul>
						<li>Implementation details do not have to show up in the API</li>
						<li>For internal/trusted/open cases implementation and API may be the same version</li>
					</ul>
					<li><em>API versions</em> are about changes that may affect consumers</li>
					<ul>
						<li><code>PATCH</code> does not change API design or behavior apart from improving quality</li>
						<li><code>MINOR</code> changes API behavior in a safe way</li>
						<li><code>MAJOR</code> changes API behavior in ways that require client changes</li>
					</ul>
					<li><code>PATCH</code>/<code>MINOR</code> may make sense to expose inside the API</li>
					<li><code>MAJOR</code> means that there is a <em>different API</em> for the <em>same service</em></li>
				</ul>
			</slide>
			<slide id="version-identification">
				<title>Identifying API Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions at the API level</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to use in the general Web fabric</li>
						<li>Media types often are not properly supported by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used <em>anywhere</em> in the URI path</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="plan-for-evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Separate API version and implementation version</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/vw-api-days-2019"><code>dret.net/lectures/vw-api-days-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="testing.pdf">
		<toc class="day">Tech Day</toc>
		<title short="Testing">API Testing</title>
		<toc class="resources"></toc>
	</presentation>
</hotspot>