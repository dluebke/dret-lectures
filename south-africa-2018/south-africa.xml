<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="south-africa.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy South Africa 2018</title>
	<date short="2018-03">March, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span>:</b> <span class="description"><hotspot:toc class="abstract"/></span></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="digital-transformation">
		<title>APIs and Microservices in Digital Transformation</title>
		<toc class="abstract">Digital Transformation is the main driver behind the trends of APIs and Microservices. Digital Transformation is the motivation and should provide the business foundation of API and Microservices initiatives and activities. This presentation takes a structured look at the "why", "what", and "how" in that space. One important goal is to prevent a "cargo cult" effect around APIs and Microservices.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="why">
			<title>Why? Digital Transformation!</title>
			<slide>
				<title>Why Change IT?</title>
				<ul>
					<li>More changes, more opportunities, more threats → <link href="why-digital-transformation">Digital Transformation</link></li>
					<li>Modular designs are easier to change → <link href="why-apis">APIs</link></li>
					<li>Modular implementations are faster to change → <link href="why-microservices">Microservices</link></li>
				</ul>
			</slide>
			<part id="why-digital-transformation">
				<title>Why Digital Transformation?</title>
				<slide id="it-today">
					<title>From Cost Center to Enabler</title>
					<ul>
						<li>IT used to be mostly a cost center (electrified bookkeeping)</li>
						<ul>
							<li>Best case scenario: IT never gets in the way and just works</li>
							<li>Worst case scenario: IT is expensive, and extremely hard to change</li>
						</ul>
						<li>IT has become a competitive advantage (out-innovating competitors)</li>
						<ul>
							<li>Best case scenario: IT enables fast, cheap, and constant innovation</li>
							<li>Worst case scenario: IT changes do not result in improved competitiveness</li>
						</ul>
					</ul>
				</slide>
				<slide id="nomonolith-1">
					<title>Motivation #1: Breaking up the Monolith</title>
					<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="participation-innovation-1">
					<title>Motivation #2: Market Participation and Innovation</title>
					<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="api-product">
					<title>API as a Product</title>
					<ul>
						<li>Financing API programs can be a challenge</li>
						<ul>
							<li><em>API products</em> can help to generate or drive revenue</li>
							<li><em>API readiness</em> is a strategic investment in organization fitness</li>
						</ul>
						<li>API products can be used as internal or external building blocks</li>
						<ul>
							<li>Start exposing internal APIs as they are needed for building products</li>
							<li><q>Product thinking</q> helps with autonomy and velocity</li>
						</ul>
						<li>Build for change and growth and evolution</li>
					</ul>
				</slide>
				<slide id="api-landscape">
					<title>API Landscape</title>
					<img title="API Landscape" href="http://theapilandscape.pagedemo.co/" src="api-landscape-v2-march-2017.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
			</part>
			<part id="why-apis">
				<title>Why APIs?</title>
				<slide id="api-cargo-cult">
					<title>The Wonders of APIs</title>
					<img title="API Cargo Cult" src="apis-make-things-happen.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="internal-external">
					<title>Two Perspectives of API Scope/Focus</title>
					<ul>
						<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
						<ul>
							<li>Focus on <em>systems/software engineering</em> and better modularization</li>
							<li><q>Turn a system into an ecosystem.</q></li>
						</ul>
						<li><em>External:</em> Using APIs to build up ecosystems</li>
						<ul>
							<li>Focus on <em>decentralized systems</em> and better connectivity</li>
							<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
						</ul>
						<li>Both views are complementary and mostly a difference in perspective</li>
						<ul>
							<li>The <em>internal perspective</em> tends to gravitate towards <q>building a system</q></li>
							<li>The <em>external perspective</em> tends to ignore the complexities of decentralization</li>
						</ul>
					</ul>
				</slide>
				<slide id="business-model">
					<title>APIs Serve a Purpose</title>
					<blockquote><q>Do not try to find the right business model for your APIs; instead, try to find the right APIs for your business model.</q></blockquote>
					<p class="quotenote"><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a>: <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></p>
				</slide>
			</part>
			<part id="why-microservices">
				<title>Why Microservices?</title>
				<slide id="web-works">
					<title>The Web Works</title>
					<ul>
						<li>MSA is about service autonomy in service-oriented landscapes</li>
						<ul>
							<li><em>Developer autonomy</em> is the freedom to choose the best tools for the job</li>
							<li><em>Operations autonomy</em> means that every service is operated standalone</li>
						</ul>
						<li>MSA is also about effectiveness in autonomy-focused service-oriented landscapes</li>
						<ul>
							<li><em>Rapid provisioning</em> means that getting started is an easy task</li>
							<li><em>Basic monitoring</em> establishes visibility into service operations</li>
							<li><em>Rapid deployment</em> increases the velocity of service landscape evolution</li>
						</ul>
					</ul>
				</slide>
				<slide id="web-industrialized">
					<title>The Web, Industrialized</title>
					<ul>
						<li>MSA applies Web Architecture's <em href="http://dret.net/netdret/publications#pau09a">loose coupling</em> to the API space</li>
						<ul>
							<li>Build services with no hidden dependencies</li>
							<li>Choose the best tool for the job</li>
							<li>Decouple service provisioning from delivery architecture</li>
							<li>Monitor service state and usage</li>
							<li>React quickly when customers or market demand change</li>
							<li>Experiment ruthlessly and keep experimentation cost low</li>
						</ul>
						<li>MSA is all about being webby while minimizing the cost</li>
					</ul>
				</slide>
				<slide id="microservices-cargo-cult">
					<title>Microservices Cargo Cult</title>
					<img title="Microservices Cargo Cult" src="microservices-cargo-cult.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="what-how">
					<title>Separating the <q>What</q> from the <q>How</q></title>
					<ul>
						<li><em>Why</em> do organizations use MSA and <em>what</em> are their goals?</li>
						<li>Microservices are a <em>pattern</em> for achieving API agility/velocity</li>
						<ul>
							<li><em>Loosely coupled services</em> to allow services to evolve independently</li>
							<li><em>DevOps</em> to allow services to emerge/evolve faster</li>
							<li><em>Infrastructure augmentation</em> for management and visibility of services</li>
						</ul>
						<li>Focus on the <q>what</q> instead of simply choosing a <q>how</q></li>
						<ul>
							<li>Many MSA advantages can be realized in non-MSA architectures</li>
							<li>More architectural discipline may be required to realize long-term gains</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="platforms">
			<title>What? Platforms!</title>
			<slide id="platform-dilemma">
				<title>The Platform Dilemma</title>
				<ul>
					<li>Platforms provide <em>support</em> but also create <em>constraints</em></li>
					<ul>
						<li><em>Support</em> in the form of a foundation and shared services/infrastructure</li>
						<li><em>Constraints</em> in the form of removing certain design options</li>
					</ul>
					<li>Balancing support and constraints is not always done explicitly</li>
					<ul>
						<li><em>Adding features</em> is more immediately visible than <em>removing options</em></li>
						<li><em>Unavailable design options</em> may constrain the design space dramatically</li>
					</ul>
					<li><em>Microservices</em> for the first time in enterprise IT take a step <q>back</q></li>
					<ul>
						<li><em>Remove constraints</em> to foster innovation and give teams more solution options</li>
						<li><em>Add support</em> mostly in an attempt to make the platform economically viable</li>
					</ul>
				</ul>
			</slide>
			<slide id="esb-platform">
				<title>Shared Runtime for Services: ESB</title>
				<ul>
					<li>Platforms often are conceived as <em>being actual infrastructure</em></li>
					<ul>
						<li><em>Centralized components</em> that provide capabilities and host services</li>
						<li>They become convenient components where every infrastructure problem is solved</li>
					</ul>
					<li>Is the <em>ESB platform pattern</em> an inescapable vicious cycle?</li>
					<ul>
						<li>What if <em>every capability had to be an API-driven service itself?</em></li>
						<li>What if the platform would focus on <em>defining/providing APIs?</em></li>
						<li>What if the platform is a set of shared ideas instead of shared artifacts?</li>
					</ul>
				</ul>
			</slide>
			<slide id="web-platform">
				<title>Principles/Protocols/Practices (P<sup>3</sup>): The Web Platform</title>
				<ul>
					<li>A set of shared <em>principles</em>, <em>protocols</em>, and <em>practices</em></li>
					<ul>
						<li><em>Principles</em> govern the general architectural style (REST)</li>
						<li><em>Protocols</em> define the way in which components interact</li>
						<li><em>Practices</em> are design patterns for when/how to use certain protocols</li>
					</ul>
					<li>The Web is and always has been about microservices</li>
					<ul>
						<li><em>Encapsulation</em> and strict API-only interactions</li>
						<li><em>Services</em> can start/evolve/succeed/fail/disappear entirely on their own</li>
						<li><em>Discovery</em> is just another service</li>
						<li><em>Description</em> is part of a service itself</li>
					</ul>
					<li><em>Shared nothing</em> architecture with no single point of contention</li>
				</ul>
			</slide>
			<slide id="platform-monolith">
				<title>ESB Platforms are <q>Monoliths by Design</q></title>
				<ul>
					<li>Designed to provide shared tooling</li>
					<li>Tooling becomes the backdoor for <q>coupling creep</q></li>
					<li>Resist the urge to provide an <q>API platform</q></li>
					<li>Ignoring one of the two major API value propositions</li>
					<ul>
						<li>APIs are valuable because they decouple service users and providers</li>
						<li>APIs are valuable because they decouple service implementations</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralized">
				<title>Landscapes are <q>Decentralized by Design</q></title>
				<ul>
					<li>Designed to use shared languages</li>
					<li>Communications/coupling can only happen through APIs</li>
					<li>Anything that needs to be shared must be openly communicated</li>
					<li>Satisfying the two major API value propositions</li>
					<ul>
						<li>APIs are valuable because they decouple service users and providers</li>
						<li>APIs are valuable because they decouple service implementations</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="how">
			<title>How? MSA!</title>
			<slide id="ms-and-the-web">
				<title>Microservices and the Web</title>
				<ul>
					<li>MSA replicates the most important success factors of the Web</li>
					<ul>
						<li>Encapsulation of code, allowing polyglot implementations</li>
						<li>Encapsulation of persistence, allowing polyglot storage</li>
						<li>Encapsulation of models, making the API the only available model</li>
					</ul>
					<li>The <em>only</em> service dependency is through APIs</li>
					<ul>
						<li>Works (mostly) well on the Web because of the uniform interface and HTML</li>
						<li>Works (mostly) well on the service Web for <q>well-designed</q> APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="amazon-rules">
				<title><a href="https://gist.github.com/chitchcock/1281611">Jeff Bezos' Services Rant</a>: The Rules</title>
				<ul>
					<li>Famous small set of SOA design rules</li>
					<ul>
						<li>Teams must expose functionality through services</li>
						<li>Communication happens only through service interfaces</li>
						<li>There are no hard guidelines for service design</li>
						<li>Internal/external service is a matter of policy, not one of design</li>
					</ul>
					<li>Going against the <q>let's pick a platform</q> spirit of old-school SOA</li>
				</ul>
			</slide>
			<slide id="amazon-consequences">
				<title>Jeff Bezos' Services Rant: <a href="https://plus.google.com/+RipRowan/posts/eVeouesvaVX">The Consequences</a></title>
				<ul>
					<li>With more freedom comes more responsibility</li>
					<ul>
						<li>Monitoring and metrics are necessary for finding root causes</li>
						<li>All APIs must be hardened against DoS attacks</li>
						<li>Automated QA is necessary to really understand service health</li>
						<li>Services must be documented and registered so that they can be discovered</li>
						<li>Debugging becomes harder because of service dependencies</li>
					</ul>
					<li>Sophisticated tooling required to manage the new SOA landscape</li>
					<li>Much easier in today's technology landscape than 15 years ago</li>
				</ul>
			</slide>
			<slide id="never-stop-evolving">
				<title>Never Stop Evolving</title>
				<ul>
					<li>MSA is a style that should survive technologies</li>
					<li><q><a href="https://www.youtube.com/watch?v=Wh4PpY0J9ZI" title="API360 Microservices Summit – Microservices Blind Spots – Irakli Nadareishvili, ReferWell">Containerization will drive MSA adoption</a></q></li>
					<ul>
						<li>A fully containerized service landscape needs MSA to function</li>
						<li>Polyglot containers mean that language does not matter</li>
						<li>Data encapsulation means isolated/opaque data management</li>
					</ul>
					<li>As persistence/languages/containers evolve, APIs remain the stable factor</li>
					<ul>
						<li>The external perspective of <em>MSA management</em> is <em>API management</em></li>
						<li>The tools/languages/platforms for MSA service implementation may/will evolve over time</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="transformation-process">
				<title>Transformation is a Process</title>
				<ul>
					<li>Always keep in mind <em>why</em> you are transforming</li>
					<li>Pick <em>what</em> to transform based on current/strategic needs</li>
					<li>Learn <em>how</em> to transform based on experience and feedback</li>
					<li><em>Never stop evolving!</em></li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/south-africa-2018"><code>dret.net/lectures/south-africa-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/south-africa-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="management">
		<title>Managing API and Microservices Landscapes</title>
		<toc class="abstract">When embarking on a journey of digital transformation, APIs and Microservices become essential components, and they do so at a scale and velocity. As the modern software factory allows organizations to create, combine, and recombine new services, they also need to manage the production itself, as well as landscape of services they are producing. This presentation provides an overview of the important <em>Six Vs</em> of Microservice architecture landscapes: variety, volume, velocity, visibility, vulnerability, and volatility.</toc>
		<toc class="resources"><a href="http://apistylebook.com/">API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="msa-why">
			<title>Why Microservices?</title>
			<slide id="nomonolith-2">
				<title>Motivation #1: Breaking up the Monolith</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="participation-innovation-2">
				<title>Motivation #2: Market Participation and Innovation</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-apis">
				<title>Microservices and APIs</title>
				<ul>
					<li>APIs are a way to <em>loosely coupled component interfaces</em></li>
					<ul>
						<li>APIs allow removing dependencies between components</li>
						<li>Loose coupling is influenced by a variety of design factors</li>
					</ul>
					<li>Microservices are a way to <em>loosely coupled component implementations</em></li>
					<ul>
						<li>Microservices allow implementing services with fewer constraints</li>
						<li>APIs can be <em>anything</em> but some landscape coherence makes sense</li>
					</ul>
					<li><em>Microservice Architecture</em> means trying to optimize the balance</li>
					<ul>
						<li><em>Avoid slowing down teams</em> because of constrained design options</li>
						<li><em>Help teams to be faster</em> by assisting their design/implementation efforts</li>
					</ul>
				</ul>
			</slide>
			<slide id="apis-interfaces">
				<title>There is no "Microservice APIs"</title>
				<img title='There is no "Microservice API"' src="mugatu-microservices-api.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="msa-six-v">
			<title>The Six V's of Microservice Architecture</title>
			<slide id="msa-6v">
				<title>MSA 6V Executive Summary</title>
				<ul>
					<li><em>Variety:</em> More design freedom for teams</li>
					<li><em>Volume:</em> Make experimentation economical</li>
					<li><em>Velocity:</em> No more slow coordinated release schedule</li>
					<li><em>Visibility:</em> Teams work decentralized</li>
					<li><em>Vulnerability:</em> More openness means a bigger attack surface</li>
					<li><em>Volatility:</em> Manage dependencies with decentralization in mind</li>
				</ul>
			</slide>
			<slide id="variety">
				<title>Variety</title>
				<ul>
					<li>Increased <em>diversity</em> of the API and implementation landscape</li>
					<li>Manage API descriptions in extensible ways</li>
					<ul>
						<li>Your API ecosystem will evolve and new types will appear</li>
					</ul>
					<li>Provide <em>guidance</em> and <em>assistance</em> for preferred API styles/types</li>
					<ul>
						<li>Guidance should be driven by observed team preferences</li>
						<li>API ecosystems tend to converge around few technology clusters</li>
					</ul>
				</ul>
			</slide>
			<slide id="volume">
				<title>Volume</title>
				<ul>
					<li><em>More services</em> are created because there is less ceremony</li>
					<li>Make API management part of general MSA automation efforts</li>
					<ul>
						<li><em>API landscaping</em> should focus on scalable methods</li>
					</ul>
					<li><em>API landscape automation</em> must be able to adapt</li>
					<ul>
						<li>Build as little bias as possible into the foundation</li>
					</ul>
				</ul>
			</slide>
			<slide id="velocity">
				<title>Velocity</title>
				<ul>
					<li>Services <em>change more often</em> (if required) because of agile practices</li>
					<li><em>Loose coupling</em> should be one of the pillars of API design culture</li>
					<ul>
						<li>Design practices for loose coupling depend a lot on style and technology</li>
					</ul>
					<li>Expose version information as a way how service evolution can be tracked</li>
					<ul>
						<li>Versioning should be <em>informational</em> only (no breaking changes)</li>
						<li><a href="http://semver.org/">Semantic versioning</a> can be exposed through the API</li>
					</ul>
				</ul>
			</slide>
			<slide id="visibility">
				<title>Visibility</title>
				<ul>
					<li>It should be easy to <em>find and use services</em> as building blocks for new ones</li>
					<li>Deployment needs to also deploy information <em>about the API</em></li>
					<ul>
						<li><a href="https://tools.ietf.org/html/draft-wilde-service-link-rel-01">Simple description/documentation models</a> as a starting point</li>
						<li>Alternative models or more sophistication as required by landscape</li>
					</ul>
					<li><em>Service discovery</em> is both about finding and binding</li>
					<ul>
						<li><em>Finding</em> is based on searching for services by capability/feature</li>
						<li><em>Binding</em> is the ability to locate a running instance of a service</li>
					</ul>
				</ul>
			</slide>
			<slide id="vulnerability">
				<title>Vulnerability</title>
				<ul>
					<li>Support <em>service security</em> so that teams can focus on value creation</li>
					<li>APIs add to an organization's attack surface</li>
					<ul>
						<li>Any connection to an outside party is a potential attack point</li>
					</ul>
					<li>Microservices makes it harder to properly design and implement security</li>
					<ul>
						<li>Teams should not have to bother with implementing security</li>
					</ul>
					<li>Security is the classical use case of <q>API gateways</q></li>
					<li><q>Security as a Service</q> can be provided in different configurations</li>
					<ul>
						<li><em>Centralized:</em> Service logic is split between service and gateway</li>
						<li><em>Distributed:</em> Configuration is centralized while enforcement is distributed</li>
						<li><em>Decentralized:</em> Services own both configuration and enforcement</li>
					</ul>
				</ul>
			</slide>
			<slide id="volatility">
				<title>Volatility</title>
				<ul>
					<li><em>Service decentralization</em> needs different dependency management models</li>
					<li>Less operational coherence because of DevOps and differing service levels</li>
					<li><em>Resilient services</em> are necessary to avoid rolling failures</li>
					<li><em>Root cause analysis</em> needs tracking through all involved services</li>
					<ul>
						<li>This must work at landscape level and thus needs service cooperation</li>
					</ul>
					<li>Change management and decommissioning are part of API landscape management</li>
					<ul>
						<li><em>Change management</em> may be informational only (for non-breaking changes)</li>
						<li><em>Decommissioning</em> allows services to announce their retirement</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="continuous-architecting">
			<title>How? Continuous Architecting!</title>
			<slide id="api-api">
				<title>API your APIs</title>
				<ul>
					<li>Expose design-time and runtime API information in the API</li>
					<ul>
						<li><em>Design-time</em> allows automation of API landscape overview</li>
						<li><em>Runtime</em> allows automation of API landscape status</li>
					</ul>
					<li>Follow <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust extensibility principles</a> for these <q>API APIs</q></li>
					<ul>
						<li><em>Meaningful Core:</em> Start with a simple but useful scenario</li>
						<li><em>Extension Points:</em> Think about how scenarios might evolve</li>
						<li><em>Processing Model:</em> Be clear about how extensions are handled</li>
					</ul>
				</ul>
			</slide>
			<slide id="webby-amazon">
				<title>Webby API Design</title>
				<img title="Webby Amazon" src="webby-amazon.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-patterns">
				<title>Emerging API Patterns</title>
				<ul>
					<li>Self-description for APIs is increasing</li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7807">Problem details</a> as a way how APIs expose error information</li>
					<ul>
						<li>Enables generic error handling but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/nottingham-json-home">Home documents</a> as a way how APIs provide starting pages</li>
					<ul>
						<li>Enables harvesting of API start points but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/inadarei-api-health-check">Healthcheck reports</a> as a way how APIs expose status information</li>
					<ul>
						<li>Enables landscape-level status reports but also allows additional information</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-languages">
			<title>APIs are Languages</title>
			<slide id="what-is-an-api">
				<title>What is an API?</title>
				<ul>
					<li>An API is a <em>product</em></li>
					<ul>
						<li>APIs are created and designed and developed</li>
						<li>APIs have typical product lifecycles</li>
					</ul>
					<li>An API provides <em>access to a capability</em></li>
					<ul>
						<li>The API is not the interesting thing</li>
						<li>The value is in the functionality of the API</li>
					</ul>
					<li>An API is a <em>language</em></li>
					<ul>
						<li>API users utilize API functionality by accessing the API</li>
						<li>Using APIs is a conversation between service providers and consumers</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-design">
				<title>API Design</title>
				<ul>
					<li>APIs need to be designed just like any other product</li>
					<ul>
						<li>Design starts with an architectural style and associated patterns</li>
						<li>The style sets the framework but leaves a lot of freedom</li>
						<li>Some design elements can be reused from existing APIs</li>
						<li>Some design elements have to be created for the new API</li>
					</ul>
					<li>Design works best when it reuses familiar interface concepts</li>
					<ul>
						<li>For UI design this allows end users to make educated guesses for better UX</li>
						<li>For API design the same concept of <em>familiarity</em> is helpful for DX</li>
					</ul>
				</ul>
			</slide>
			<slide id="car-interior">
				<title>Interface Design</title>
				<img src="audi-rs6-plus-interior.jpg" title="Audi RS6 Plus Interior" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="continuous-architecture">
				<title>Continuous Architecture</title>
				<img src="model-t.jpg" title="Model T Speedster" href="https://commons.wikimedia.org/wiki/File:1913_Ford_Model_T_Speedster_dashboard.JPG" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="languages-landscapes">
			<title>Languages and Landscapes</title>
			<slide id="dark-age">
				<title>SOAP: The Dark Age</title>
				<ul>
					<li>API design was practiced relatively little</li>
					<ul>
						<li>Developers exposed implementation internals as <em>Web services</em></li>
						<li>Many APIs were exposed from a shared monolithic codebase</li>
					</ul>
					<li>SOAPy SOA promised webby nirvana without delivering</li>
					<ul>
						<li>The main failure was the lack of focus on <em>loosely coupled implementation</em></li>
						<li>Evolution needs <em>ecosystems</em> where individuals can flourish or wane</li>
					</ul>
				</ul>
			</slide>
			<slide id="enlightenment">
				<title>Microservices: Enlightenment</title>
				<ul>
					<li>The first time enterprise IT <q>gets the Web</q></li>
					<ul>
						<li>Decouple implementations for speed and agility at scale</li>
						<li>Embrace diversity so that teams can focus on solving problems</li>
					</ul>
					<li>What do microservices mean for scale and longevity?</li>
					<ul>
						<li>Design decisions need context for the best possible products</li>
						<li><q>Designing into the void</q> never is the best strategy</li>
					</ul>
				</ul>
			</slide>
			<slide id="design-guidelines">
				<title>The Middle Ground: Guide and Help</title>
				<ul>
					<li>Create <a href="http://apistylebook.com/design/guidelines/" title="API Stylebook: Design Guidelines">Design Guidelines</a> that teams can use</li>
					<ul>
						<li>Ideally based on existing practice</li>
						<li>Ideally continuously changed based on the evolving landscape</li>
					</ul>
					<li>Writing as a form of communication</li>
					<ul>
						<li>Writing guidelines forces teams to talk about design practices</li>
						<li>Reading guidelines allows teams to understand the current practice</li>
					</ul>
				</ul>
			</slide>
			<slide id="design-culture">
				<title>Language and Design and Culture</title>
				<ul>
					<li>Culture <em>emerges</em> as a set of shared principles and patterns</li>
					<ul>
						<li>Culture cannot be <em>created</em> from the top-down</li>
						<li>Culture can be <em>observed</em> and <em>nudged</em> over time</li>
					</ul>
					<li><em>Design culture</em> for APIs uses shared language building blocks</li>
					<ul>
						<li>Documenting what APIs and teams are using</li>
						<li>Helping teams in the API design efforts</li>
					</ul>
					<li>Documenting <em>API design culture</em> is a continuous process</li>
					<ul>
						<li>Feedback cycle based on practice and design guidance</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="webconcepts">
			<title>Web Concepts</title>
			<slide id="webconcepts-intro">
				<title>Concepts that matter on the Web</title>
				<ul>
					<li>Web APIs are always based on shared architectural concepts</li>
					<ul>
						<li>Some <a href="http://webconcepts.info/concepts/">concepts</a> matter for interaction at the Web level</li>
						<li>Each concept has a <em>value space</em> for sharing meaning (such as <a href="http://webconcepts.info/concepts/http-method/">HTTP request methods</a>)</li>
						<li>Specifications establishing values are created by <a href="http://webconcepts.info/specs/">organizations</a> (such as <a href="http://webconcepts.info/concepts/http-method/PATCH">HTTP <code>PATCH</code></a> via <a href="http://webconcepts.info/specs/IETF/">IETF</a>'s <a href="http://webconcepts.info/specs/IETF/RFC/">RFC</a> <a href="http://webconcepts.info/specs/IETF/RFC/5789">5789</a>)</li>
					</ul>
					<li><a href="http://webconcepts.info/">Web concepts</a> provides a <em>starter set</em> of concepts and specifications</li>
					<ul>
						<li>Currently there are <a href="http://webconcepts.info/concepts/">32 concepts with a total of 738 distinct values</a></li>
						<li>These concepts are taken from <a href="http://webconcepts.info/specs/">268 specifications from 5 organizations</a></li>
					</ul>
					<li>Web concepts is designed to be usable along two major axes</li>
					<ol>
						<li>Adding or removing concepts/values to represent the <q>organizational Web surface</q></li>
						<li>Adding API-level usage to link APIs and the concepts they use</li>
					</ol>
				</ul>
			</slide>
			<slide id="webconcepts-concepts">
				<title>Web Concepts: Concepts</title>
				<img title="Web Concepts: Concepts" href="http://webconcepts.info/concepts/" src="webconcepts-concepts.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webconcepts-specs">
				<title>Web Concepts: Specifications</title>
				<img title="Web Concepts: Specifications" href="http://webconcepts.info/specs/IETF/RFC/" src="webconcepts-specs.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webconcepts-values">
				<title>Web Concepts: Values</title>
				<img title="Web Concepts: Values" href="http://webconcepts.info/concepts/http-header/" src="webconcepts-values.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="platform-evolution">
				<title>Platforms Need Evolution</title>
				<ul>
					<li>MSA decouples implementations for improved velocity</li>
					<li>MSA needs a platform that teams can build on</li>
					<li>Build extensibility and openness into the platform</li>
					<li>MSA platforms <em>never stop evolving</em></li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/south-africa-2018"><code>dret.net/lectures/south-africa-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/south-africa-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>