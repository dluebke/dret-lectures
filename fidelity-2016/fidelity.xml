<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="fidelity.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Fidelity API Workshop, Gurugram, India</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2016-11-22">November 22/23, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Time</th>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td align="right"><hotspot:toc class="time"/></td>
						<td valign="top">
							<b><span class="summary"><hotspot:title/></span><span class="toggle">:</span></b> <span class="toggle"><span class="description"><hotspot:toc class="abstract"/></span></span>
						</td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="welcome">
		<title>Welcome, Overview, and Motivation</title>
		<toc class="time">9.00-10.00</toc>
		<toc class="abstract">APIs increasingly become the <em>connective tissue</em> of IT in general, and the main way of how business is looking at their IT strategy and structure in particular. APIs are what both <em>separate</em> and <em>connect</em> collaborating and communicating peers: They facilitate <em>loose coupling</em> of service providers and consumers and thus strike a balance between the ability to collaborate and cooperate, while still maintaining independence and individual control.</toc>
		<toc class="resources"><a href="http://www.hbs.edu/faculty/Pages/item.aspx?num=193" title="Michael Porter, 'The Competitive Advantage: Creating and Sustaining Superior Performance', Free Press, New York, 1985">Competitive Advantage</a>&#160;· <a href="https://hbr.org/1999/03/unbundling-the-corporation" title="John Hagel and Marc Singer, 'Unbundling the Corporation', Harvard Business Review, March/April 1999">Unbundling the Corporation</a>&#160;· <a href="https://www.ca.com/us/collateral/ebook/building-software-into-your-business-dna" title="Otto Berkes, 'Digitally Remastered: Building Software into Your Business DNA', John Wiley &amp; Sons, 2016">Digitally Remastered</a>&#160;· <a href="https://leanpub.com/software-architecture-for-developers" title="Simon Brown, 'Software Architecture for Developers', Leanpub, September 2016">Software Architecture</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Design and Strategy</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title>API Academy</title>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="motivation">
			<title>Motivation</title>
			<slide id="value-chains">
				<title>Value Chain</title>
				<ul>
					<li>Business is fundamentally about <em>value chains</em></li>
					<li>Value chains <em>structure business processes</em> to create overall value</li>
					<li>Connections are increasingly focusing on <em>passing information along</em></li>
					<li>Passing information requires sophisticated <em>information logistics</em></li>
					<li>Information logistics must <em>reduce friction and maximize flexibility</em></li>
					<li>Friction and flexibility are deciding factors when <em>adapting the value chain</em></li>
					<li>Adapting the value chain needs <em>API landscapes that can adapt easily</em></li>
				</ul>
			</slide>
			<slide id="systems-ecosystems">
				<title>Coupling Matters</title>
				<ul>
					<li>Traditional enterprise IT approaches heavily favor <em>integration</em></li>
					<ul>
						<li>Integration aims at building one system that contains all essential parts</li>
						<li>Integration provides optimization potential</li>
						<li>Integration promises a destination instead of a journey</li>
					</ul>
					<li>Integration cost/benefit analysis depends heavily on how much change is required</li>
					<ul>
						<li>Integrated systems tend to win as long as the future is (roughly) as predicted</li>
						<li>Integrated systems can be costly if adaptation needs necessitate big changes</li>
					</ul>
					<li><em>Ecosystems</em> trade flexibility over integration optimization</li>
					<ul>
						<li>Ecosystems tend to do worse as long as conditions remain mostly stable</li>
						<li>Ecosystems tend to outperform/outlive integrated systems in light of bigger changes</li>
					</ul>
				</ul>
			</slide>
			<slide id="integrated-bike">
				<title>Integration Cost/Benefit</title>
				<img title="Cervelo P5X Triathlon Bike" href="https://www.cervelo.com/en/triathlon/p-series/p5x" src="cervelo-p5x.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="overview">
			<title>Overview</title>
			<slide id="terminology">
				<title>What is an API?</title>
				<ul>
					<li><em>APIs</em> used to be local interfaces between code components</li>
					<li><em>Network interfaces</em> used to be called <em>protocols</em></li>
					<li><q>APIs</q> still are local interfaces between code components</li>
					<ul>
						<li>Often these are not explicitly labeled as <em>programmatic APIs</em></li>
						<li><a href="http://html5-overview.net">HTML5</a> is a current example for a modern set of programmatic APIs</li>
					</ul>
					<li><q>APIs</q> nowadays often refer to <em>network APIs</em></li>
					<ul>
						<li>They are defined in terms of specific network abstractions</li>
						<li><a href="http://www.programmableweb.com/">ProgrammableWeb</a> has a large collection of public network APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="public-api-count">
				<title>Public API Count</title>
				<img title="Public API Count by ProgrammableWeb" src="programmable-web.png" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="ppp-api">
				<title>Public/Partner/Private APIs</title>
				<ul>
					<li>APIs are exposed interfaces to functions or capabilities</li>
					<li>The scope of available functions/capabilities differs</li>
					<ul>
						<li><em>Public APIs</em> are openly available on the Web/Internet with few restrictions</li>
						<li><em>Partner APIs</em> are available in the context of existing and well-defined relationships</li>
						<li><em>Private APIs</em> are not (supposed to be) used by anybody outside the organization</li>
					</ul>
					<li>Deciding on public/partner/private should be a policy decision</li>
					<ul>
						<li>Changing between modes should be possible without any re-engineering</li>
					</ul>
				</ul>
			</slide>
			<slide id="public-api">
				<title>Public APIs</title>
				<ul>
					<li>Public APIs were the first wave of <em>Web APIs</em></li>
					<ul>
						<li>Using the existing Internet infrastructure</li>
						<li>Using some set of Web technologies (HTTP at the very least)</li>
						<li>Exposing services for programmatic use (beyond screen scraping)</li>
					</ul>
					<li>Public APIs launched the first wave of <em>API Management</em></li>
					<em>
						<li>Defining access realms to be used for access control</li>
						<li>Self-service sites for registration and obtaining API access tokens</li>
						<li>Management consoles for controlling access levels and rates</li>
					</em>
					<li>Public API models can be hard to justify as business cases</li>
					<ul>
						<li>Many public APIs nowadays are the free tier of <em>freemium</em> API models</li>
						<li>Even public APIs need management for controlling use and misuse</li>
					</ul>
				</ul>
			</slide>
			<slide id="partner-api">
				<title>Partner APIs</title>
				<ul>
					<li>Partner APIs assume an established relationship with API users</li>
					<ul>
						<li>Only available to a smaller set of existing/potential partners</li>
						<li>Driven by the nature of the business relationship with partners</li>
					</ul>
					<li>Partner APIs are useful tools for quantifying partner relationships</li>
					<ul>
						<li>Keeping track of partner relationships and engagements</li>
						<li>Identification of problem areas and investment opportunities</li>
					</ul>
					<li>Aggregating/analyzing API usage data on various levels</li>
					<ul>
						<li><em>Operational level</em> for understanding status and operational problems</li>
						<li><em>Engagement level</em> for understanding interactions with all partners</li>
						<li><em>Business level</em> for understanding the value chain view</li>
					</ul>
				</ul>
			</slide>
			<slide id="private-api">
				<title>Private APIs</title>
				<ul>
					<li>Only exposed to consumers within the organization</li>
					<ul>
						<li>SOA/Microservices turn APIs into the software integration fabric</li>
						<li>Dependency management is necessary to keep track of the landscape</li>
					</ul>
					<li>Securing/controlling private APIs may use different tooling</li>
					<ul>
						<li>Public/partner APIs are secured with a gateway and access policies</li>
						<li>Private APIs may be exposed with less controls in a secure environment</li>
						<li><em>Monitoring</em> suggests to use the same tooling for all APIs</li>
					</ul>
					<li><em>Documentation</em> and <em>discovery</em> are essential for a healthy ecosystem	</li>
				</ul>
			</slide>
			<slide id="banking-apis">
				<title>Banking APIs</title>
				<ul>
					<li><a href="https://www.capitalone.com/">Capital One</a> <a href="https://developer.capitalone.com/">DevExchange</a></li>
					<li><a href="https://www.santanderbank.com/">Santander</a> <a href="https://www.santandermerchantservices.com/online/globalgateway/">Global Gateway e4</a></li>
					<li><a href="https://www.sutorbank.de/">Sutor</a> <a href="https://www.sutorbank.de/home/b2b/startup-platform-eng/">Startup Platform</a></li>
				</ul>
			</slide>
			<slide id="banking-test-apis">
				<title>Banking APIs in Test Mode</title>
				<ul>
					<li><a href="https://www.wellsfargo.com/">Wells Fargo</a> <a href="https://developer.wellsfargo.com/">Developer Gateway</a></li>
					<li><a href="https://online.citi.com/">Citibank</a> <a href="https://developer.citi.com/">citi developer hub</a></li>
					<li><a href="http://www.rbs.com/">Royal Bank of Scotland</a> <a href="http://www.bankofapis.com/">Global Gateway e4</a></li>
				</ul>
			</slide>
		</part>
		<part>
			<title>API Design Issues</title>
			<slide id="presentation-microservices">
				<title>Microservices</title>
				<ul>
					<li>Decomposing the Monolith into loosely coupled components</li>
					<li>Organization/cultural issues when using microservices</li>
					<li>Managing the diversity resulting from microservices</li>
				</ul>
			</slide>
			<slide id="presentation-design">
				<title>API Design</title>
				<ul>
					<li>APIs should <em>connect</em> and <em>isolate</em> at the same time</li>
					<li>API design has short term benefits and long term risks</li>
					<li>Achieving loose coupling is largely a function of API design</li>
				</ul>
			</slide>
			<slide id="presentation-management">
				<title>API Management</title>
				<ul>
					<li>Managing APIs means managing <em>information logistics</em></li>
					<li>Balancing agility and robustness requires a flexible foundation</li>
					<li>Managing APIs means managing and enabling change and reconfiguration</li>
				</ul>
			</slide>
			<slide id="presentation-security">
				<title>API Security</title>
				<ul>
					<li>Traditional security often is built on securing integrated environments</li>
					<li>Securing ecosystems takes a more decentralized view of security</li>
					<li>Web security provides good blueprints for how to decentralize security</li>
				</ul>
			</slide>
			<slide id="presentation-evolution">
				<title>API Evolution</title>
				<ul>
					<li>APIs change because business units change their value creation</li>
					<li>Designing for change is necessary is loosely coupled scenarios</li>
					<li>Decentralized systems have a long history of patterns for loose coupling</li>
				</ul>
			</slide>
			<slide id="presentation-product-management">
				<title>API Product Management</title>
				<ul>
					<li>APIs are an essential part of the value created by business units</li>
					<li>API product management means to elevate APIs to business documents</li>
					<li>Staying on top of APIs means staying on top of visible information</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/introduction"><code>dret.net/lectures/fidelity-2016/introduction</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="design">
		<title>Introduction to API Design</title>
		<toc class="time">10.00-10.45</toc>
		<toc class="abstract"><em>API Design</em> is about loose coupling, making sure that every service is entirely self-contained and can only be interacted with through its API. Another important aspect of this architectural approach is that designers and developers have a lot of autonomy when it comes to designing, developing, and deploying their services. For this reason, <em>API design</em> for services and microservices must specifically target the <em>diversity</em> and <em>decentralization</em> that are inherent properties of any (micro)services landscape.</toc>
		<toc class="resources"><a href="http://shop.oreilly.com/product/9780596801694.do" title="Subbu Allamaraju, 'RESTful Web Services Cookbook', O'Reilly Media, February 2010">RESTful Cookbook</a>&#160;· <a href="http://shop.oreilly.com/product/0636920028468.do" title="Leonard Richardson, Mike Amundsen, and Sam Ruby, 'RESTful Web APIs', O'Reilly Media, September 2013">RESTful APIs</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="design-issues">
			<title>API Design Issues</title>
			<slide id="general-design-issues">
				<title>General API Design Issues</title>
				<ul>
					<li>APIs are the domain boundaries of teams and capabilities</li>
					<li>Keeping the boundaries <em>clear</em> and <em>clean</em> is essential for microservices</li>
					<li><em>Developer Experience (DX)</em> helps to manage and maintain the boundaries</li>
					<li>Managing <em>API Design</em> and <em>Documentation</em> is an essential part of any API Strategy</li>
					<li><em>API Design Quality</em> directly impacts the success of any API Strategy</li>
				</ul>
			</slide>
			<slide id="ms-design">
				<title>Microservice API Design Issues</title>
				<ul>
					<li><em>Diversity:</em> Microservice teams are free to design their APIs</li>
					<ul>
						<li>Focus on <em>managing diversity</em> instead of defining standards</li>
					</ul>
					<li><em>Limited Scope:</em> Microservices have a limited and typically small scope</li>
					<ul>
						<li><em>Minimize friction</em> when combining APIs and consider the <q>landscape DX</q></li>
					</ul>
					<li><em>Speed:</em> Services are supposed to change and get added/deleted often</li>
					<ul>
						<li>Focus on <em>landscape management</em> and discovery and monitoring</li>
					</ul>
					<li><em>Change:</em> Services can change frequently in capabilities and/or implementation</li>
					<ul>
						<li>Encourage extensible designs for services and resilient behavior for clients</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="kafka">
			<title>The Kafka Method</title>
			<slide id="castle">
				<title>The Castle</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of input and output of processing units</li>
						<li>Implementation issues of the processing units are hidden</li>
						<li>Processing units can scale because of encapsulation and statelessness</li>
						<li>Processing steps can be easily pipelined while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li>Messaging models instead of paper forms</li>
						<li>Message models are as shallow as possible</li>
						<li>Stateless interactions allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow seamless workflows</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="messaging">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction form</q> to be as succinct as possible</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>Service Surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
			<slide id="guidance">
				<title>Provide Guidance</title>
				<ul>
					<li>Small services mean interactions across a variety of them</li>
					<li>Reduce friction by providing means for seamless interactions</li>
					<ul>
						<li><em>Identifiers</em> robustly identify resources across all services</li>
						<li><em>Links</em> guide interactions to possible following next steps</li>
						<li><em>Link Templates</em> provide the equivalent of filling out forms</li>
						<li><em>Overlay services</em> are a (weak) equivalent of traditional orchestration</li>
					</ul>
					<li><em>Guidance</em> means just that: suggestions that clients might follow</li>
					<ul>
						<li>Clients might decide to redirect or abort at any point in the process</li>
						<li>Microservices need robust programming of services <em>and</em> clients</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="rest">
			<title>Representational State Transfer (REST)</title>
			<slide id="what-is-rest">
				<title>What is REST?</title>
				<ul>
					<li>Defining <em>Representational State Transfer</em>: 3 popular definitions</li>
				</ul>
				<ol>
					<li>An <em>architectural style</em> for building loosely coupled systems</li>
					<ul>
						<li>defined by a set of general <em>constraints</em> (<em>principles</em>)</li>
						<li>the Web (URI/HTTP/HTML/XML) is an <em>instance</em> of this style</li>
					</ul>
					<li><em>The Web used correctly</em> (i.e., not using the Web as transport)</li>
					<ul>
						<li>HTTP is built according to RESTful principles</li>
						<li>services are built on top of Web standards without misusing them</li>
						<li>most importantly, HTTP is an <em>application protocol</em> (not a <em>transport protocol</em>)</li>
					</ul>
					<li>Anything that <em>uses HTTP and XML</em> (XML without SOAP)</li>
					<ul>
						<li>XML-RPC was the first approach for this</li>
						<li>violates REST because there is no uniform interface</li>
					</ul>
				</ol>
			</slide>
			<slide id="architectural-style">
				<title>Architectural Styles</title>
				<ul>
					<li>Architectural Style vs. Architecture</li>
					<ul>
						<li>Architectural Style: General principles informing the creation of an architecture</li>
						<li>Architecture: Designing a solution to a problem according to given constraints</li>
						<li>Architectural styles <em>inform</em> and <em>guide</em> the creation of architectures</li>
					</ul>
				</ul>
				<table width="95%">
					<tr>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="louvre.jpg" title="Louvre Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Louvre">Louvre</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/Baroque_architecture">Baroque</a></li>
							</ul>
						</td>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="savoye.jpg" title="Villa Savoye Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Villa_Savoye">Villa Savoye</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/International_Style_(architecture)">International Style</a></li>
							</ul>
						</td>
					</tr>
				</table>
			</slide>
			<slide id="rest-not-architecture">
				<title>REST is not an Architecture</title>
				<ul>
					<li>REST is an architectural style</li>
					<ul>
						<li>distilled from the Web <em>a posteriori</em></li>
						<li>some of the Web's standards and practices are not perfectly RESTful</li>
					</ul>
					<li>The Web is an information system following REST</li>
					<li>It is possible to design other RESTful information systems</li>
					<ul>
						<li>different uniform interfaces (not using HTTP's methods)</li>
						<li>different representations (not using HTML or XML)</li>
						<li>different identification (not using URIs)</li>
					</ul>
				</ul>
			</slide>
			<slide id="rest-style">
				<title>The REST Architectural Style</title>
				<ul>
					<li>A set of constraints that inform an architecture</li>
				</ul>
				<ol>
					<li><link href="identification-constraint"/></li>
					<li><link href="interface-constraint"/></li>
					<li><link href="self-describing-constraint"/></li>
					<li><link href="hypermedia-constraint"/></li>
					<li><link href="stateless-constraint"/></li>
				</ol>
				<ul>
					<li>Claims: scalability, mashup-ability, usability, accessibility</li>
				</ul>
			</slide>
			<slide id="identification-constraint">
				<title>Resource Identification</title>
				<ul>
					<li>Name everything that you want to talk about</li>
					<li><q>Thing</q> in this case should refer to <em>anything</em></li>
					<ul>
						<li><em>products</em> in an online shop</li>
						<li><em>categories</em> that are used for grouping products</li>
						<li><em>customers</em> that are expected to buy products</li>
						<li><em>shopping carts</em> where customers collect products</li>
					</ul>
					<li><em>Application state</em> also is represented as a resource</li>
					<ul>
						<li><em>next</em> links on multi-page submission processes</li>
						<li><em>paged results</em> with URIs identifying following pages</li>
					</ul>
				</ul>
			</slide>
			<slide id="interface-constraint">
				<title>Uniform Interface</title>
				<ul>
					<li>The same small set of operations applies to <link href="identification-constraint">everything</link></li>
					<li>A small set of <em>verbs</em> applied to a large set of <em>nouns</em></li>
					<ul>
						<li>verbs are universal and not invented on a per-application base</li>
						<li>if many applications need new verbs, the uniform interface can be extended</li>
						<li>natural language works in the same way (new verbs rarely enter language)</li>
					</ul>
					<li>Identify operations that are candidates for optimization</li>
					<ul>
						<li><http>GET</http> and <http>HEAD</http> are <em>safe operations</em></li>
						<li><http>PUT</http> and <http>DELETE</http> are <em>idempotent operations</em></li>
						<li><http>POST</http> is the catch-all and can have side-effects</li>
					</ul>
					<li>Build functionality based on useful properties of these operations</li>
				</ul>
			</slide>
			<slide id="self-describing-constraint">
				<title>Self-Describing Messages</title>
				<ul>
					<li>Resources are abstract entities (they cannot be used <em>per se</em>)</li>
					<ul>
						<li><link href="identification-constraint"/> guarantees that they are clearly identified</li>
						<li>Resources are accessed through a <link href="interface-constraint"/></li>
					</ul>
					<li>Resources are accessed using <em>resource representations</em></li>
					<ul>
						<li>Resource representations are sufficient to represent a resource</li>
						<li>It is communicated which kind of representation is used</li>
						<li>Representation formats can be negotiated between peers</li>
					</ul>
					<li>Resource representations can be based on different constraints</li>
					<ul>
						<li>XML and JSON can represent the same model for different users</li>
						<li>Whatever the representation is, it must <link href="hypermedia-constraint"> support links</link></li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia-constraint">
				<title>Hypermedia Driving Application State</title>
				<ul>
					<li><link href="self-describing-constraint">Resource representations</link> contain links to <link href="identification-constraint">identified resources</link></li>
					<li>Resources and state can be used by navigating links</li>
					<ul>
						<li>Links make interconnected resources navigable</li>
						<li>Without navigation, identifying new resources is service-specific</li>
					</ul>
					<li>RESTful applications <em>navigate</em> instead of <em>calling</em></li>
					<ul>
						<li><link href="self-describing-constraint">representations</link> contain information about possible traversals</li>
						<li>applications navigate to resources using link semantics</li>
						<li>Navigation can be delegated since all links use <link href="identification-constraint">identifiers</link></li>
					</ul>
				</ul>
			</slide>
			<slide id="stateless-constraint">
				<title>Stateless Interactions</title>
				<ul>
					<li>This constraint does not say <q>Stateless Applications</q>!</li>
					<ul>
						<li>For many RESTful applications, state is an essential part</li>
						<li>The idea of REST is to avoid long-lasting transactions <em>in applications</em></li>
					</ul>
					<li>Statelessness means to move state to clients or resources</li>
					<ul>
						<li>The most important consequence: avoid state in server-side applications</li>
					</ul>
					<li><em>Resource state</em> is managed on the server</li>
					<ul>
						<li>It is the same for every client working with the service</li>
						<li>When a client changes resource state other clients see this change as well</li>
					</ul>
					<li><em>Client state</em> is managed on the client</li>
					<ul>
						<li>It is specific for a client and thus has to be maintained by each client</li>
						<li>It may affect <em>access</em> to server resources, but not the resources themselves</li>
					</ul>
					<li><em>Security issues</em> usually are important with client state</li>
					<ul>
						<li>Clients can (try to) cheat by lying about their state</li>
						<li>Keeping client state on the server is expensive (but may be worth the price)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="have-style">
				<title>Have Some Style</title>
					<ul>
						<li>Architectural styles help informing concrete architectures</li>
						<li>Using styles as design constraints can be helpful</li>
						<li>Using proven styles helps with adoption and mitigating risk</li>
					</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/design"><code>dret.net/lectures/fidelity-2016/design</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="design-advanced">
		<title>API Design Advanced Topics</title>
		<toc class="time">10.45-12.00</toc>
		<toc class="abstract"><em>Microservice Architecture</em> and <em>Microservices</em> embrace a new style of IT development and culture that focuses on speed, safety, robustness, and scalability. Taking the ideas of agile development, CI/CD, and DevOps one step further, microservices embrace organizational changes as well, so that improved IT processes are not compromised by the side-effects of organizational realities.</toc>
		<toc class="resources"><a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture">Microservices Book</a>&#160;· <a href="http://www.martinfowler.com/articles/microservices.html" title="Martin Fowler on Microservices">Fowler on Microservices</a>&#160;· <a href="http://dret.net/netdret/publications#pau09a" title="Cesare Pautasso and Erik Wilde, 'Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design', Proceedings of the 18th International World Wide Web Conference, ACM Press, Madrid, Spain, April 2009">Loose Coupling</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="5in5">
			<title>Microservices: 5 in 5</title>
			<slide id="why">
				<title>Why?</title>
				<ul>
					<li>IT is the/a key factor for organizational fitness and sophistication</li>
					<li>IT complexity increases, yet IT velocity should increase as well</li>
					<li>IT landscapes need to adapt to shifting organizations/partners/strategies</li>
					<li>The line between internal and external IT is increasingly blurred/shifting</li>
					<li>Top-down design and control of complex systems is problematic</li>
				</ul>
			</slide>
			<slide id="what">
				<title>What?</title>
				<ul>
					<li><em>Reduce</em> system size to the max and integrate into an ecosystem</li>
					<li>Make system components <em>self-contained</em>, <em>self-sustaining</em>, and <em>independent</em></li>
					<li><em>Cultivate</em> organizational structures aligned with system boundaries</li>
					<li><em>Empower</em> system developers/owners to make their own design decisions</li>
					<li><em>Enforce</em> system separation by disallowing shortcuts</li>
				</ul>
			</slide>
			<slide id="how">
				<title>How?</title>
				<ul>
					<li>Focus on <em>team size</em> and <em>service scope</em> to keep size small</li>
					<li>Focus on <em>effective</em> ways to speed up service delivery</li>
					<li>Focus on <em>standalone-ability</em> throughout a service's lifecycle</li>
					<li>Focus on <em>ecosystems</em> of services to improve overall robustness</li>
					<li>Focus on <em>loose coupling</em> so that the ecosystem is resilient</li>
				</ul>
			</slide>
			<slide id="definition-goals">
				<title>One Definition: Goals</title>
				<blockquote>An architectural style for building solutions as network-based systems of services modularized by domains in order to improve the solutions’ evolvability, deployability, composability, scalability, resiliency and replaceability.</blockquote>
			</slide>
			<slide id="definition-methods">
				<title>Another Definition: Methods</title>
				<blockquote>A <em>microservice</em> is an independently deployable component of bounded scope that supports interoperability through message-based communication. <em>Microservice architecture</em> is a style of engineering highly automated, evolvable software systems made up of capability-aligned microservices.</blockquote>
			</slide>
		</part>
		<part id="big-picture">
			<title>The Big Picture</title>
			<slide>
				<title>Important IT Trends</title>
				<table>
					<tr><th>CI/CD</th><td>No more fear of change</td></tr>
					<tr><th>Cloud Computing</th><td>Instantaneous provisioning</td></tr>
					<tr><th>Web APIs</th><td>Self-serve integration</td></tr>
					<tr><th>DevOps</th><td>An empathetic, agile culture</td></tr>
					<tr><th>Open Source Everything</th><td>Instant pluggable code</td></tr>
					<tr><th>JavaScript Frameworks</th><td>A way to create more developers</td></tr>
					<tr><th>GitHub</th><td>A way to connect all these developers</td></tr>
					<tr><th>Containers/Docker</th><td>Exact replication of code deployments</td></tr>
				</table>
			</slide>
			<slide id="goals">
				<title>Microservice Goals</title>
				<ul>
					<li>Reduce Cost</li>
					<li>Increase Release Speed</li>
					<li>Improve Resilience</li>
					<li>Enable Visibility</li>
				</ul>
			</slide>
			<slide id="conway">
				<title>Conway's Laws</title>
				<ol>
					<li>Focus on communications (<q>Communication dictates design</q>)</li>
					<li>Support continuous process (<q>Be able to do it over</q>)</li>
					<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
					<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
				</ol>
			</slide>
		</part>
		<part id="details">
			<title>Some Details/Questions</title>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="containers">
				<title>Containerization!</title>
				<ul>
					<li><q href="http://www.apiacademy.co/resources/api360-microservices-summit-microservices-blind-spots/">Containerization is the gateway drug for microservices.</q></li>
					<li>Containers exist because of CI/CD (rapid deployment)</li>
					<li>Containers allow agility <em>on the development and deployment level</em></li>
					<li>MSA allows agility <em>on the service ecosystem level</em></li>
					<li>MSA without (some form of) containerization is hard to imagine</li>
				</ul>
			</slide>
			<slide id="ms-size">
				<title>How Micro?</title>
				<ul>
					<li>There is no hard limit on the size of a Microservice</li>
					<li>Domain limits (DDD) are a good starting point</li>
					<li>Team size (<link href="conway">Conway</link>) is a good starting point</li>
				</ul>
			</slide>
			<slide id="ms-size-upside">
				<title>How Micro? The Good News!</title>
				<ul>
					<li>MSA tells you to keep services independent and agile</li>
					<li>MSA is a continuous process of reassessing services and their utility</li>
					<ul>
						<li>If a service is too big, split service and team and relaunch the new services</li>
						<li>If granularity is too small, join teams and services and relaunch the new service</li>
					</ul>
					<li>...but still not a simple answer to the <q>how big?</q> question</li>
				</ul>
			</slide>
			<slide id="services-or-code">
				<title>Why the Code Focus?</title>
				<ul>
					<li>Loose coupling is essential and not an easy thing to get right</li>
					<li>Microservice teams have complete authority over technology choices</li>
					<ul>
						<li>But they have to develop and deploy according to MSA</li>
					</ul>
					<li>Apart from <q>being agile</q>, the only visible part is the API</li>
					<li>MSA critically depends on API strategy, design, and tooling</li>
					<ul>
						<li><em>API quality</em> is a critical factor for MSA landscape fitness</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide>
				<title>Microservices Matter</title>
				<ul>
					<li>They combine some essential SE trends of the past decade</li>
					<li>MSA results in service landscapes that can evolve and adapt faster and better</li>
					<li>MSA has a lot of tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to MSA is a gradual process and can take several years</li>
				</ul>
			</slide>
			<slide id="msa-book-2">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/design-advanced"><code>dret.net/lectures/fidelity-2016/design-advanced</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="management">
		<title>API Management</title>
		<toc class="time">13.00-14.30</toc>
		<toc class="abstract">API management needs to work both on a <em>technical</em> as well as on an <em>organizational/cultural</em> level. For the technical level, The most challenging factor in large API landscapes are the number of services, the rate of change, and the diversity of API designs in that landscape. API management needs to be able to deal with these factors in ways which do not inhibit the organic growth of the API ecosystem, while still maintaining a level of oversight and monitoring that make it possible to support data-driven decision-making.</toc>
		<toc class="resources"><a href="http://apistylebook.com/" title="Arnaud Lauret, 'API Stylebook', 2016">API Stylebook</a>&#160;· <a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://webconcepts.info/" title="Collection of Web Concepts">Web Concepts</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part>
			<title>Microservices and ... SOA!</title>
			<slide id="soapy-soa">
				<title>SOA as a Bad Word</title>
				<ul>
					<li><q>Web Services</q> have surprisingly little to do with the Web</li>
					<ul>
						<li>Using XML as the first Internet/Web-scale structured data format</li>
						<li>Ignoring everything else the <q>Web as a service ecosystem</q> could have taught</li>
					</ul>
					<li>SOAPy SOA has some fundamental design problems</li>
					<ul>
						<li>Using <em>system architecture</em> instead of <em>ecosystem architecture</em></li>
						<li>Sacrificing evolution for RPC and code generation</li>
						<li>Sacrificing decentralization for distribution</li>
					</ul>
					<li>The <a href="http://ws-rest.org/">REST community</a> set back and watched from a distance</li>
					<ul>
						<li><q>Let's wait and see if/when Web Architecture is needed</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-focus">
				<title>Microservice Architecture Focus</title>
				<ul>
					<li>Microservices are <q href="http://www.infoworld.com/article/3075880/application-development/microservice-architecture-is-agile-software-architecture.html">fine-granular SOA based on Agile CD in a DevOps culture</q></li>
					<li><q><em>Speed</em> and <em>Safety</em> at <em>Scale</em> in <em>Harmony</em></q></li>
					<ul>
						<li><em>Speed:</em> The Speed of change of which a solution can evolve</li>
						<li><em>Safety:</em> The Safety of changes so that Speed doesn't kill you</li>
						<li><em>Scale:</em> Scaling the number of services and the capacity of a solution</li>
						<li><em>Harmony:</em> Have the freedom to balance Speed and Safety</li>
					</ul>
					<li>Focusing on addressing the <link href="soapy-soa">SOAPy SOA</link> pain points</li>
					<li>De-focusing the question of how to manage the MSA landscape</li>
				</ul>
			</slide>
			<slide id="apim-landscape">
				<title>MS and the API Landscape</title>
				<img title="MS/API Landscape" src="apim-landscape.png" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="landscape-explained">
				<title>Explaining the MS API Landscape</title>
				<ul>
					<li>MS and exposed APIs can be different</li>
					<li>APIM should be able to handle private and partner/public APIs</li>
					<li>What's <em>private</em> and <em>partner/public</em> can be a contextual question</li>
					<li>External API users might want to consume more than one set of APIs</li>
					<li>Exposing the landscape or an API gateway are two possible choices</li>
					<ul>
						<li>Exposing the landscape exposes its diversity</li>
						<li>Gateways can be centralized or become part of the <em>MS fabric</em> (e.g., a container)</li>
					</ul>
				</ul>
			</slide>
			<slide id="internet-of-things">
				<title>Scenario: Internet of Things</title>
				<img title="Many things means many services" href="https://pixabay.com/static/uploads/photo/2015/05/25/05/27/network-782707_960_720.png" src="iot.png" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="ms-blind-spots">
				<title>Microservices Blind Spots</title>
				<ul>
					<li>The current focus has a few blind spots</li>
					<ul>
						<li>How to find MS if an ecosystem grows beyond <q>yell across cubicles</q> size</li>
						<li>How to manage the MS landscape once an MS ecosystem is developing</li>
						<li>How design/evolve MS so that the landscape is robust and flexible</li>
					</ul>
					<li>An understandable reaction to <link href="soapy-soa">SOAPy SOA's</link> top-down approach</li>
					<ul>
						<li>It's important to focus on the central question: How are services created and implemented?</li>
						<li>Not ignoring the questions of landscaping reduces the chances of <q>MS hangover</q></li>
					</ul>
					<li>The Web can teach us some lessons about how to do some of these things</li>
					<ul>
						<li>After all, the Web <em>is</em> the ultimate global-scale service landscape</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="landscape">
			<title>Service Landscape</title>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from..." href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MS is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>Service Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>MSA emphasizes independence and autonomy of teams</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
						<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
			<slide id="MS-v">
				<title>The Three V's of Service Landscapes</title>
				<ul>
					<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
					<ul>
						<li>How big is the service landscape and can I get an overview of what's around?</li>
					</ul>
					<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
					<ul>
						<li>As a creator or consumer, how do I deal with different service designs?</li>
					</ul>
					<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
					<ul>
						<li>As the landscape evolves, how stable are services and their designs?</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-scale">
				<title>Scale</title>
				<ul>
					<li>Different environments have different ideas of MS scale</li>
					<ul>
						<li>Small projects may have a handful of services</li>
						<li>Large MS adopters may have hundreds or thousands of services</li>
					</ul>
					<li>Exposed APIs and microservices combined mean a bigger API inventory</li>
					<li>Using any form of discovery may not be necessary from the start</li>
					<ul>
						<li>Consider the possibility when starting the MSA effort</li>
						<li>Having a plan helps teams to be aware of the need later on</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-diversity">
				<title>Diversity</title>
				<ul>
					<li>Not all services use the same technical foundations</li>
					<ul>
						<li>Different communications mechanisms</li>
						<li>Different metamodels for data structures</li>
						<li>Different models for representing application concepts</li>
						<li>In a Web context, these are concepts such as <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">HTTP headers</a>, <a href="https://github.com/dret/sedola/blob/master/MD/mediatypes.md">media types</a>, and <a href="https://github.com/dret/sedola/blob/master/MD/linkrels.md">link relations</a></li>
					</ul>
					<li>Handling diversity can be challenging because of different <q>design universes</q></li>
					<ul>
						<li>Depending on choice, similar concepts/models may be represented differently</li>
						<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
					</ul>
					<li><link href="ms-discovery">Discovering documentation</link> will allow you a better overview of your ecosystem</li>
					<ul>
						<li>A reality-based overview of the technologies used in your landscape</li>
						<li>A possible starting point or guideline for getting MSA teams started</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Decentralization means no single point of control</li>
					<li>Decentralization means no automatic top-down visibility</li>
					<ul>
						<li><em>API gateways</em> are one way of improving visibility (and control)</li>
						<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
						<li>But this already introduces constraints for MSA design</li>
					</ul>
					<li>Complete and uncontrolled decentralization is an ideal</li>
					<ul>
						<li><em>Observe</em> how the MSA landscape develops</li>
						<li><em>Identify pain points</em> from the design and operational point of view</li>
						<li><em>Identify popular patterns</em> so that teams have a starting point</li>
						<li><em>Convincing teams</em> instead of mandatory guidelines</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture">
			<title>Product Management Culture</title>
			<slide id="product-focus">
				<title>Products not Projects</title>
				<ul>
					<li>MSA puts a strong focus on products</li>
					<ul>
						<li><em>API Projects</em> end with handing over responsibility</li>
						<li><em>API Products</em> means ownership and ongoing responsibility</li>
					</ul>
				</ul>
			</slide>
			<slide id="velocity">
				<title>Innovation needs Velocity</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Permanent change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="dee-hock">
				<title>Un-Preventing Innovation</title>
				<img title="Dee Hock: Birth of the Chaordic Age" href="https://en.wikipedia.org/wiki/Dee_Hock" src="dee-hock-chaordic.png" style="width : 85% ; margin : 0% 4% 0% 4% ; "/>
				<ul>
					<li><a href="https://en.wikipedia.org/wiki/Dee_Hock">Dee Hock</a>, <q>Birth of the Chaordic Age</q>, <a href="https://www.bkconnection.com/">Berrett-Koehler Publishers</a>, January 2000</li>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
						<li>Focus on design patterns and feedback from API users</li>
					</ul>
					<li>Microservice teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to success</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
						<li>Web architecture supports choreography and orchestration patterns</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Microservice architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="standards">
			<title>Standards</title>
			<slide id="snowflakes">
				<title>Sunlight Melts Snowflakes</title>
				<img title="Snowflakes" href="http://www.flickr.com/photos/amagill/4223790595" src="snowflake.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="ui-patterns">
				<title>Uniform Interface Patterns</title>
				<ul>
					<li>Identify <q>design patterns</q> based on shared concepts</li>
					<ul>
						<li>Treating concepts as a <em>flat space</em> leaves out many details</li>
						<li><q>Deeper models</q> can still be based on the <q>shared concept surface</q></li>
					</ul>
					<li>The uniform interface evolves and so should attempt to track it</li>
					<ul>
						<li>New <a href="https://github.com/dret/webconcepts/commits">Web Concept values</a> are defined/created constantly</li>
						<li>New <a href="http://webconcepts.info/concepts">Web Concepts</a> appear less frequently</li>
					</ul>
					<li><q>Make any model <em>as shallow as possible</em>, model depth tightly couples and makes model matching and mapping much harder.</q></li>
				</ul>
			</slide>
			<slide id="bigger-picture">
				<title>Fit into the Bigger Picture</title>
				<ul>
					<li>APIs are about <em>information logistics</em>, so friction matters</li>
					<ul>
						<li><em>Developer experience (DX)</em> means how hard it is to use certain APIs</li>
						<li>DX also matters when it comes to how hard it is to combine APIs</li>
					</ul>
					<li><em>REST</em> has the idealized picture of <em>uniform self-describing interfaces</em></li>
					<ul>
						<li>Uniform: You can interact with a service without knowing it in advance</li>
						<li>Self-describing: You can learn what you need to know from the interactions</li>
					</ul>
					<li>REST works well on the Web because humans are the intelligence driving dumb browsers</li>
					<ul>
						<li>For Web services this looks difference because there is only code</li>
						<li>Having <em>shared concepts</em> and <em>layered domain meaning</em> still is a good idea</li>
					</ul>
				</ul>
			</slide>
			<slide id="ietf">
				<title>Internet Engineering Task Force (IETF)</title>
				<ul>
					<li>The main organization for Internet standards</li>
					<li>Many of the fundamental pieces of Internet/Web architecture are IETF work</li>
					<ul>
						<li><em>Internet Protocol (IP):</em> The foundation on which the Internet is based</li>
						<li><em>Domain Name System (DNS):</em> The address book of the Internet that manages all names</li>
						<li><em>Transmission Control Protocol (TCP):</em> The reliable end-to-end protocol connecting applications</li>
						<li><em>Uniform Resource Identifier (URI):</em> The way in which Web resources are identified and addressed</li>
						<li><em>Hypertext Transfer Protocol (HTTP):</em> The protocol spoken by all server and browsers and many APIs and apps</li>
						<li><em>JavaScript Object Notation (JSON):</em> The metamodel used for most modern API designs</li>
					</ul>
					<li>Keeping an eye on ongoing developments are part of solid API management</li>
				</ul>
			</slide>
			<slide id="w3c">
				<title>World Wide Web Consortium (W3C)</title>
				<ul>
					<li>The main organization for Web-related standards</li>
					<li>Many of the fundamental pieces of Web architecture are W3C work</li>
					<ul>
						<li><em>Hypertext Markup Language (HTML):</em> The document format used by browsers</li>
						<li><em>Cascading Style Sheets (CSS):</em> The layout language supported by all modern browsers</li>
						<li><em>Extensible Markup Language (XML):</em> A metamodel still popular for some APIs</li>
						<li><em>Resource Description Framework (RDF):</em> A metamodel popular for a certain class of applications</li>
					</ul>
					<li>Keeping an eye on ongoing developments are part of solid API management</li>
				</ul>
			</slide>
			<slide id="webconcepts">
				<title>Web Concepts</title>
				<ul>
					<li>The foundation of an API landscape is a mix of various standards</li>
					<li>Many of the foundations are from IETF/W3C</li>
					<ul>
						<li>Depending on the domain/industry, there may be other well-known foundations</li>
					</ul>
					<li><code href="http://webconcepts.info/">webconcepts.info</code> provides a <a href="http://webconcepts.info/concepts/"><q>starter pack</q> of concepts</a></li>
					<ul>
						<li>Currently listing 522 values classified in 16 different Web concepts</li>
					</ul>
					<li>Create your own foundation by forking, removing, and adding concepts and values</li>
					<ul>
						<li>APIs and the concepts they use should be linked both ways</li>
						<li>Imagine having a dashboard of foundations and their popularity</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="product-focus">
				<title>Manage API as products not projects</title>
				<ul>
					<li>Balancing speed and some coherence is a constant challenge</li>
					<li>Monitor trends and make sure the strategy adapts</li>
					<li>Provide help and guidance instead of rules and regulations</li>
					<li>Provide tooling to help developers do the right thing</li>
					<li>Instrument designs and run-times for data-driven a strategy</li>
				</ul>
			</slide>
			<slide id="measure-everything">
				<title>Measure Everything</title>
				<ul>
					<li>MSA is a pattern to deal with a new scale of API landscapes</li>
					<li>API landscapes get bigger and they get more dynamic</li>
					<li>Making decisions in this new environment should be data-driven</li>
					<li>Automate and monitor to gather as much data as possible</li>
					<ul>
						<li><em>Design-time instrumentation</em> gathers data on static aspects of service design</li>
						<li><em>Run-time instrumentation</em> gathers data on dynamic behavior of services</li>
					</ul>
					<li>Decouple signals, harvesting/collection, and analysis and decision-making</li>
					<ul>
						<li>Treat API landscape instrumentation as one strategic focus</li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/management"><code>dret.net/lectures/fidelity-2016/management</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="evolution">
		<title>API Evolution</title>
		<toc class="time">14.30-15.15</toc>
		<toc class="abstract">API landscapes are constantly evolving: New APIs are added, existing APIs change, and established APIs are deprecated and eventually retired. API Evolution requires to have a set of practices that support all these activities. These practices should be easy to follow, should be visible through the APIs themselves, and thus allow the landscape to make its own evolution visible and manageable.</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title="Erik Wilde, 'Patterns for Robust Extensibility'">Robust Extensibility</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="embracing-change">
				<title>Embracing Change</title>
				<ul>
					<li>APIs change</li>
					<ul>
						<li>API providers get requests for adding functionality</li>
						<li>The domain of the API evolves and the API has to change accordingly</li>
					</ul>
					<li>API landscapes change</li>
					<ul>
						<li>New APIs enter the landscape as teams expose new products as APIs</li>
						<li>APIs may get replaced in incompatible ways requiring API users to follow suit</li>
						<li>APIs may get deprecated and retired as products reach their end-of-life</li>
					</ul>
				</ul>
			</slide>
			<slide id="change-management">
				<title>Managing Constant Change</title>
				<ul>
					<li>As the landscape changes and evolves, so will your tooling</li>
					<li>Pick tools and make sure to treat them as tools</li>
					<ul>
						<li>Tools are used to serve some purpose and should be treated as disposable</li>
						<li>Having the freedom to switch tooling can be very valuable</li>
					</ul>
					<li>Decouple signals and tools</li>
					<ul>
						<li><em>Signals</em> should be designed into services and available to pick up</li>
						<li><em>Tools</em> pick up certain signals and extract useful/actionable information</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="five-traits">
			<title>Five Traits of Successful API Strategies</title>
			<slide id="api-first">
				<title>API First</title>
				<ul>
					<li>APIs are the glue of digital transformation</li>
					<li>APIs should be there before a specific channel uses them</li>
					<li>If a channel needs a new product, it must use/create an API</li>
					<li>APIs are the connective tissue of the value creation machine</li>
				</ul>
			</slide>
			<slide id="speed">
				<title>Speed</title>
				<ul>
					<li>Always design with speed and scalability in mind</li>
					<li>Horizontal scaling is the easiest way to scale</li>
					<li>MSA makes implementation changes easy</li>
					<ul>
						<li>This means that good designs can change implementations easily</li>
						<li>It is much harder if the API design needs to change</li>
					</ul>
					<li>Use asynchronous writes, message queues, and eventual consistency</li>
					<ul>
						<li>Synchronous writes make it much harder to scale writing</li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia">
				<title>Hypermedia</title>
				<ul>
					<li>Identifying meaningful resources provides shareable entry points</li>
					<li>Hypermedia controls provide guidance through a web of resources</li>
					<li>Clients have the freedom to pick the path for their application</li>
					<li>Hypermedia works well within and across APIs</li>
					<li>An ideal API landscape is as seamlessly navigable as the Web</li>
				</ul>
			</slide>
			<slide id="stateless">
				<title>Stateless</title>
				<ul>
					<li>Request/response interactions must be self-contained</li>
					<li>Each workflow is either based on client or resource state</li>
					<ul>
						<li><em>Client state</em> is what on the Web often uses cookies</li>
						<li><em>Resource state</em> creates persistent/shareable <q>sessions</q> as resources</li>
						<li><em>Server state</em> kills scalability and should be avoided</li>
					</ul>
					<li>Statelessness allows easy horizontal scaling</li>
				</ul>
			</slide>
			<slide id="jobs-to-be-done">
				<title>Jobs to be Done</title>
				<ul>
					<li>API design should be based on iterative processes</li>
					<ul>
						<li>Extensible API design allows version-less API extensions</li>
						<li>Start small and then add more jobs as required</li>
					</ul>
					<li>Avoid too many assumptions during the design and instead ask for feedback</li>
					<ul>
						<li>Design speed and turnaround allow the API to evolve based on needs</li>
						<li>Extensible design allows clients to only use those features that they need</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="registries">
			<title>Registries</title>
			<slide id="evolving-value-sets">
				<title>Evolving Value Sets</title>
				<ul>
					<li>Many business documents have evolving value sets</li>
					<ul>
						<li><em>Hard-coding</em> the value set is the simplest way</li>
						<li>Every time the value set changes, the API changes</li>
					</ul>
					<li>Some of these value sets have utility across various services</li>
					<ul>
						<li><em>Values as a Service (VaaS)</em> is one possible way to look at this pattern</li>
						<li>Decoupling value sets from APIs decreases dependencies across services</li>
					</ul>
					<li>Registries are a well-known pattern for API-minded organizations</li>
					<ul>
						<li><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a> has ~2000 registries <a href="http://www.iana.org/protocols">managed by IANA</a></li>
						<li><a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a> has no registry system but some specifications are creating their own</li>
					</ul>
				</ul>
			</slide>
			<slide id="language-identification">
				<title>Language Identification</title>
				<ul>
					<li>Language is a concept used across business documents</li>
					<li>Internet/Web language identification relies on <em>language tags</em></li>
					<ul>
						<li><a href="http://tools.ietf.org/html/rfc5646">RFC 5646</a> defines the syntax of language tags: <code>en-US</code></li>
					</ul>
					<li>The <a href="http://www.loc.gov/standards/iso639-2/">language registry</a> is operated by ISO/LoC</li>
					<ul>
						<li>The list of allowed values is defined by the current registry contents</li>
					</ul>
					<li>The <a href="https://www.iso.org/obp/ui/#search">country registry</a> is operated by ISO</li>
					<ul>
						<li>The list of allowed values is defined by the current registry contents</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="sunsetting">
			<title>Sunsetting</title>
			<slide id="apis-disappear">
				<title>APIs do not Live Forever</title>
				<ul>
					<li>APIs are products that (often) have a finite life</li>
					<li>Managing APIs also means managing their end-of-life</li>
					<li>API management often means scheduling a service's end-of-life</li>
					<ul>
						<li>Announcing scheduled decommissioning makes operational plans explicit</li>
					</ul>
					<li>Combined with dependency tracking this can be a useful tool</li>
					<ul>
						<li>Create alerts for any service that depends on services scheduled for end-of-life</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-sunset">
				<title>Announcing API End-of-Life</title>
				<ul>
					<li>HTTP traffic contains metadata about the payload and the server</li>
					<li><a href="http://tools.ietf.org/html/draft-wilde-sunset-header">HTTP <code>Sunset</code></a> allows services to publish their end-of-like</li>
					<ul>
						<li><code>Sunset: Sat, 31 Dec 2016 23:59:59 GMT</code></li>
					</ul>
					<li>Pick up and use sunset information in the monitoring infrastructure</li>
					<ul>
						<li>As sunset time gets closer, alert managers that a service reaches end-of-life</li>
						<li>Track dependencies as implicit sunsets for depending services</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="tooling">
				<title>Tooling</title>
				<ul>
					<li>Microservices are all about speed-to-production</li>
					<ul>
						<li>There is a strong culture of using tooling to get things done</li>
						<li>Tools are not prescribed but instead picked based on utility</li>
					</ul>
					<li>API design in itself may not be the greatest area for tooling</li>
					<ul>
						<li>But <em>finding out about existing designs</em> can be done by tooling</li>
						<li><em>Drilling down</em> into frequently used patterns can be done by tooling</li>
						<li><em>Documenting and publishing designs</em> can be done by tooling</li>
					</ul>
					<li>Track and document tool usage so that teams can learn from each other</li>
				</ul>
			</slide>
			<slide id="harvesting">
				<title>Harvesting</title>
				<ul>
					<li><em>Decentralization</em> needs balancing forces</li>
					<ul>
						<li><em>Discovery</em> allows users to find decentralized resources</li>
						<li>Discovery can be driven by blind or focused crawling</li>
						<li>Crawling can go beyond full-text if documents are tagged</li>
					</ul>
					<li>Find a good balance of autonomy and the need for information management</li>
					<li>Monitor API producer and consumer access to design documents</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/api-evolution"><code>dret.net/lectures/fidelity-2016/api-evolution</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="security">
		<title>API Security</title>
		<toc class="time">15.15-16.00</toc>
		<toc class="abstract">APIs are the visible and accessible surface of an organization's IT. This presentation presents different types of attacks, an introduction to security fundamentals and technologies, and how these apply to APIs.</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5246" title="RFC 5246: The Transport Layer Security (TLS) Protocol Version 1.2, August 2008">TLS</a>&#160;· <a href="https://tools.ietf.org/html/rfc5849" title="RFC 5849: The OAuth 1.0 Protocol, April 2010">OAuth 1.0</a>&#160;· <a href="https://tools.ietf.org/html/rfc6749" title="RFC 6749: The OAuth 2.0 Authorization Framework, August 2008">OAuth 2.0</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="security-101">
			<title>Security 101</title>
			<slide>
				<title>Cryptography</title>
				<ul>
					<li>Cryptography is structured into different layers</li>
					<ul>
						<li>Layering is a well-established principle for <em>separation of concerns</em></li>
					</ul>
					<li><em>Cryptographic primitives</em> implement basic functionality</li>
					<ul>
						<li>Changes and advancements in this area are limited to specialized researchers</li>
						<li>It is easy to make fatal mistakes which then challenge everything built on top if it</li>
					</ul>
					<li><em>Cryptographic protocols</em> assemble primitives into application-level solutions</li>
					<ul>
						<li><em>Primitives</em> solve basic security problems (fingerprints, encryption, …)</li>
						<li><em>Protocols</em> combine these into applications (digital signatures, secure communications, …)</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-way-function">
				<title>One-Way Function</title>
				<img style="width : 70% ; margin : 2% ; " src="hash.gif" title="Hash"/>
				<ul>
					<li>Hashes (or <em>message digests</em>) are well-known in computer science</li>
					<li>One-way functions are cryptographically safe hashes</li>
					<ul>
						<li>Very hard to find an input producing a given output</li>
						<li>Very hard to find two inputs producing the same output (<q>collision</q>)</li>
					</ul>
				</ul>
			</slide>
			<part id="secret-key">
				<title>Secret-Key Cryptography</title>
				<slide>
					<title>Plausible Encryption</title>
					<ul>
						<li>Secret-Key is was most people think of when thinking of encryption</li>
						<ul>
							<li><em>Symmetric cryptography</em> is another popular term</li>
						</ul>
						<li>One key for encryption and decryption</li>
						<li>Revealing the key makes encrypted data openly readable</li>
						<ul>
							<li>There must be a secure channel to transport keys, such as <a href="http://en.wikipedia.org/wiki/Diplomatic_bag">diplomatic pouches</a>.</li>
						</ul>
						<li>Good for long-term relationships with few partners</li>
						<ul>
							<li>Exchange secret keys as part of the initial setup of a relationships</li>
							<li>Adding partners requires a <em>secure channel</em> for key exchange</li>
							<li>Changing keys requires a <em>secure channel</em> for key exchange</li>
						</ul>
						<li>Almost impractical in an environment with many ad-hoc partners</li>
					</ul>
				</slide>
				<slide>
					<title>Notice the Arrow</title>
					<img style="width : 90% ; margin : 2% ; " src="secret-key.gif" title="Secret-Key Cryptography"/>
				</slide>
			</part>
			<part id="public-key">
				<title>Public-Key Cryptography</title>
				<slide>
					<title>Implausible Encryption</title>
					<ul>
						<li>Public-Key intuitively is hard to accept as a concept</li>
						<ul>
							<li><em>Asymmetric cryptography</em> is another popular term</li>
						</ul>
						<li>Key pairs of one public and one secret key</li>
						<ul>
							<li><em>Key generation</em> is the process of generating these key pairs</li>
						</ul>
						<li>The public key can be made available to the public</li>
						<ul>
							<li>Only the secret key can do the inverse operation of the public key</li>
						</ul>
						<li>Good for short-term relationships with many partners</li>
						<ul>
							<li>Publish your public key so that it can be used worldwide</li>
							<li>Everybody can encrypt data using the public key</li>
							<li>Only the owner of the secret can decrypt the message and read it</li>
						</ul>
						<li>Computationally expensive and not good for a large amounts of data</li>
					</ul>
				</slide>
				<slide>
					<title>No Arrow Here …</title>
					<img style="width : 90% ; margin : 2% ; " src="public-key-secret-encrypt.gif" title="Public-Key Cryptography (Encrypting with Secret Key)"/>
				</slide>
			</part>
			<part id="crypto-protocols">
				<title>Cryptographic Protocols</title>
				<slide>
					<title>Building Secure Applications</title>
					<ul>
						<li><em>Cryptographic primitives</em> in most cases are not sufficient</li>
						<ul>
							<li>They provide basic functionality for fundamental tasks</li>
							<li>They must by combined to provide solutions for real-world problems</li>
						</ul>
						<li>Typical problem #1: How to ensure key authenticity?</li>
						<ul>
							<li>With insecure keys, the majority of cryptographic methods is worthless</li>
						</ul>
						<li>Typical problem #2: How to communicate securely without shared keys?</li>
						<ul>
							<li>Many interesting scenarios are based on ad-hoc interactions</li>
							<li>Secret-key does not work, public-key needs to verify the peer</li>
						</ul>
						<li>Typical problem #3: How to check authenticity and integrity of data?</li>
						<ul>
							<li>Integrity can be done with checksums, but these could be forged</li>
							<li>Authenticity needs a cryptographically secure way of combining identity and data</li>
						</ul>
					</ul>
				</slide>
				<slide id="certificate">
					<title>Certificate</title>
					<ul>
						<li>Certificates are digital signatures issued by a trusted party</li>
						<ul>
							<li>Most digital signatures are created with certified public keys</li>
							<li>This means the digital signature is created based on a digitally signed key</li>
						</ul>
						<li>Who can you trust on the Web?</li>
						<ul>
							<li>Trust can only start to grow based on initial trust</li>
							<li>Many systems come with <em>pre-installed trust</em> (<em>root certificates</em>)</li>
							<li>Certificates from other issuers will cause security exceptions</li>
						</ul>
						<li>Certificates (like domain names) are an easy way to make money</li>
						<ul>
							<li>In theory there are different levels of certificates with different levels of identity checking</li>
							<li>In practice most sites choose the cheapest one that does not give an error message</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="https">
			<title short="HTTPS">HTTP over SSL (HTTPS)</title>
			<slide>
				<title>Secure Communications</title>
				<ul>
					<li><link href="public-key">Public-Key cryptography</link> is computationally expensive</li>
					<ul>
						<li>it is possible to encrypt all traffic using asymmetric key pairs</li>
						<li>this generates considerably more load on the server side</li>
					</ul>
					<li>Combining <link href="public-key">public-key</link> and <link href="secret-key">secret-key</link> cryptography</li>
					<ol>
						<li>check the public key for authenticity (using a <link href="certificate"/>)</li>
						<li>generate a key for a secret-key encryption scheme</li>
						<li>use the public key to securely transmit the secret key</li>
						<li>use the secret key for securely transmitting the payload</li>
					</ol>
					<li>Combines the advantages of both methods</li>
					<ul>
						<li>the lower complexity of secret-key algorithms</li>
						<li>the ability of public-key algorithms to work without a secure channel</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP and Security</title>
				<ul>
					<li>HTTP sends clear-text messages</li>
					<li>Making HTTP secure requires additional mechanisms</li>
					<li>Encryption is done by a layer on top of TCP</li>
					<ul>
						<li><em>Secure Sockets Layer (SSL)</em> is the protocol layer invented by Netscape</li>
						<li><em>Transport Layer Security (TLS)</em> is the standardized Internet version</li>
						<li>TLS adds more encryption schemes and more flexibility</li>
					</ul>
					<li>Lower-level methods may also provide encryption</li>
					<ul>
						<li><em>Virtual Private Networks (VPN)</em> provide IP-based encryption</li>
						<li><em>WEP</em> and <em>WPA</em> provide network interface encryption</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP and SSL</title>
				<img style="width : 90% ; margin : 2% ; " src="https.gif" title="HTTP and SSL"/>
			</slide>
		</part>
		<part id="http-authentication">
			<title>HTTP Authentication</title>
			<slide>
				<title>HTTP Access Control</title>
				<ul>
					<li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> through access control</li>
					<ul>
						<li><code>401 Unauthorized</code> means the resource is access controlled</li>
						<li><code>403 Forbidden</code> means the resource is inaccessible</li>
						<li><code>405 Method Not Allowed</code> signals a request using the wrong <em>request method</em></li>
					</ul>
					<li>Two different approaches to unauthorized access are possible</li>
					<ul>
						<li>repeat the HTTP request with the proper authentication credentials</li>
						<li>redirect to a <link href="login-page"/> and establish an authenticated session</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Authentication</title>
				<img style="width : 90% ; margin : 2% ; " src="http-authentication.gif" title="HTTP Authentication"/>
			</slide>
			<slide id="http-basic">
				<title>Basic HTTP Authentication</title>
				<ul>
					<li>Authentication is based on <em>authentication realms</em></li>
					<ul>
						<li>A set of resources for which the authentication is required</li>
						<li>An opaque name which is used to signal which login is required</li>
						<li>Username/password often is specific for a given realm</li>
					</ul>
					<li>Users supply username and password through the client</li>
					<ul>
						<li>Sent as <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoded <q><code>username:password</code></q> string</li>
						<li>Username and password are <a href="http://www.google.com/search?hl=en&amp;q=base64+decoder"><em>not</em> transmitted securely</a></li>
						<li>Basic authentication should <em>always</em> use <link href="https">HTTPS</link></li>
					</ul>
					<li>Authorization is handled on the server side</li>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="SokEvo"</pre>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">GET /private/index.html HTTP/1.0
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</pre>
				</ul>
			</slide>
			<slide>
				<title>Repeated Access</title>
				<ul>
					<li>Clients typically access more than one protected resource</li>
					<ul>
						<li>Perfectly stateless clients always request authentication from users</li>
						<li>Using the <em>realm</em> clients can identify repeated accesses</li>
					</ul>
					<li>Web interactions by default are stateless</li>
					<ul>
						<li>Each request is completely independent from other requests</li>
						<li>Stateless interactions make the Web loosely coupled and scalable</li>
						<li>Concepts like the <em>realm</em> or <em>cookies</em> introduce <q>state</q></li>
					</ul>
					<li>Clients remember the authentication and replay it automatically</li>
					<ul>
						<li>Browsers provide little control over this feature</li>
						<li><q>Logging out</q> of HTTP authenticated <q>sessions</q> is hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="login-page">
				<title>Login Page</title>
				<ul>
					<li><link href="http-basic"/> works with browser controls (including the window)</li>
					<ul>
						<li>No possibility to <q>log out</q> without using browser-specific controls</li>
						<li>Client side security depends on browser security measures</li>
					</ul>
					<li>Using <em>HTML forms</em> gives more freedom in session management</li>
					<ul>
						<li><em>Authentication</em> and <em>authorization</em> are application-based</li>
						<li>If there were <q>secure personal browsers</q> this would not work very well</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="oauth">
			<title>OAuth</title>
			<slide id="oauth-motivation">
				<title>OAuth Motivation</title>
				<ul>
					<li>Web apps used to be the one trusted peer</li>
					<ul>
						<li>They host the application logic and the user's resources</li>
						<li><em>Authentication</em> is against the app and then covers everything</li>
					</ul>
					<li>More sophisticated scenarios require more sophisticated authentication</li>
					<ul>
						<li>Resources are hosted by one service</li>
						<li>Application logic is provided by a different service</li>
						<li>How to provide access without handing over full access?</li>
					</ul>
					<li>OAuth separates <em>resource owner</em>, <em>client</em>, and <em>server</em></li>
					<ul>
						<li><em>Protected resources</em> owned by the <em>resource owner</em> are stored by the <em>server</em></li>
						<li><em>Clients</em> get resource access via tokens (and not via full authentication)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/fidelity-2016/security"><code>dret.net/lectures/fidelity-2016/security</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/fidelity-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>