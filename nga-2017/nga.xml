<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="nga.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="https://www.nga.mil/">National Geospatial-Intelligence Agency (NGA)</a></title>
	<presentation id="index">
		<title>API Strategy and Design</title>
		<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
		<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
		<date short="2017-07-10">July 10, 2017</date>
		<copyright>2017 Erik Wilde</copyright>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-intro">
			<title>Introduction to APIs</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>APIs in their current sense evolved from the <em>local API</em> term</li>
					<ul>
						<li><em>Local APIs</em> originated as a way to build systems (i.e., one big thing)</li>
						<li><em>Network APIs</em> were invented decades ago but nobody has found the silver bullet (yet)</li>
						<li><em>Web APIs</em> are a loose and evolving collection of principles and patterns</li>
					</ul>
					<li>Languages become necessary when coordination is required</li>
					<ul>
						<li><em>Human language</em> is a result of improving ecological fitness</li>
						<li><em>Human written language</em> is a result of new organizational challenges/complexity</li>
					</ul>
					<li>Same problems/approaches/answers like other language problems</li>
					<ul>
						<li><em>Domain-only:</em> Domains figure out their problems and their languages</li>
						<li><em>Universal:</em> Find the <em>universal grammar</em> and use it everywhere</li>
						<li><em>Hybrid:</em> Use shared foundations with principles and patterns but avoid überformats</li>
					</ul>
				</ul>
			</slide>
			<part id="three-api-drivers">
				<title>Three Drivers of the API Economy</title>
				<slide id="api-driver-push">
					<title>Driver #1: Push</title>
					<ul>
						<li>Many environments change at increasing velocities</li>
						<ul>
							<li>Economics change</li>
							<li>Incentives change</li>
							<li>Technologies change</li>
						</ul>
						<li>Organizations are <em>pushed</em> to better handle change</li>
						<ul>
							<li>They have to become better at <em>reacting to external changes</em></li>
							<li>They have to become better at <em>executing internal changes</em></li>
							<li>They have to become better at <em>embracing changing</em></li>
						</ul>
					</ul>
				</slide>
				<slide id="api-driver-pull">
					<title>Driver #2: Pull</title>
					<ul>
						<li>External: Participating in the <em>API economy</em> becomes increasingly beneficial</li>
						<ul>
							<li>Interfacing with customers/partners becomes easier</li>
							<li>The number of API-ready customers/partners keeps increasing</li>
							<li>The <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</a> guarantees for the trend to continue</li>
						</ul>
						<li>Internal: Being able to plan and execute changing quickly improves fitness</li>
						<ul>
							<li>Traditionally, IT is perceived as sluggish and heavyweight</li>
							<li>Increasingly, IT becomes the <q>lube</q> for the organizational machinery</li>
							<li>Additionally, IT can allow completely new classes of business models</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-driver-follow">
					<title>Driver #3: Follow</title>
					<ul>
						<li>Having an <em>API strategy</em> becomes increasingly important</li>
						<ul>
							<li>Organizations have executed on this for a long time (Amazon API memo: 2002)</li>
							<li>Organizations share experiences and tooling around API strategies</li>
						</ul>
						<li>Using APIs becomes less of an <q>if</q> and more of a <q>how</q></li>
						<ul>
							<li>Business pushes IT to make sure strategy can be executed quickly</li>
							<li>IT can leverage others as justification and leaders</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="two-api-views">
				<title>Two Views of API Scope</title>
				<slide id="internal-external">
					<title>Internal and External API Scope</title>
					<ul>
						<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
						<ul>
							<li>Focus on <em>systems/software engineering</em> and better modularization</li>
							<li><em>Turn a system into an ecosystem:</em> Break up the monolith</li>
						</ul>
						<li><em>External:</em> Using APIs to build up ecosystems</li>
						<ul>
							<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
							<li><em>Create an ecosystem by loosely coupling systems:</em> Build more/better value chains</li>
						</ul>
						<li>Both views are complementary and mostly a difference in perspective</li>
						<ul>
							<li><em>Internal view</em> is often driven by IT (improve the way how IT works)</li>
							<li><em>External view</em> is often driven by business (improve the way the business works)</li>
						</ul>
					</ul>
				</slide>
				<slide id="one-perception">
					<title>One Perception of API Value</title>
					<ul>
						<li>System/ecosystem boundaries are blurry</li>
						<ul>
							<li>System/ecosystem boundary is a question of scope and perspective</li>
						</ul>
						<li>APIs provide a foundation for communications in an ecosystem</li>
						<ul>
							<li><em>Internal:</em> Value is in agility and changeability</li>
							<li><em>External:</em> Value is in communications and interactions</li>
						</ul>
						<li>API discussions should always be aware of both perspectives</li>
						<ul>
							<li>Separate internal/external API strategies are counter-productive</li>
							<li>API strategy should cover and seamlessly connect both views</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="api-design">
			<title>API Design</title>
			<part id="messages-models">
				<title>Messages vs. Models</title>
				<slide id="api-language-simplicity">
					<title>API Language Simplicity</title>
					<ul>
						<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
						<ul>
							<li>Expose <em>as little as possible</em> of the domain complexity</li>
							<li>Resist the temptation to <em>expose your domain model</em></li>
						</ul>
						<li>Interfaces are languages for communication</li>
						<ul>
							<li>They establish a language between API provider and consumer</li>
							<li>Keeping the language simple keeps the API usable</li>
						</ul>
						<li><q>Model Creep</q> is an obstacle for API adoption and stability</li>
						<ul>
							<li>There is no <q>one true model</q> for any domain</li>
							<li>Keeping the language simple makes it easier to understand and use</li>
							<li>Keeping the language simple makes it easier to change the implementation</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-messages">
					<title>APIs and Messages</title>
					<ul>
						<li>Messages are the sentences in API communications</li>
						<ul>
							<li>They transport meaning between collaborating peers</li>
							<li>They are independent of how peers implement their activities</li>
						</ul>
						<li>Messages can follow patterns that make APIs easier to use</li>
						<ul>
							<li><em>API styles</em> are focusing on specific communication styles</li>
							<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, …)</li>
							<li><em>API models</em> add message models (SOAP, HAL, GraphQL, …)</li>
							<li><em>Vocabularies</em> help to describe specific APIs</li>
						</ul>
						<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
					</ul>
				</slide>
				<slide id="messaging-start">
					<title>Make Messaging the Start</title>
					<ul>
						<li>Make sure to identify relevant resources so that you can refer to them</li>
						<ul>
							<li><q>Resource</q> refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
							<li>Unique and stable identity helps when assigning resource identifiers</li>
						</ul>
						<li>Any service resource must have a <em>representation</em> in messages</li>
						<ul>
							<li>Your <em>data model</em> is not your <em>object model</em></li>
							<li>Your <em>object model</em> is not your <em>resource model</em></li>
							<li>Your <em>resource model</em> is not your <em>message model</em></li>
						</ul>
						<li>Design <q>interaction forms</q> to be as succinct as possible</li>
					</ul>
				</slide>
			</part>
			<part id="api-scope">
				<title>API Scope</title>
				<slide id="api-tool">
					<title>APIs as Tools</title>
					<ul>
						<li>APIs exist to solve specific problems</li>
						<ul>
							<li>Think about the problem and not the solution</li>
							<li>Design a <em>capability</em> that hides solution details</li>
						</ul>
						<li>Collaborate with consumers and gather their feedback</li>
						<ul>
							<li><q>API first</q> is all about driving solutions from the API</li>
							<li>Use approaches that make incremental design easy</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-maslow">
					<title>Tools and Problems</title>
					<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="api-design-simple">
					<title>KISS API Design</title>
					<ul>
						<li>The only thing that matters is the <em>service surface</em></li>
						<ul>
							<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
							<li>Resist the temptation to <em>expose your model</em> just because you can</li>
						</ul>
						<li>Concepts must be well-defined but not necessarily deeply modeled</li>
						<li>There is no single correct path to well-designed APIs</li>
						<ul>
							<li>What is the capability that the API is exposing?</li>
							<li>What are the assumptions about API consumers?</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="design-dx">
				<title>Developer Experience (DX)</title>
				<slide id="design-thinking">
					<title>Design Thinking</title>
					<ul>
						<li>Design is driven by creating products/solutions</li>
						<ul>
							<li>How well does the product address a given problem?</li>
							<li>How easy is the designed product to use?</li>
							<li>How easy is it to create new APIs when the existing ones do not work?</li>
						</ul>
						<li>APIs often are <em>part of a bigger picture</em></li>
						<ul>
							<li>Developers have to use APIs to <em>design their applications</em></li>
							<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-integration-client">
					<title>Ad-Hoc API Integration</title>
					<img title="Client-Side API Integration" src="apis-application-layer-client.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="api-integration-server">
					<title>Pre-Packaged API Integration</title>
					<img title="Server-Side API Integration" src="apis-application-layer-server.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="design-coherence">
					<title>Design Coherence</title>
					<ul>
						<li>Establish a <em>culture of API design</em></li>
						<ul>
							<li><q>This is how APIs are usually looking</q></li>
							<li>Here are some tools to help with design and documentation</li>
							<li>Here is a breakdown of what the API landscape looks like</li>
						</ul>
						<li>Observing reality helps to document <em>and</em> establish culture</li>
						<ul>
							<li>One way to think of establishing coherence is by setting <em>guidelines</em></li>
							<li>An alternative path is to document and disseminate <em>existing practices</em></li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="diversity-decentralization-loose-coupling">
				<title>Diversity, Decentralization, and Loose Coupling</title>
				<slide id="diversity">
					<title>Diversity</title>
					<ul>
						<li>API designs should focus on the <em>API Quality</em></li>
						<ul>
							<li>Standardizing on technologies is no guarantee for quality</li>
						</ul>
						<li>Teams are incentivized to create good APIs</li>
						<ul>
							<li>Feedback from API consumers comes early and often</li>
							<li>Being a good citizen improves the chances of success</li>
							<li>Monitoring quickly reveals patterns of usage and popularity</li>
						</ul>
						<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
						<li>Consumers should have a <em>seamless experience</em> across APIs</li>
					</ul>
				</slide>
				<slide id="decentralization-api">
					<title>Decentralization (API Level)</title>
					<ul>
						<li>Centralization has become an IT anti-pattern</li>
						<li>APIs should be easily composable by consumers</li>
						<ul>
							<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
							<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
						</ul>
						<li>Individual services own and document their service APIs</li>
						<li>Cross-service examples and use cases need to respect this autonomy</li>
					</ul>
				</slide>
				<slide id="decentralization-implementation">
					<title>Decentralization (Implementation Level)</title>
					<ul>
						<li>SOAPy SOA focused on <q>API-enabling the monolith</q></li>
						<ul>
							<li>Enabling access to monolith capabilities</li>
							<li>Not helping with better structure/separation of capabilities</li>
						</ul>
						<li>Moving away from one-size-fits-all implementation platforms</li>
						<ul>
							<li>Reduce energy spent to find the one true platform</li>
							<li>Increase energy spent to operate/instrument a diversity of platforms</li>
						</ul>
						<li>From standardizing <em>implementation</em> to standardizing <em>interoperability</em></li>
						<ul>
							<li>A fundamental shift in how IT looks at the implementation landscape</li>
							<li>Less implementation control means increased operational complexity</li>
							<li>Less implementation diversity means more behavioral monitoring and control</li>
						</ul>
					</ul>
				</slide>
				<slide id="loose-coupling">
					<title>Loose Coupling</title>
					<ul>
						<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
						<li>Modern service architecture encourages service changes and replacements</li>
						<ul>
							<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
							<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
						</ul>
						<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
					</ul>
				</slide>
			</part>
		</part>
		<part id="geo-apis">
			<title>Geospatial APIs</title>
			<part id="geo-api-issues">
				<title>Geospatial API Issues</title>
				<slide id="geo-api-audience">
					<title>API Complexity</title>
					<ul>
						<li>Geospatial models tend to have intrinsic complexity</li>
						<ul>
							<li>Well-known in the geospatial community</li>
							<li>Not as well-known outside of that particular community</li>
						</ul>
						<li>Geospatial information sharing can have simple scenarios</li>
						<ul>
							<li>Extracting information based on simple query models</li>
							<li>Submitting information based on simple insertion models</li>
						</ul>
					</ul>
				</slide>
				<slide id="geo-api-audience">
					<title>API Audience</title>
					<ul>
						<li>Design APIs with an audience in mind</li>
						<ul>
							<li><q>Designing into the void</q> rarely leads to good UX/DX</li>
							<li><q>All you have to do is know these 28 OGC standards.</q></li>
						</ul>
						<li>Using simple standards means accommodating bigger audiences</li>
						<ul>
							<li><a href="http://webconcepts.info/"><em>Web Architecture</em> provides a rich API foundation</a></li>
							<li>Knowing and using simple standards can help adoption</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-scale">
					<title>Geo API Landscape Scale</title>
					<ul>
						<li>Different environments have different ideas of landscape scale</li>
						<ul>
							<li>Small projects may have a handful of services</li>
							<li>Large adopters may have hundreds or thousands of APIs</li>
						</ul>
						<li>Using any form of discovery may not be necessary from the start</li>
						<ul>
							<li>Consider the possibility when starting an API effort</li>
							<li>Having a plan helps teams to be aware of the need later on</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-diversity">
					<title>GEO API Landscape Diversity</title>
					<ul>
						<li>Not all services use the same technical foundations</li>
						<ul>
							<li>Different communications mechanisms</li>
							<li>Different metamodels (XML/JSON/RDF) for data models</li>
							<li>Different models for representing application concepts</li>
							<li>In a Web context, these are <a href="webconcepts.info/concepts/" title="Web Concepts">concepts</a> such as <a href="http://webconcepts.info/concepts/http-header/">HTTP headers</a>, <a href="http://webconcepts.info/concepts/media-type/">media types</a>, and <a href="webconcepts.info/concepts/link-relation/">link relations</a></li>
						</ul>
						<li>Handling diversity can be challenging because of different <q>design universes</q></li>
						<ul>
							<li>Depending on choice, similar concepts/models may be represented differently</li>
							<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
						</ul>
						<li>Discovering documentation provides a better overview of the ecosystem</li>
						<ul>
							<li>A reality-based overview of the technology landscape</li>
							<li>A possible starting point or guideline for getting teams started</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-decentralization">
					<title>Geo API Landscape Decentralization</title>
					<ul>
						<li>Decentralization means no single point of control</li>
						<li>Decentralization means no automatic top-down visibility</li>
						<ul>
							<li><em>API gateways</em> are one way of improving visibility (and control)</li>
							<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
						</ul>
						<li>Complete and uncontrolled decentralization is an ideal</li>
						<ul>
							<li><em>Observe</em> how the landscape develops</li>
							<li><em>Identify pain points</em> from the design and operational point of view</li>
							<li><em>Identify popular patterns</em> so that teams have a starting point</li>
							<li><em>Convincing teams</em> instead of mandatory guidelines</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="geojson">
				<title>What is GeoJSON?</title>
				<slide id="strava-art">
					<title>It's for Riding Animals!</title>
					<img src="fish.jpg" style="float: left ; width : 42% ; margin : 4% ; " href="http://www.strava.com/activities/523719323"/>
					<img src="goose.jpg" style="float: right ; width : 42% ; margin : 4% ; " href="http://www.strava.com/activities/527214108"/>
				</slide>
				<slide id="fish-ride">
					<title>GeoJSON Fish</title>
					<ul>
						<li>Transformed from <a href="http://www.strava.com/">Strava</a>-originated <a href="http://www.strava.com/activities/523719323">activity</a> <a href="src/fish.gpx">GPX</a></li>
						<li><a href="http://github.com/">Github</a> understands and renders the resulting <a href="src/fish.geojson">GeoJSON</a></li>
					</ul>
					<listing src="fish.geojson" line="1-15"/>
				</slide>
				<slide id="goose-ride">
					<title>GeoJSON Goose</title>
					<ul>
						<li>Transformed from <a href="http://www.strava.com/">Strava</a>-originated <a href="http://www.strava.com/activities/527214108">activity</a> <a href="src/goose.gpx">GPX</a></li>
						<li><a href="http://github.com/">Github</a> understands and renders the resulting <a href="src/goose.geojson">GeoJSON</a></li>
					</ul>
					<listing src="goose.geojson" line="1-15"/>
				</slide>
				<slide id="geojson-executive">
					<title>Representing Geometries or Features</title>
					<ul>
						<li>GeoJSON has object types for single and multiple geometries and features</li>
						<ul>
							<li><a href="http://tools.ietf.org/html/rfc7946#section-3.1">Geometry</a> represents 6 geometry types (see below) and one collection</li>
							<li><code href="http://tools.ietf.org/html/rfc7946#section-3.2">Feature</code> represents single or multiple <q>spatially bound things</q></li>
						</ul>
						<li>GeoJSON's fundamental geometry construct is the <a href="https://tools.ietf.org/html/rfc7946#section-3.1.1">position</a></li>
						<ul>
							<li><code href="https://tools.ietf.org/html/rfc7946#section-3.1.2">Point</code> has one position</li>
							<li><code href="https://tools.ietf.org/html/rfc7946#section-3.1.4">LineString</code>/<code href="https://tools.ietf.org/html/rfc7946#section-3.1.3">MultiPoint</code> have an array of positions</li>
							<li><code href="https://tools.ietf.org/html/rfc7946#section-3.1.6">Polygon</code>/<code href="https://tools.ietf.org/html/rfc7946#section-3.1.5">MultiLineString</code> have an array of arrays of positions</li>
							<li><code href="https://tools.ietf.org/html/rfc7946#section-3.1.7">MultiPolygon</code> has an array of polygons</li>
						</ul>
						<li>Features have <code>properties</code> and an associated <code>geometry</code></li>
						<li><code>Feature</code> and Geometry also come as <code href="https://tools.ietf.org/html/rfc7946#section-3.3">FeatureCollection</code>/<code href="https://tools.ietf.org/html/rfc7946#section-3.1.8">GeometryCollection</code></li>
						<li>GeoJSON is not meant to represent the full complexity/fidelity of GIS models</li>
					</ul>
				</slide>
				<slide id="geojson-use">
					<title>Using GeoJSON</title>
					<ul>
						<li>Meant as a simple and lightweight representation</li>
						<ul>
							<li>Use it in services/APIs where geometries/features need to be represented in a simple way</li>
							<li>Do not expect full fidelity of possibly complex underlying models</li>
						</ul>
						<li>Not meant as a synchronization format for full-fidelity GIS access/interchange</li>
						<ul>
							<li>Trying to <q>GISify</q> GeoJSON very likely makes it non-interoperable</li>
						</ul>
						<li>Geo-tools such as <a href="http://leafletjs.com/">Leaflet</a> often <a href="http://leafletjs.com/examples/geojson.html">support GeoJSON out of the box</a></li>
					</ul>
				</slide>
			</part>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="api-matters">
				<title>API Matters</title>
				<ul>
					<li>APIs are a means to decouple tightly coupled components</li>
					<li><em>API Strategy</em> should focus on maximizing API-derived value</li>
					<ul>
						<li>Always look at both sides of the internal/external divide</li>
						<li>Avoid decentralizing architecture but centralizing implementation</li>
					</ul>
					<li><em>API Management</em> monitors and nurtures a diverse set of APIs</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/nga-2017"><code>dret.net/lectures/nga-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nga-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>