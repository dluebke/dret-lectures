<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="windtre.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Wind Tre API Workshop</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2017-10-25">October 25, 2017</date>
	<copyright>2017 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <hotspot:slides>(*&#160;Slides)</hotspot:slides></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction-models-protocols">
		<title>Introduction and API Models and Protocols</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a>&#160;· <a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-introduction">
			<title>Digital Transformation and APIs</title>
			<part id="digital-transformation-introduction">
				<title>Digital Transformation: Why?</title>
				<slide id="why-now">
					<title>APIs! But Why Now?</title>
					<ol>
						<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
						<ul>
							<li>Markets move faster than ever before</li>
							<li>Technology-driven changes require readiness on the IT level</li>
						</ul>
						<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
						<ul>
							<li>Re-imagining organizations becomes a way of being</li>
							<li>Not being API-ready means missing increasingly more opportunities</li>
						</ul>
						<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
						<ul>
							<li>Examples of organizations allow insights into potential and risk</li>
							<li>The technology landscape is rich enough to get started</li>
						</ul>
					</ol>
				</slide>
				<slide id="castle">
					<title>Traditional IT</title>
					<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="bureaucracy">
					<title>Bureaucracy</title>
					<ul>
						<li>Bureaucracy evolved for a reason</li>
						<ul>
							<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
							<li>Implementation issues of the processing units are <em>hidden</em></li>
							<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
							<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
						</ul>
						<li>Well-designed service landscapes have the exact same properties</li>
						<ul>
							<li><em>Messaging models</em> instead of paper forms</li>
							<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
							<li><em>Stateless interactions</em> allow for easy load balancing</li>
							<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
						</ul>
					</ul>
				</slide>
				<slide id="api-economy">
					<title>API Economy</title>
					<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="digital-transformation">
					<title>Digital Transformation</title>
					<img href="https://upload.wikimedia.org/wikipedia/commons/3/31/Great_white_shark_south_africa.jpg" src="digital-transformation-shark.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
			</part>
			<part id="what">
				<title>Digital Transformation: What?</title>
				<slide id="digitalization-dividends">
					<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
					<ol>
						<li>Permissionless Innovation</li>
						<li>Enable Failure</li>
						<li>Disrupt Trust (replaced by autonomy and accountability)</li>
						<li>You Build It, You Own It</li>
						<li>Accelerate Deprecations</li>
						<li>End Centralized Metadata</li>
						<li>Concentrate the Pain</li>
						<li>Test Differently</li>
					</ol>
				</slide>
				<slide id="ms-blind-spots">
					<title>MSA Blind Spot: API Design/Management</title>
					<ul>
						<li>MSA focuses on culture/development/operational aspects</li>
						<ul>
							<li>Isolating services through all phases of the lifecycle</li>
							<li>But of course services still need to interact</li>
						</ul>
						<li>API consistency will help to make the landscape more productive</li>
						<ul>
							<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
							<li>Helping <em>API providers</em> to be more usable for consumers</li>
							<li>Helping <em>API consumers</em> to depend on some consistency</li>
							<li>Helping with <em>API discovery</em> and managing the landscape</li>
						</ul>
					</ul>
				</slide>
				<slide id="organize-services">
					<title>Organize Services: Operate Smaller Components</title>
					<ul>
						<li>Services talk to each other <em>only</em> through APIs</li>
						<ul>
							<li>Each service runs as a standalone component</li>
							<li>Service dependencies are only through API invocations</li>
						</ul>
						<li>APIs trade flexibility for operational complexity</li>
						<ul>
							<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
							<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
						</ul>
						<li>APIs need <em>lifecycle management</em> to reach full potential</li>
						<ul>
							<li><em>Design</em> APIs so that they fit into the ecosystem</li>
							<li><em>Publish</em> APIs so that they can be discovered</li>
							<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
							<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-lifecycle">
					<title>API Lifecycle</title>
					<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
			</part>
			<part id="how">
				<title>Digital Transformation: How?</title>
				<slide id="digital-transformation-path">
					<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Digital Transformation</a></title>
					<ol>
						<li>Componentization via services</li>
						<li>Organized around business capabilities</li>
						<li>Products not projects</li>
						<li>Smart endpoints and dumb pipes</li>
						<li>Decentralized governance</li>
						<li>Decentralized data management</li>
						<li>Infrastructure automation</li>
						<li>Design for failure</li>
						<li>Evolutionary design</li>
					</ol>
				</slide>
				<slide id="who">
					<title>Microservices for the Masses?</title>
					<ul>
						<li>Microservices are an investment and not a default choice</li>
						<ul>
							<li>The cost is the need for advanced infrastructure and teams</li>
							<li>The return is increased flexibility and agility</li>
							<li>Cost/benefit for microservices is targeted at long term capabilities</li>
						</ul>
						<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
						<ol>
							<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
							<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
							<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
						</ol>
						<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
						<ul>
							<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-focus">
					<title>APIs are Front and Center</title>
					<ul>
						<li>The only visibility into a service is its API</li>
						<li>APIs should avoid letting their <q>implementation shine through</q></li>
						<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
						<ul>
							<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
							<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
						</ul>
						<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
					</ul>
				</slide>
				<slide id="surface">
					<title>Be Superficial</title>
					<ul>
						<li>The only thing that matters is the <em>service surface</em></li>
						<ul>
							<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
							<li>Resist the temptation to <em>expose your model</em> just because you can</li>
						</ul>
						<li>Concepts must be well-defined but not necessarily deeply modeled</li>
						<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
					</ul>
				</slide>
			</part>
			<part id="evolution">
				<title>Service Evolution</title>
				<slide id="autonomy-robustness">
					<title>Autonomy vs. Robustness</title>
					<ul>
						<li>APIs emphasize independence and autonomy of capabilities</li>
						<ul>
							<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
							<li>With no oversight at all the cost may add up on the consumer side</li>
							<li>Finding a harmonious balance between autonomy and guidelines is key</li>
						</ul>
						<li>There are two critical sides to the evolution part</li>
						<ol>
							<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
							<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
						</ol>
					</ul>
				</slide>
				<slide id="service-evolution">
					<title>Design for Service Evolution</title>
					<ul>
						<li>Services are designed with a certain goal and certain options</li>
						<ul>
							<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
							<li>The <em>options</em> are based on assumptions on how the service might change</li>
						</ul>
						<li>Service design is a balance between simplicity and flexibility</li>
						<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
						<ul>
							<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
							<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
							<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-evolution">
					<title>Design for Landscape Evolution</title>
					<ul>
						<li>Application flow should be guided by discovered controls</li>
						<ul>
							<li>A dynamic service landscape needs a dynamic way of discovering services</li>
							<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
						</ul>
						<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
						<ul>
							<li>Microservice usage may change over time as the landscape evolves</li>
							<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
						</ul>
						<li>If nobody links to some microservices, these will disappear over time</li>
						<ul>
							<li>Usage and linkage combined provide useful analysis data</li>
						</ul>
					</ul>
				</slide>
				<slide id="MSA-v">
					<title>The Three V's of Service Landscapes</title>
					<ul>
						<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
						<ul>
							<li>How big is the service landscape and can I get an overview of what's around?</li>
						</ul>
						<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
						<ul>
							<li>As a creator or consumer, how do I deal with different service designs?</li>
						</ul>
						<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
						<ul>
							<li>As the landscape evolves, how stable are services and their designs?</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-scale">
					<title>Service Landscape Scale</title>
					<ul>
						<li>Different environments have different ideas of MS scale</li>
						<ul>
							<li>Small projects may have a handful of services</li>
							<li>Large MS adopters may have hundreds or thousands of services</li>
						</ul>
						<li>Public APIs and microservice APIs combined mean a bigger API inventory</li>
						<li>Using any form of discovery may not be necessary from the start</li>
						<ul>
							<li>Consider the possibility when starting the MSA effort</li>
							<li>Having a plan helps teams to be aware of the need later on</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-diversity">
					<title>Service Landscape Diversity</title>
					<ul>
						<li>Not all services use the same technical foundations</li>
						<ul>
							<li>Different communications mechanisms</li>
							<li>Different metamodels (XML/JSON/RDF) for data models</li>
							<li>Different models for representing application concepts</li>
							<li>In a Web context, these are concepts such as <a href="http://webconcepts.info/concepts/http-header/">HTTP headers</a>, <a href="http://webconcepts.info/concepts/media-type/">media types</a>, and <a href="http://webconcepts.info/concepts/link-relation/">link relations</a></li>
						</ul>
						<li>Handling diversity can be challenging because of different <q>design universes</q></li>
						<ul>
							<li>Depending on choice, similar concepts/models may be represented differently</li>
							<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
						</ul>
						<li><em>Discovering descriptions</em> provides a better overview of the ecosystem</li>
						<ul>
							<li>A reality-based overview of the technology landscape</li>
							<li>A possible starting point or guideline for getting MSA teams started</li>
						</ul>
					</ul>
				</slide>
				<slide id="landscape-decentralization">
					<title>Service Landscape Decentralization</title>
					<ul>
						<li>Decentralization means no single point of control</li>
						<li>Decentralization means no automatic top-down visibility</li>
						<ul>
							<li><em>API gateways</em> are one way of improving visibility (and control)</li>
							<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
						</ul>
						<li>Complete and uncontrolled decentralization is an ideal</li>
						<ul>
							<li><em>Observe</em> how the MSA landscape develops</li>
							<li><em>Identify pain points</em> from the design and operational point of view</li>
							<li><em>Identify popular patterns</em> so that teams have a starting point</li>
							<li><em>Convincing teams</em> instead of mandatory guidelines</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="models-protocols">
			<title>API Models and Protocols</title>
			<part id="api-language">
				<title>APIs are Languages</title>
				<slide id="problem-solving">
					<title>Distributed Problem Solving</title>
					<ul>
						<li>APIs are part of distributed problem solving</li>
						<li>Ideal APIs can be used for a range of problems</li>
						<li>Problem-solving often requires combining APIs</li>
						<li><q>Language families</q> make it easier to learn and use new APIs</li>
					</ul>
				</slide>
				<slide id="api-conversation">
					<title>APIs Interactions are Conversations</title>
					<ul>
						<li>APIs support conversations between interacting peers</li>
						<ul>
							<li>Some conversations are point-to-point (how to find the peer?)</li>
							<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
							<li>Some conversations are point-to-ether (what does the ether do?)</li>
						</ul>
						<li>API technology does not determine the API conversation style</li>
						<ul>
							<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHooks</q> pattern)</li>
							<li>Synchronous conversations can be layered on top of asynchronous foundations</li>
						</ul>
						<li>Conversation goals should determine the conversation style</li>
					</ul>
				</slide>
				<slide id="rpc-over-http">
					<title>Tunnel Style: Distributed Programming</title>
					<ul>
						<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
						<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
						<li>Resource identifiers typically are context-dependent</li>
						<li>Suffers from the typical RPC problems at bigger scale</li>
						<ul>
							<li>Failure is hard to deal with (function calls always succeed)</li>
							<li>Scoped identifiers mean naming problems and no network effect</li>
						</ul>
						<li>Convenient for developers looking to <q>code like a local program</q></li>
					</ul>
				</slide>
				<slide id="webby-identifiers">
					<title>URI Style: Identifiers for Resources</title>
					<ul>
						<li>Makes a major step towards a more webby service design</li>
						<ul>
							<li>Resources are identified by URIs and thus globally unique</li>
							<li>Data context may be established by using URI identifiers for resources</li>
							<li>Navigational context is missing because of a lack of links</li>
						</ul>
						<li>One necessary step in the evolution of designing decentralized systems</li>
						<ul>
							<li><em>Web of Data</em> is a good starting point</li>
							<li><em>Web of Services</em> is what makes the Web what it is</li>
						</ul>
						<li>Developers are tempted/required to hardcode control flows</li>
						<ul>
							<li>No navigational guidance provided by the API</li>
							<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
						</ul>
					</ul>
				</slide>
				<slide id="webby-style">
					<title>Hypermedia Style: Webby APIs</title>
					<ul>
						<li>Based on mixing data and controls in representations</li>
						<ul>
							<li><em>Data</em> represents the current resource state</li>
							<li><em>Controls</em> represent the advertised next options for clients</li>
						</ul>
						<li>Controls allow clients to work across individual APIs</li>
						<ul>
							<li>APIs expose sets of resources and provide links</li>
							<li>Clients follow links without being aware of API boundaries</li>
						</ul>
						<li>Developers must code differently from usual programming flows</li>
						<ul>
							<li>Applications are driven by the responses that client code receives</li>
							<li>Imperative programming is not the best fit for this kind of flow</li>
						</ul>
					</ul>
				</slide>
				<slide id="fire-and-forget">
					<title>Asynchronous Style: Fire and Forget</title>
					<ul>
						<li>Synchronous communications result in tighter coupling between peers</li>
						<li>Asynchronous communications can make data provision easier</li>
						<ul>
							<li>Data is tagged and submitted into some <em>communications fabric</em></li>
							<li>The fabric takes care of notifying and delivering data to consumers</li>
						</ul>
						<li>The fabric is far beyond the <em>smart endpoints and dumb pipes</em> idea</li>
						<ul>
							<li><em>Smart pipes</em> are not bad per se but often have problems scaling</li>
						</ul>
						<li>Managing the fabric becomes an essential part of making code work</li>
						<ul>
							<li>Who is producing data?</li>
							<li>Who is consuming data?</li>
							<li>What are the ways in which data can or must be tagged?</li>
							<li>How is the namespace of data tagging managed?</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="protocols">
				<title>Protocols</title>
				<slide id="standard-types">
					<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
					<ul>
						<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
						<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
						<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
						<li><em>Open standards:</em> <q>Hello everybody! Let's solve this problem!</q></li>
					</ul>
				</slide>
				<slide id="xkcd-standards">
					<title>How Standards Proliferate</title>
					<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style="height : 65% ; margin : 4% ; "/>
				</slide>
				<slide id="ietf">
					<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
					<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="w3c">
					<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
					<img title="World Wide Web Consortium (W3C)" href="http://w3c.org/" src="w3c.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="http">
					<title>DNS &amp; HTTP</title>
					<p>The two basic protocols which every Web browser must implement are <em>DNS</em> access and <em>HTTP</em>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <em>TCP</em> support (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
					<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
				</slide>
				<slide id="http-messages">
					<title>HTTP Messages</title>
					<ul>
						<li>HTTP needs a reliable connection</li>
						<ul>
							<li>The foundation for HTTP is <em>TCP</em></li>
							<li>DNS resolution yields an IP address</li>
							<li>Open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
						</ul>
						<li>HTTP is a <em>text-based</em> protocol</li>
						<ul>
							<li>The connection is used to transmit <em>text messages</em></li>
							<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
							<li>Basic HTTP operations can be carried out by hand (e.g., per <code>telnet</code>)</li>
						</ul>
					</ul>
					<pre>start-line
message-header *

message-body ?</pre>
				</slide>
				<slide id="http-headers">
					<title>HTTP Header Fields</title>
					<ul>
						<li>Header fields contain information about the message</li>
						<ul>
							<li><em>General header:</em> <code>Date</code> as the message origination date</li>
							<li><em>Request header:</em> <code>Accept-Language</code> indicates language preferences</li>
							<li><em>Response header:</em> <code>Server</code> contains system information</li>
							<li><em>Entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
						</ul>
						<li>HTTP (and others) define <a href="http://webconcepts.info/concepts/http-header/">a number of header fields</a></li>
						<ul>
							<li>Unknown fields must be ignored (extensibility)</li>
						</ul>
						<li>HTTP is about acting on these fields</li>
						<ul>
							<li>HTTP defines what HTTP implementations must or should do</li>
						</ul>
					</ul>
				</slide>
				<slide id="http-performance">
					<title>HTTP Performance</title>
					<ul>
						<li>HTTP/1.0 allowed one transaction per connection</li>
						<ul>
							<li>TCP connection setup and teardown are expensive</li>
							<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
							<li>Typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
							<li>Typically, these resources are stored on the same server</li>
						</ul>
						<li>HTTP/1.1 introduces <em>persistent connections</em></li>
						<ul>
							<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
							<li>Additional requests to the same server use the same TCP connection</li>
						</ul>
						<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
						<ul>
							<li>Instead of waiting for a response, requests can be queued</li>
							<li>The server responds as fast as possible</li>
							<li>The order may not be changed (there is no sequence number)</li>
						</ul>
					</ul>
				</slide>
				<slide>
					<title>HTTP Connection Handling</title>
					<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-phttp-pipelining.png"/>
				</slide>
				<slide id="http2">
					<title>HTTP/2</title>
					<ul>
						<li>Started with the goal of <em>improving browser efficiency</em> (i.e., no API focus)</li>
						<ul>
							<li>Spearheaded by Google with its <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> approach for Chrome/Google connectivity</li>
						</ul>
						<li>Maintaining compatibility with HTTP/1.1 as much as possible</li>
						<ul>
							<li>Reuse the existing set of <a href="http://webconcepts.info/concepts/http-method/">request methods</a>, <a href="http://webconcepts.info/concepts/http-status-code/">status codes</a>, and most <a href="http://webconcepts.info/concepts/http-header/">header fields</a></li>
							<li>Allow peers to negotiate use of HTTP/1.1 and HTTP/2.0</li>
						</ul>
						<li>Advanced features for more efficient transmission and communications</li>
						<ul>
							<li>Headers can be compressed and repeated efficiently (binary transmission)</li>
							<li>Fully multiplexed avoiding blocking and other inefficiencies from ordered pipelining</li>
							<li><em>Server push</em> allows servers to send resources prior to getting requests</li>
						</ul>
						<li>Quick uptake through <a href="https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Protocol_support">support in all major browsers</a> and <a href="https://github.com/http2/http2-spec/wiki/Implementations">many servers</a></li>
					</ul>
				</slide>
				<slide id="mqtt">
					<title>Message Queue Telemetry Transport (MQTT)</title>
					<img src="mqtt-logo.png" href="https://mqtt.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
					<ul>
						<li>Initiated by IBM and similar in scope to <link href="amqp">AMQP</link></li>
						<ul>
							<li>Instead of AMQP's exchanges/queues, MQTT uses the concept of a <em>message broker</em></li>
							<li>Message brokers handle subscriptions and distribution to interested clients</li>
						</ul>
						<li>MQTT specifically targets constrained environments</li>
						<ul>
							<li><em>Small code foot print</em> in order to fit onto embedded devices</li>
							<li><em>Limited network bandwidth</em> to work in constrained networks</li>
						</ul>
						<li>Various <em>Quality of Service (QoS)</em> levels allow support for different networks</li>
						<ul>
							<li><em>At most once delivery</em> sends once and does not retry</li>
							<li><em>At least once delivery</em> resends until a confirmation has been received</li>
							<li><em>Exactly once delivery</em> suppresses duplicates on the receiver side</li>
						</ul>
						<li>Mostly, MQTT is used to funnel sensor readings into a collection point</li>
					</ul>
				</slide>
				<slide id="amqp">
					<title>Advanced Message Queueing Protocol (AMQP)</title>
					<img src="amqp-logo.jpg" href="https://www.amqp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
					<ul>
						<li>Originating in the world of financial institutions</li>
						<ul>
							<li>Typical scenarios are stock trading and other high-volume applications</li>
							<li>Protocols need to be optimized for speed and efficiency</li>
							<li>The goal is to efficiently route message from <em>producers</em> to <em>consumers</em></li>
							<li>An attempt to get out of lock-in of proprietary IBM protocols</li>
						</ul>
						<li>The basic AMQP model has four entities</li>
						<ul>
							<li><em>Producers</em> create messages and then publish them to exchanges</li>
							<li><em>Exchanges</em> receive messages and then distribute them to queue(s) using bindings</li>
							<li><em>Queues</em> store messages so that consumers can receive them</li>
							<li><em>Consumers</em> fetch messages from queues or get them by subscription</li>
						</ul>
						<li>AMQP is intended for large-scale but coordinated environments</li>
						<ul>
							<li>A good fit for settings where application development is centrally controlled</li>
							<li>A bad fit for an open and decentralized setting with management of exchanges/queues</li>
						</ul>
					</ul>
				</slide>
				<slide id="xmpp">
					<title>Extensible Messaging Protocol (XMPP)</title>
					<img src="xmpp-logo.png" href="http://xmpp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
					<ul>
						<li>Originally named <q>Jabber</q> and intended as an <em>open chat protocol</em></li>
						<ul>
							<li>Most chat systems are using closed and proprietary protocols</li>
							<li>XMPP allows an open ecosystem of chat services and clients to evolve</li>
						</ul>
						<li>Main development within IETF from 2002-2004</li>
						<li>XML was en vogue back then so the protocol is XML-based</li>
						<ul>
							<li>The entire client/server session is one XML document (a <a href="http://tools.ietf.org/html/rfc6120#section-4">stream</a>)</li>
							<li><q>Stream children</q> are XMPP's protocol data units (a <a href="http://tools.ietf.org/html/rfc6120#section-8">stanza</a>)</li>
							<li>XMPP <a href="http://tools.ietf.org/html/rfc6120#section-11">restricts XML</a> so that parsing is a bit simpler</li>
						</ul>
						<li>XMPP is specified as a generic core and an IM protocol</li>
						<ul>
							<li><a href="http://tools.ietf.org/html/rfc6120">XMPP Core (IETF RFC 6120)</a></li>
							<li><a href="http://tools.ietf.org/html/rfc6121">XMPP Instant Messaging and Presence (IETF RFC 6121)</a></li>
							<li><a href="http://tools.ietf.org/html/rfc6122">XMPP Address Format (IETF RFC 6122)</a></li>
						</ul>
					</ul>
				</slide>
				<slide id="websocket">
					<title>WebSocket: Non-HTTP Connectivity for Browsers</title>
					<img src="websocket-logo.png" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
					<ul>
						<li><code href="https://www.w3.org/TR/XMLHttpRequest2/">XMLHttpRequest</code> kicked off <em>Web 2.0</em> but is limited</li>
						<ul>
							<li>The first time Web apps can access the network to request information</li>
							<li>Allows non-XML content but is limited to HTTP request/response pattern</li>
						</ul>
						<li>WebSocket was initially part of HTML5 but then was spun off</li>
						<li>WebSocket is both an API and a protocol</li>
						<ul>
							<li>W3C publishes the <a href="http://www.w3.org/TR/websockets/">WebSocket API</a></li>
							<li>IETF publishes the <a href="http://webconcepts.info/specs/IETF/RFC/6455">WebSocket Protocol</a></li>
						</ul>
						<li>The WebSocket API allows web apps to open and use WebSocket connections</li>
						<ul>
							<li>Intended for any communications beyond HTTP's request/response pattern</li>
							<li>The most popular pattern are long-lasting connections for live updates</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
					<li>Picking the right model and protocol matters (and isn't trivial)</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/wind-tre-2017/"><code>dret.net/lectures/wind-tre-2017/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/wind-tre-2017/"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="security-testing.pdf">
		<title>API Authentication/Authorization and API Test Automation</title>
	</presentation>
	<presentation id="strategy-design">
		<title>API Strategy and API Design</title>
		<part id="strategy">
			<title>API Strategy</title>
		</part>
		<part id="design">
			<title>API Design</title>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/wind-tre-2017/"><code>dret.net/lectures/wind-tre-2017/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/wind-tre-2017/"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="development-management">
		<title>API Development and API Management</title>
		<part id="development">
			<title>API Development</title>
			<part id="microservices-pattern">
				<title>Microservices as a Pattern</title>
				<slide id="microservices-scalability">
					<title>Bottom-Up Motivation: Service Scalability</title>
					<ul>
						<li>Build modularized components that can be scaled individually</li>
						<ul>
							<li><em>Monitoring</em> allows insights into system status and load</li>
							<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
							<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
						</ul>
						<li>Microservice implementations are more flexible than integrated approaches</li>
						<ul>
							<li>Scaling can be done per service instead of scaling bigger deployment units</li>
							<li>Code can be retired more easily by removing services from deployment</li>
							<li>Fewer unintended side-effects since all interactions are through APIs</li>
						</ul>
					</ul>
				</slide>
				<slide id="microservices-digital-transformation">
					<title>Top-Down Motivation: Digital Transformation</title>
					<ul>
						<li>IT capabilities and management often are not aligned</li>
						<ul>
							<li><em>Capabilities</em> are growing and business demands are growing as well</li>
							<li><em>Management</em> becomes complex and impacts execution speed</li>
						</ul>
						<li>There is a difference in separating interfaces and implementations</li>
						<ul>
							<li><em>Interfaces</em> are useful for accessing capabilities</li>
							<li><em>Implementations</em> must support easy modifications and additions</li>
						</ul>
						<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
						<ul>
							<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
							<li>Agility suffers when implementations are not business-aligned</li>
							<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
						</ul>
					</ul>
				</slide>
				<slide id="msa-conway">
					<title>Conway's Law</title>
					<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				</slide>
				<slide id="soapy-soa">
					<title>The SOA Crisis</title>
					<ul>
						<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
						<li>MSA #1 goal is to create a loosely coupled service landscape</li>
						<ul>
							<li>Shared data storage creates coupling</li>
							<li>Shared infrastructure creates coupling</li>
							<li>Shared libraries create coupling</li>
							<li>Loose coupling allows to pick the right tool for the job</li>
							<li>Loose coupling allows to refactor/retire as required</li>
							<li>Loose coupling blurs the public/partner/private lines</li>
						</ul>
						<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
					</ul>
				</slide>
				<slide id="microservices-are-soa">
					<title>Microservices are SOA!</title>
					<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="microservices-are-good-soa">
					<title>Microservices are SOA done Right!</title>
					<ul>
						<li><em>Decouple implementations</em> and not just interfaces</li>
						<li><em>Velocity</em> is determined by how hard it is to make changes</li>
						<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
						<ul>
							<li>Providing access to capabilities is better than doing nothing</li>
							<li><em>Agile management of the capability landscape</em> goes further than that</li>
						</ul>
						<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
						<ul>
							<li>Implementation details are completely invisible to service users</li>
							<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
						</ul>
					</ul>
				</slide>
				<slide id="monolith">
					<title>The Dreaded Monolith</title>
					<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="msa-neat">
					<title>Microservices: The Starting Point</title>
					<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="msa-messy">
					<title>Microservices Over Time</title>
					<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="soapy-discovery">
					<title>Old School Discovery</title>
					<ul>
						<li>SOAP's answer to service discovery was UDDI</li>
						<ul>
							<li>The biggest failure of the SOAP Web Services stack</li>
							<li>Allowing only one specific kind of service design</li>
							<li>Focusing on the function signature as a service's main description</li>
						</ul>
						<li>Building directories from carefully described and categorized entries</li>
						<ul>
							<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
						</ul>
						<li>What does a Google of Service Discovery look like?</li>
						<ul>
							<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
							<li>Index description/documentation resources for subsequent discovery</li>
							<li>Add support for additional description/documentation formats as required</li>
						</ul>
					</ul>
				</slide>
				<slide id="ms-description-discovery">
					<title>Decentralize Description and Discovery</title>
					<ul>
						<li>MSA is all about making services more independent and self-contained</li>
						<ul>
							<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
						</ul>
						<li>Decentralized discovery is based on pulling/crawling diverse data</li>
						<ol>
							<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
							<li>Process these based on supported description/documentation formats</li>
							<li>Increase support if required by the evolving ecosystem</li>
							<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
						</ol>
						<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
					</ul>
				</slide>
			</part>
			<part id="msa-journey">
				<title>The MSA Journey</title>
				<slide id="change">
					<title>Transformation: Changing vs. Changeable</title>
					<ul>
						<li><em>Changing</em> implies a one-time activity</li>
						<li><em>Changeable</em> implies an intrinsic property</li>
						<blockquote>
							<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
						</blockquote>
					</ul>
				</slide>
				<slide id="balance">
					<title>Delicate Balance</title>
					<ul>
						<li><em>Preserve:</em> Functional core and business foundations</li>
						<li><em>Nourish:</em> Ability to change and situational awareness</li>
						<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
						<ul>
							<li><em>Individuals and interactions</em> over processes and tools</li>
							<li><em>Working software</em> over comprehensive documentation</li>
							<li><em>Customer collaboration</em> over contract negotiation</li>
							<li><em>Responding to change</em> over following a plan</li>
						</ul>
					</ul>
				</slide>
				<slide id="strangler">
					<title>Strangling the Monolith</title>
					<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="good-strangling">
					<title>How to Strangle Well</title>
					<ul>
						<li>Manage access to old/new capabilities through a router or gateway</li>
						<ul>
							<li>Transitioning is a management process old/new should be unaware of</li>
						</ul>
						<li>Data sync/update is a separately managed process</li>
						<ul>
							<li>Sophistication and cost of sync/update depends on consistency requirements</li>
							<li>When one of the services disappears sync/update can be removed</li>
						</ul>
						<li>Manage/monitor transition of service replacement</li>
						<ul>
							<li>At some point in time decommissioning may be the most economical option</li>
							<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="culture-and-organization">
				<title>Culture and Organization</title>
				<slide id="culture">
					<title>Cultural Changes</title>
					<ul>
						<li>Remove red tape and embrace diversity</li>
						<li>Business environments change faster than ever</li>
						<ul>
							<li><em>Common question:</em> How to change into a more successful organization</li>
							<li><em>Better question:</em> How to become an organization that is better at changing</li>
						</ul>
						<li>The Web succeeded because it out-innovated everything else</li>
						<ul>
							<li>Permissionless decentralized innovation</li>
							<li>Data-driven decisions (traffic drives visibility and success)</li>
							<li>Continuous change enabled through loose coupling</li>
						</ul>
					</ul>
				</slide>
				<slide id="organization">
					<title>Organizational Changes</title>
					<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
					<ul>
						<li>Learn from all of <em>Conway's laws</em></li>
						<ol>
							<li>Focus on communications (<q>Communication dictates design</q>)</li>
							<li>Support continuous process (<q>Be able to do it over</q>)</li>
							<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
							<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
						</ol>
					</ul>
				</slide>
				<slide id="evolution">
					<title>MSA Evolution</title>
					<ul>
						<li>Embrace change and start changing today</li>
						<ul>
							<li>Start small and learn by doing</li>
							<li>MSA management is about empowering</li>
						</ul>
						<li>MSA creates an environment that is designed to be change-friendly</li>
						<ul>
							<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
							<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="microservices-and-apis">
				<title>Microservices and APIs</title>
				<slide id="microservice-api">
					<title>There is no <q>Microservices API</q></title>
					<ul>
						<li>Microservices are all about <em>how to implement services</em></li>
						<li>APIs are all about <em>how to interact with services</em></li>
						<li>Microservices are an implementation detail from the API perspective</li>
						<li>Microservice-implemented APIs might exhibit certain properties</li>
						<ul>
							<li>Changing more often because of faster implementation cycles</li>
							<li>More diverse <em>API landscapes</em> because of more autonomy</li>
							<li>Smaller scope because of solutions targeted at specific problems</li>
						</ul>
					</ul>
				</slide>
				<slide id="microservice-api-design">
					<title>Designing Microservice APIs</title>
					<ul>
						<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
						<ul>
							<li>Microservice API design is no different from API design in general</li>
							<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
						</ul>
						<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
						<ul>
							<li>Microservices should have <em>freedom</em> to design their APIs</li>
							<li>API design should be driven by <em>design culture and patterns</em></li>
							<li>Microservices strategy needs to distill/document/distribute design patterns</li>
						</ul>
					</ul>
				</slide>
				<slide id="microservice-api-focus">
					<title>Focus Areas for Microservice APIs</title>
					<ul>
						<li>Be explicit about openness and extensibility</li>
						<li>Provide <em>glue</em> that makes combining services easy</li>
						<ul>
							<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
							<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
						</ul>
						<li>Be explicit about how services signal end-of-life</li>
					</ul>
				</slide>
			</part>
		</part>
		<part id="management">
			<title>API Management</title>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/wind-tre-2017/"><code>dret.net/lectures/wind-tre-2017/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/wind-tre-2017/"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>