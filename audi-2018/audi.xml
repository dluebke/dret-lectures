<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy-new" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="audi.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Audi, Ingolstadt, Germany</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-06">June 11/12, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction to APIs</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="introduction-team">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="schedule">
			<title>Workshop Schedule</title>
			<slide id="schedule-day-1">
				<title>Monday, June 11</title>
				<ul>
					<li>9.00-9.30: <link href="introduction"/></li>
					<li>9.30-10.15: <link href="foundations"/></li>
					<li>10.30-11.15: <link href="digital-transformation"/></li>
					<li>11.15-12.00: Exercise 1: Perfect API</li>
					<li>13.00-13.30: <link href="styles"/></li>
					<li>13.30-14.00: <link href="protocols"/></li>
					<li>14.00-14.30: <link href="design"/></li>
					<li>14.30-15.00: <link href="hypermedia"/></li>
					<li>15.15-15.45: <link href="openapi"/></li>
					<li>15.45-17.00: Exercise 2: Perfect API Design</li>
				</ul>
			</slide>
			<slide id="schedule-day-2">
				<title>Tuesday, June 12</title>
				<ul>
					<li>9.00-10.00: <link href="representations"/></li>
					<li>10.00-10.30: <link href="change-management"/></li>
					<li>10.45-11.30: Exercise 3: Perfect API Improvement</li>
					<li>11.30-12.00: <link href="semtech"/></li>
					<li>13.00-14.00: <link href="microservices"/></li>
					<li>14.00-14.30: <link href="standards"/></li>
					<li>14.30-15.00: API Stylebook</li>
					<li>15.15-16.30: Open Discussion</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="foundations">
		<title>Foundations</title>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title="API Maps: Hypermedia API Design">API Maps</a></toc>
		<part id="ui-api">
			<title>UIs and APIs</title>
			<slide id="distributed-systems">
				<title>Distributed Systems</title>
				<ul>
					<li>Any system that is not one integrated system has <em>components</em></li>
					<ul>
						<li>Components help to <em>separate</em> parts of the system</li>
						<li>Components must be able to <em>cooperate</em> for the system to work</li>
					</ul>
					<li>Distributed systems are always based on some model of component <em>interaction</em></li>
					<ul>
						<li><em>Tight coupling</em> means that it is harder to change or rearrange components</li>
						<li><em>Loose coupling</em> makes it easier for the system to be changed</li>
					</ul>
					<li>Interactions happen at well defined <em>interfaces</em> within the system</li>
				</ul>
			</slide>
			<slide id="interfaces">
				<title>Interfaces</title>
				<ul>
					<li>Interfaces are well-defined ways how components interact</li>
					<li>Interfaces allow <em>decoupling</em> by separating components</li>
					<li>Interfaces allow <em>cooperation</em> by defining <q>contracts</q> for interaction</li>
					<li><em>User Interfaces (UIs)</em> are a way how machines and humans communicate</li>
					<ul>
						<li><em>Command Line Interfaces (CLIs)</em> define text-based interactions through consoles</li>
						<li><em>Graphical User Interfaces (GUIs)</em> are based on visual metaphors and interactions</li>
					</ul>
					<li><em>Application Programming Interfaces (APIs)</em> are a way how machines communicate</li>
				</ul>
			</slide>
			<slide id="interfaces-and-coupling">
				<title>Interfaces and Coupling</title>
				<ul>
					<li>Interfaces allow to separate service production and consumption</li>
					<ul>
						<li><em>Web apps</em> allow users spontaneous access from any Web-enabled client</li>
						<li><em>Native apps</em> only work for supported platforms and after app download</li>
					</ul>
					<li><em>Loose coupling</em> improves scalability and agility</li>
					<ul>
						<li>Producers provide services and interfaces</li>
						<li>Consumers can use services without prior interaction or installation</li>
						<li>Both sides can make changes without the other side having to know</li>
					</ul>
				</ul>
			</slide>
			<slide id="browser-request">
				<title>Browsers speak HTTP</title>
				<ul>
					<li>Browser request Web pages (and required resources) via HTTP requests</li>
					<li>HTTP requests have a <em>request line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-request-minimal.txt"/>
				<listing src="http-get-request-chrome.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTTP</title>
				<ul>
					<li>Browser receive Web pages (and required resources) via <em>HTTP responses</em></li>
					<li>HTTP responses have a <em>status line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-response.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTML</title>
				<listing src="http-get-response.html"/>
			</slide>
			<slide id="html-layout">
				<title>HTML Structures are Layout Structures</title>
				<ul>
					<li>HTML is designed to help <em>browsers created a formatted page</em></li>
					<ul>
						<li>Formatting is based on elements for paragraphs, lists, tables, …</li>
						<li>HTML and browsers are not concerned with content or meaning</li>
					</ul>
					<li>HTML has a rather simple formatting model</li>
					<ul>
						<li>HTML is supposed to represent the fundamental layout structures</li>
						<li>Fine-tuning the layout can be done with <em>Cascading Style Sheets (CSS)</em></li>
					</ul>
					<li><em>HTML+CSS</em> are the foundation for statically formatted Web pages</li>
					<li>Dynamic pages also use <em>DOM+JavaScript</em> for creating a dynamic browser-based GUI</li>
				</ul>
			</slide>
			<slide id="screen-scraping">
				<title>Screen Scraping</title>
				<ul>
					<li>Screen scraping uses GUIs as APIs</li>
					<li>Layout and keywords and markup allow to <q>understand</q> the content</li>
					<li>Screen scraping is always brittle and requires sophisticated monitoring</li>
					<li>Sophisticated screen scraping is hard but can be relatively robust</li>
					<ul>
						<li>It is <em>much more robust</em> when client and server cooperate (i.e., update coordination)</li>
					</ul>
					<li><em>Always</em> prefer APIs over screen scraping when they are an option</li>
				</ul>
			</slide>
			<slide id="server-response-api-xml">
				<title>Machine-Readable Data (XML)</title>
				<listing src="http-get-response.xml"/>
			</slide>
			<slide id="server-response-api-json">
				<title>Machine-Readable Data (JSON)</title>
				<listing src="http-get-response.json"/>
			</slide>
			<slide id="gui-to-api">
				<title>From GUI to API</title>
				<ul>
					<li>Applications provide a variety of services for users</li>
					<ul>
						<li>In Web-style GUIs, these are available at various pages</li>
						<li>In SPA GUIs, these are available through various interaction paths</li>
						<li>In APIs, these are available according to the <em>API style</em></li>
					</ul>
					<li>APIs can use various style and two of them are inspired by the Web</li>
					<ul>
						<li><link href="uri-style"/> lists all <q>pages</q> based on their URIs or URI patterns</li>
						<li><link href="hypermedia-style"/> designs APIs as starting points and interaction paths</li>
					</ul>
					<li>API design follows a similar pattern to GUI design</li>
					<ul>
						<li>Start from use cases and design APIs that satisfy those use cases</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-product">
			<title>APIs are Products</title>
			<slide id="product-thinking">
				<title>Product Thinking</title>
				<ul>
					<li>Products are solutions for solving the problems of users</li>
					<ul>
						<li>Most users do not want to use a product, they want to solve a problem</li>
						<li>Understanding user problems leads to better product design and management</li>
						<li>Improving products should be focused on better solving user problems</li>
					</ul>
					<li>Products need to be managed throughout their full lifecycle</li>
					<ul>
						<li>Inception and design based on user stories</li>
						<li>Development and testing gathering feedback as early as possible</li>
						<li>Observing product usage and continuous improvement</li>
						<li>Retiring/replacing product as part of the overall lifecycle</li>
					</ul>
					<li>APIs are the visible/actionable part of problem-solving capabilities</li>
				</ul>
			</slide>
			<slide id="kaizen">
				<title>Kaizen: Continuous Improvement</title>
				<img title="Kaizen: Continuous Improvement" href="https://commons.wikimedia.org/wiki/File:Kaizen-1.svg" src="kaizen.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="product-evolution">
				<title>Product Consumers and Evolution</title>
				<ul>
					<li>APIs are <q>consumed</q> as a subscription-based activity</li>
					<ul>
						<li>APIs may change even if the consumers did not change anything</li>
						<li>Not breaking consumers is essential for scalable API management</li>
					</ul>
					<li>API consumers might use API products in unconventional ways</li>
					<ul>
						<li><em>Test servers</em> can help consumers to validate their implementations</li>
						<li><em>Production servers</em> should focus on maximizing operational stability</li>
						<li><em>Version freezes</em> allow consumers to never worry about possible updates</li>
					</ul>
					<li>Change management and versioning must be managed and communicated</li>
				</ul>
			</slide>
			<slide id="hyrums-law">
				<title>Hyrum's Law</title>
				<blockquote><q href="http://www.hyrumslaw.com/">With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.</q> (Hyrum Wright)</blockquote>
			</slide>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-product-maturity">
				<title>API Product Maturity</title>
				<ul>
					<li>Organizations must have safe and scalable API product management practices</li>
					<ul>
						<li>For internal APIs, this determines how quickly and safely the organization can change</li>
						<li>For external APIs, this determines how quickly and safely the organization can change course</li>
					</ul>
					<li><em>API Archaeology</em> can help to uncover existing APIs that nobody manages</li>
					<ul>
						<li>Integration projects between systems for specific interaction scenarios</li>
						<li><em>Accidental APIs</em> should be replaced by designed and managed ones</li>
					</ul>
					<li><em>API Management</em> has to be practiced by anybody producing/consuming APIs</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="digital-transformation">
		<title>Digital Transformation</title>
		<toc class="resources"><a href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" title='Gregor Hohpe, "Reverse Engineering the Organization", May 2018'>Reverse Engineering the Organization</a>&#160;· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<part id="digital-transformation-introduction">
			<title>Digital Transformation: Why?</title>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation-meme">
				<title>Digital Transformation</title>
				<img href="https://www.wallpaperflare.com/photography-of-angry-wolf-wallpaper-34084" src="digital-transformation-wolf.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation-status">
				<title>Digital Transformation Status</title>
				<img href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" src="cio-reporting-line.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services talk to each other <em>only</em> through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation-conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title short="Styles">API Styles</title>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<part id="api-language">
			<title>APIs are Languages</title>
			<slide id="problem-solving">
				<title>Distributed Problem Solving</title>
				<ul>
					<li>APIs are part of distributed problem solving</li>
					<li>Ideal APIs can be used for a range of problems</li>
					<li>Problem-solving often requires combining APIs</li>
					<li><q>Language families</q> make it easier to learn and use new APIs</li>
				</ul>
			</slide>
			<slide id="api-conversation">
				<title>APIs Interactions are Conversations</title>
				<ul>
					<li>APIs support conversations between interacting peers</li>
					<ul>
						<li>Some conversations are point-to-point (how to find the peer?)</li>
						<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
						<li>Some conversations are point-to-ether (what does the ether do?)</li>
					</ul>
					<li>API technology does not determine the API conversation style</li>
					<ul>
						<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHooks</q> pattern)</li>
						<li>Synchronous conversations can be layered on top of asynchronous foundations</li>
					</ul>
					<li>Conversation goals should determine the conversation style</li>
				</ul>
			</slide>
			<slide id="style-metaphors">
				<title>API Style Metaphors</title>
				<ul>
					<li><link href="tunnel-style"/>: Function calls in procedural programming</li>
					<li><link href="uri-style"/>: Data access objects</li>
					<li><link href="hypermedia-style"/>: Browsing the Web</li>
					<li><link href="query-style"/>: Databases and database queries</li>
					<li><link href="event-style"/>: Event-based programming</li>
				</ul>
			</slide>
		</part>
		<part id="tunnel-style">
			<title>Tunnel Style</title>
			<slide id="tunnel-style-image">
				<title>One Tunnel to Call them All</title>
				<img title="Tunnel Style" src="api-styles-tunnel.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="rpc-over-http">
				<title>Distributed Programming</title>
				<ul>
					<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
					<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
					<li>Resource identifiers typically are context-dependent</li>
					<li>Suffers from the typical RPC problems at bigger scale</li>
					<ul>
						<li>Failure is hard to deal with (function calls always succeed)</li>
						<li>Scoped identifiers result in naming challenges and compromised network effect</li>
					</ul>
					<li>Convenient for developers looking to <q>code like a local program</q></li>
				</ul>
			</slide>
		</part>
		<part id="uri-style">
			<title>URI Style</title>
			<slide id="uri-style-image">
				<title>Listing All Resources</title>
				<img title="URI Style" src="api-styles-uri.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-identifiers">
				<title>Identifiers for Resources</title>
				<ul>
					<li>Makes a major step towards a more webby service design</li>
					<ul>
						<li>Resources are identified by URIs and thus globally unique</li>
						<li>Data context may be established by using URI identifiers for resources</li>
						<li>Navigational context is missing because of a lack of links</li>
					</ul>
					<li>One necessary step in the evolution of designing decentralized systems</li>
					<ul>
						<li><em>Web of Data</em> is a good starting point</li>
						<li><em>Web of Services</em> is what makes the Web what it is</li>
					</ul>
					<li>Developers are tempted/required to hardcode control flows</li>
					<ul>
						<li>No navigational guidance provided by the API</li>
						<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-style">
			<title>Hypermedia Style</title>
			<slide id="hypermedia-style-image">
				<title>Linking All Resources</title>
				<img title="Hypermedia Style" src="api-styles-hypermedia.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-style">
				<title>Webby APIs</title>
				<ul>
					<li>Based on mixing data and controls in representations</li>
					<ul>
						<li><em>Data</em> represents the current resource state</li>
						<li><em>Controls</em> represent the advertised next options for clients</li>
					</ul>
					<li>Controls allow clients to work across individual APIs</li>
					<ul>
						<li>APIs expose sets of resources and provide links</li>
						<li>Clients follow links without being aware of API boundaries</li>
					</ul>
					<li>Developers must code differently from usual programming flows</li>
					<ul>
						<li>Applications are driven by the responses that client code receives</li>
						<li>Imperative programming is not the best fit for this kind of flow</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="query-style">
			<title>Query Style</title>
			<slide id="query-style-image">
				<title>Querying into Server-Side Models</title>
				<img title="Query Style" src="api-styles-query.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="database-style">
				<title>Querying Structured Data</title>
				<ul>
					<li>The API provides access to a rich interconnected data structure</li>
					<ul>
						<li>Clients know the data model and understand how to query it</li>
						<li>Clients want a small subset of the available data</li>
					</ul>
					<li>Querying into structure data needs an agreement on data and querying</li>
					<ul>
						<li>Query-style APIs define a <em>metamodel</em> that all data models must use</li>
						<li>Query-style APIs define a <em>query language</em> for querying data</li>
					</ul>
					<li><em>Loose coupling</em> depends on if and how clients adjust to schema changes</li>
					<ul>
						<li>Is it possible for clients to find out about schema changes?</li>
						<li>Do clients have to worry about schema changes?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="event-style">
			<title>Event-Based Style</title>
			<slide id="event-style-image">
				<title>Event Listening</title>
				<img title="Event-based Style" src="api-styles-event.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="fire-and-forget">
				<title>Fire and Forget</title>
				<ul>
					<li>Synchronous communications result in tighter coupling between peers</li>
					<li>Asynchronous communications can make data provision easier</li>
					<ul>
						<li>Data is tagged and submitted into some <em>messaging fabric</em></li>
						<li>The fabric takes care of notifying and delivering data to consumers</li>
					</ul>
					<li>The fabric is beyond the <em>smart endpoints and dumb pipes</em> idea</li>
					<ul>
						<li><em>Smart pipes</em> are not bad by itself but often have problems scaling</li>
					</ul>
					<li>Managing the fabric becomes an essential part of making code work</li>
					<ul>
						<li>Who is producing data?</li>
						<li>Who is consuming data?</li>
						<li>What are the ways in which data can or must be tagged?</li>
						<li>How is the namespace of data tagging managed?</li>
					</ul>
				</ul>
			</slide>
			<slide id="event-sourcing">
				<title>Event Sourcing: Durable Event Logs</title>
				<ul>
					<li>Application state is determined by events that have happened</li>
					<ul>
						<li>Application state can be re-created by replaying the sequence of events</li>
						<li>Persisting events becomes essential for representing application state</li>
					</ul>
					<li>Useful pattern for designs where auditing/accounting is a key component</li>
					<ul>
						<li>Application state is determined <em>as a function of the audit trail</em></li>
						<li>Auditing/Accounting by definition is in sync with application state</li>
						<li>Temporal reasoning becomes easier</li>
					</ul>
					<li><q>Isolation</q> from external events (input/output) becomes essential</li>
					<ul>
						<li><em>Event replay</em> may be needed to recreate application state</li>
						<li><em>Event replay</em> must be prevented from replaying external effects</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="choosing-style">
			<title>Choosing an API Style</title>
			<slide id="api-style-maslow">
				<title>API Styles are Tools</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-style-properties">
				<title>API Style Properties</title>
				<ul>
					<li>API styles influence important API properties</li>
					<ul>
						<li><em>Scalability:</em> Number of APIs, API teams, API consumers, and API interactions</li>
						<li><em>Usability:</em> Problem domain, established styles, available tooling</li>
						<li><em>Changeability:</em> BFF, known/unknown group of consumers</li>
						<li><em>Performance:</em> What are critical issues in known scenarios</li>
						<li><em>Reliability:</em> Operational concerns and centralization/decentralization</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-style-context">
				<title>Context Considerations</title>
				<ul>
					<li><em>Backend for Frontend (BFF)</em> implies tight coupling producer/consumer</li>
					<ul>
						<li>API style and API design can be coordinated with the consumer</li>
					</ul>
					<li><em>Private APIs</em> implies a smaller group of potential consumers</li>
					<ul>
						<li>Style and design can be guided by internal guidelines/practices</li>
					</ul>
					<li><em>Partner APIs</em> implies a well-known group of consumers</li>
					<ul>
						<li>Broader appeal to consumers necessary</li>
					</ul>
					<li><em>Public APIs</em> is the most loosely coupled group of consumers</li>
					<ul>
						<li>No control over consumers and their preferences/tools and development cycles</li>
					</ul>
				</ul>
			</slide>
			<slide id="style-implementations">
				<title>API Styles in the Wild</title>
				<ul>
					<li><link href="tunnel-style"/>: XML-RPC, SOAP, gRPC, Avro</li>
					<li><link href="uri-style"/>: OpenAPI/Swagger</li>
					<li><link href="hypermedia-style"/>: HAL, Siren, Atom</li>
					<li><link href="query-style"/>: GraphQL, OData, SPARQL</li>
					<li><link href="event-style"/>: MQ, WebSub, MQTT, XMPP, AMQP</li>
				</ul>
			</slide>
		</part>
		<part id="style-conclusions">
			<title>Conclusions</title>
			<slide id="no-style-hammer">
				<title>There is no Style Hammer</title>
				<ul>
					<li>API styles can be combined</li>
					<li>Style coherence makes a API landscape more usable</li>
					<li>Style fundamentalism may pick the wrong tool for a problem</li>
					<li>Be aware of styles and pick the one that works best</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="protocols">
		<title>Protocols</title>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://webconcepts.info/specs/IETF/RFC/7230" title='RFC 7230, "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing", June 2014'>HTTP</a>&#160;· <a href="https://www.mnot.net/blog/2017/05/11/status_codes" title='Mark Nottingham, "How to Think About HTTP Status Codes", May 2017'>HTTP Status Codes</a>&#160;· <a href="https://graphql.org/" title='GraphQL: A query language for your API'>GraphQL</a></toc>
		<part id="networks">
			<title>Computer Networks</title>
			<slide>
				<title>Network History</title>
				<ul>
					<li>First regarded as a convenient workaround for floppy disks</li>
					<ul>
						<li><q>Real computer scientists write compilers</q></li>
						<li>The value of computer networks depends on their size</li>
					</ul>
					<li>Early networking solutions were vendor-specific islands</li>
					<ul>
						<li>DECnet for <em>Digital Equipment Corporation (DEC)</em> customers</li>
						<li>XNS for <em>Xerox</em> customers</li>
						<li>SNA for <em>IBM</em> customers</li>
						<li>transmitting data between these networks was very cumbersome</li>
					</ul>
					<li>Bridging networks transparently became increasingly important</li>
					<ul>
						<li>More computers and networks increase the benefit of interconnections</li>
						<li>Layering being used for internetworks, not only for networks</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Networks vs. Internetworks</title>
				<ul>
					<li>Specific networks use specific abstractions</li>
					<ul>
						<li>How to address nodes (computers, phones, PDAs, RFID tags)</li>
						<li>How to address applications on these nodes</li>
						<li>How to transmit data to these applications</li>
					</ul>
					<li>Internetworks provide a network-independent abstraction</li>
					<ul>
						<li>Nodes are addressed uniformly (IP addresses)</li>
						<li>Applications are identified uniformly (ports)</li>
						<li>Data transmission uses one set of protocols (TCP/UDP)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet</title>
				<ul>
					<li>Very early start and a lot of experience</li>
					<ul>
						<li>Pragmatic and evolutionary approach</li>
						<li><q>If it's not broken, don't fix it</q></li>
					</ul>
					<li>Standardization by independent technical experts</li>
					<ul>
						<li>Avoids the <q>designed by committee</q> effect of consortia</li>
						<li>Conservative and concentrating on stability</li>
						<li>Implementations are required to prove technical feasibility</li>
						<li>Simplicity whenever possible</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet Protocols</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="internet-protocols.png" title="Internet Protocol Layers"/>
			</slide>
		</part>
		<part id="TCP">
			<title>Transmission Control Protocol (TCP)</title>
			<slide>
				<title>TCP Features</title>
				<ul>
					<li>Flow-controlled (avoiding congestion)</li>
					<li>Reliable (no data lost or duplicated)</li>
					<li>Connection-oriented</li>
					<li>Application addressing</li>
				</ul>
			</slide>
			<slide>
				<title>Reliable Connections</title>
				<ul>
					<li>IP may drop or duplicate packets</li>
					<ul>
						<li>TCP adds serial numbers in data packets</li>
						<li>If problems are detected, TCP recovers automatically</li>
					</ul>
					<li>TCP avoids network congestion and system overload</li>
					<ul>
						<li><em>Slow start</em> avoids flooding receivers with data they cannot process</li>
						<li><em>Fast retransmit</em> for avoiding timeouts when losing data</li>
						<li>A <em>Sliding window</em> for controlling the amount of outstanding packets</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>TCP Window</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="tcp-window.png"/>
			</slide>
		</part>
		<part id="http">
			<title>Hypertext Transfer Protocol (HTTP)</title>
			<slide>
				<title>DNS &amp; HTTP</title>
				<p>The two basic protocols which every Web browser must implement are <em>DNS</em> access and <em>HTTP</em>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <em>TCP</em> support (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
				<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
			</slide>
			<slide id="http-messages">
				<title>HTTP Messages</title>
				<ul>
					<li>HTTP needs a reliable connection</li>
					<ul>
						<li>The foundation for HTTP is <em>TCP</em></li>
						<li>DNS resolution yields an IP address</li>
						<li>Open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
					</ul>
					<li>HTTP is a <em>text-based</em> protocol</li>
					<ul>
						<li>The connection is used to transmit <em>text messages</em></li>
						<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
						<li>Basic HTTP operations can be carried out by hand (e.g., per <code>telnet</code>)</li>
					</ul>
				</ul>
				<pre>start-line
message-header *

message-body ?</pre>
			</slide>
			<slide id="http-headers">
				<title>HTTP Header Fields</title>
				<ul>
					<li>Header fields contain information about the message</li>
					<ul>
						<li><em>General header:</em> <code>Date</code> as the message origination date</li>
						<li><em>Request header:</em> <code>Accept-Language</code> indicates language preferences</li>
						<li><em>Response header:</em> <code>Server</code> contains system information</li>
						<li><em>Entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
					</ul>
					<li>HTTP (and others) define <a href="http://webconcepts.info/concepts/http-header/">a number of header fields</a></li>
					<ul>
						<li>Unknown fields must be ignored (extensibility)</li>
					</ul>
					<li>HTTP is about acting on these fields</li>
					<ul>
						<li>HTTP defines what HTTP implementations must or should do</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-request">
				<title>HTTP Requests</title>
				<ul>
					<li>After opening a connection, the client sends a request</li>
					<ul>
						<li>The method indicates the action to be performed on the resource</li>
						<li>HTTP's most interesting methods are: <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code></li>
					</ul>
					<li>The URI identifies the resource to which the request should be applied</li>
					<ul>
						<li>Absolute URIs are required when contacting <em>proxies</em></li>
						<li>Absolute paths are required when contacting a server directly</li>
						<li>The URI may contain <em>query information</em></li>
					</ul>
					<li>The <code>Host</code> header field must be included in every HTTP/1.1 request</li>
				</ul>
				<pre>Method Request-URI HTTP/Major.Minor
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-get">
				<title>HTTP GET</title>
				<ul>
					<li>Retrieval action based on the URI</li>
					<ul>
						<li>Possibly implemented by reading a file</li>
						<li>Possibly implemented by processing a file (PHP)</li>
						<li>Possibly implemented by running code</li>
					</ul>
					<li>Semantics may change based on header fields</li>
					<ul>
						<li><code>If-*:</code> only reply with the entity if necessary</li>
						<li><code>Range:</code> only reply with the requested part of the entity</li>
					</ul>
					<li>Cacheability depends on header fields of the response</li>
				</ul>
				<pre>GET / HTTP/1.1
Host: ischool.berkeley.edu</pre>
			</slide>
			<slide id="http-response">
				<title>HTTP Responses</title>
				<ul>
					<li>The server's response to acting on a request</li>
					<ul>
						<li>the status code is given numerically and as text</li>
						<li><code>2**</code> for variations of <q>ok</q></li>
						<li><code>3**</code> for redirections</li>
						<li><code>4**</code> are different client side problems (<code>404</code>: not found)</li>
						<li><code>5**</code> are different server side problems</li>
					</ul>
					<li>Header fields specify additional information</li>
					<ul>
						<li>Information about the server</li>
						<li>Information about the entity (media type, encoding, language)</li>
					</ul>
				</ul>
				<pre>HTTP/Major.Minor Status-Code Text
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-performance">
				<title>HTTP Performance</title>
				<ul>
					<li>HTTP/1.0 allowed one transaction per connection</li>
					<ul>
						<li>TCP connection setup and teardown are expensive</li>
						<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
						<li>Typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
						<li>Typically, these resources are stored on the same server</li>
					</ul>
					<li>HTTP/1.1 introduces <em>persistent connections</em></li>
					<ul>
						<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
						<li>Additional requests to the same server use the same TCP connection</li>
					</ul>
					<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
					<ul>
						<li>Instead of waiting for a response, requests can be queued</li>
						<li>The server responds as fast as possible</li>
						<li>The order may not be changed (there is no sequence number)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Connection Handling</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-phttp-pipelining.png"/>
			</slide>
			<slide>
				<title>HTTP Access Control</title>
				<ul>
					<li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> because of access control</li>
					<ul>
						<li><code>401 Unauthorized</code> means the resource is access controlled</li>
						<li><code>403 Forbidden</code> means the resource is inaccessible</li>
						<li><code>405 Method Not Allowed</code> signals a request using the wrong <link href="http-request">request method</link></li>
					</ul>
					<li>Two different approaches to unauthorized access are possible</li>
					<ul>
						<li>Repeat the HTTP request with the proper authentication credentials</li>
						<li>Redirect to a <q>authentication resource</q> for authentication</li>
					</ul>
				</ul>
			</slide>
			<slide id="http2">
				<title>HTTP/2</title>
				<ul>
					<li>Started with the goal of <em>improving browser efficiency</em> (i.e., no API focus)</li>
					<ul>
						<li>Spearheaded by Google with its <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> approach for Chrome/Google connectivity</li>
					</ul>
					<li>Maintaining compatibility with HTTP/1.1 as much as possible</li>
					<ul>
						<li>Reuse the existing set of <a href="http://webconcepts.info/concepts/http-method/">request methods</a>, <a href="http://webconcepts.info/concepts/http-status-code/">status codes</a>, and most <a href="http://webconcepts.info/concepts/http-header/">header fields</a></li>
						<li>Allow peers to negotiate use of HTTP/1.1 and HTTP/2.0</li>
					</ul>
					<li>Advanced features for more efficient transmission and communications</li>
					<ul>
						<li>Headers can be compressed and repeated efficiently (binary transmission)</li>
						<li>Fully multiplexed avoiding blocking and other inefficiencies from ordered pipelining</li>
						<li><em>Server push</em> allows servers to send resources prior to getting requests</li>
					</ul>
					<li>Quick uptake through <a href="https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Protocol_support">support in all major browsers</a> and <a href="https://github.com/http2/http2-spec/wiki/Implementations">many servers</a></li>
				</ul>
			</slide>
		</part>
		<part id="graphql">
			<title>GraphQL</title>
			<slide id="graphql-history">
				<title>GraphQL History</title>
				<img src="graphql-logo.png" href="http://graphql.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Facebook wanted a way for clients to more specifically query content</li>
					<ul>
						<li>Facebook's dataset is a very large interconnected graph</li>
						<li>Clients want specific parts of it depending on various context factors</li>
					</ul>
					<li>GraphQL is not an API but a language for building APIs</li>
					<ul>
						<li>GraphQL defines a type system and a query language that produces JSON results</li>
						<li>The query language can be integrated into an API <a href="http://graphql.org/learn/serving-over-http/">in a variety of ways</a></li>
					</ul>
					<li>GraphQL also has <a href="http://graphql.org/learn/queries/#mutations">mutations</a> as a way to update data</li>
					<ul>
						<li><a href="http://graphql.org/learn/schema/#input-types">Input types</a> look like types but only <em>accept input data</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="graphql-example">
				<title>Simple GraphQL Example</title>
				<table style="width: 90% ; ">
					<tr>
						<td style="vertical-align: top ; ">
							<listing src="graphql-simple-query.graphql" href="https://graphql.org/learn/schema/#type-system"/>
						</td>
						<td style="vertical-align: top ; ">
							<listing src="graphql-simple-response.json" href="https://graphql.org/learn/schema/#type-system"/>
						</td>
					</tr>
				</table>
			</slide>
			<slide id="graphql-types">
				<title>GraphQL Queries and Types</title>
				<table style="width: 90% ; ">
					<tr>
						<td style="vertical-align: top ; ">
							<listing src="graphql-query.graphql" href="https://graphql.org/"/>
						</td>
						<td style="vertical-align: top ; ">
							<listing src="graphql-types.graphql" href="https://graphql.org/"/>
						</td>
					</tr>
				</table>
			</slide>
		</part>
		<part id="protocol-conclusions">
			<title>Protocol Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="design">
		<title>Design</title>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/10/api-usability-matters.html" title='Erik Wilde, "API Usability Matters: UX and CX is like DX and …", October 2016'>API Usability</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a>&#160;· <a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a>&#160;· <a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a></toc>
		<part id="design-process">
			<title>Design as a Process</title>
			<slide id="design-eames">
				<title>Design and Constraints</title>
				<blockquote><q href="http://www.markwunsch.com/eames">Design depends largely on constraints.</q> (<a href="https://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles Eames</a>)</blockquote>
			</slide>
			<slide id="design-questions">
				<title>Design Questions</title>
				<ul>
					<li>Design is an iterative process to solve a given problem</li>
					<ol>
						<li>Identify a <em>problem</em> (provided externally or identified internally)</li>
						<li><em>Why</em> is the problem a problem?</li>
						<li>Identify the <em>constraints</em></li>
						<li><em>What</em> can be done to address the problem?</li>
						<li>Identify the possible solutions</li>
						<li><em>How</em> is the problem solved given the constraints?</li>
						<li>Assess design quality and repeat	</li>
					</ol>
				</ul>
			</slide>
			<slide id="api-lifecycle-design">
				<title>API Lifecycle and Design</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="messages-models">
			<title>Messages vs. Models</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
					<ul>
						<li>Expose <em>as little as possible</em> of the domain complexity</li>
						<li>Resist the temptation to <em>expose your domain model</em></li>
					</ul>
					<li>Interfaces are languages for communication</li>
					<ul>
						<li>They establish a language between API provider and consumer</li>
						<li>Keeping the language simple keeps the API usable</li>
					</ul>
					<li><q>Model Creep</q> is an obstacle for API adoption</li>
					<ul>
						<li>There is no <q>one true model</q> for any domain</li>
						<li>Keeping the language simple minimizes conflict potential</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-messages">
				<title>APIs and Messages</title>
				<ul>
					<li>Messages are the sentences in API communications</li>
					<ul>
						<li>They transport meaning between collaborating peers</li>
						<li>They are independent of how peers implement their activities</li>
					</ul>
					<li>Messages can follow patterns that make APIs easier to use</li>
					<ul>
						<li><link href="styles">API styles</link> are focusing on specific communication styles</li>
						<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, …)</li>
						<li><em>API models</em> add message models (SOAP, HAL, GraphQL, …)</li>
						<li><em>Vocabularies</em> help to describe specific APIs</li>
					</ul>
					<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
				</ul>
			</slide>
			<slide id="messaging-start">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction forms</q> to be as succinct as possible</li>
				</ul>
			</slide>
		</part>
		<part id="api-scope">
			<title>API Scope</title>
			<slide id="api-tool">
				<title>APIs as Tools</title>
				<ul>
					<li>APIs exist to solve specific problems</li>
					<ul>
						<li>Think about the problem and not the solution</li>
						<li>Design a <em>capability</em> that hides solution details</li>
					</ul>
					<li>Collaborate with consumers and gather their feedback</li>
					<ul>
						<li><q>API first</q> is all about driving solutions from the API</li>
						<li>Use approaches the make incremental design easy</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-maslow">
				<title>Tools and Problems</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-design-simple">
				<title>KISS API Design</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<li>There is no single correct path to well-designed APIs</li>
					<ul>
						<li>What is the capability that the API is exposing?</li>
						<li>What are the assumptions about API consumers?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="design-dx">
			<title>Developer Experience (DX)</title>
			<slide id="design-thinking">
				<title>Design Thinking</title>
				<ul>
					<li>Design is driven by creating products/solutions</li>
					<ul>
						<li>How well does the product address a given problem?</li>
						<li>How easy is the designed product to use?</li>
					</ul>
					<li>APIs often are <em>part of a bigger picture</em></li>
					<ul>
						<li>Developers have to use APIs to <em>design their applications</em></li>
						<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-integration">
				<title>Client-Side API Integration</title>
				<img title="Client-Side API Integration" src="apis-application-layers-integration.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="experience-api">
				<title>Experience API</title>
				<img title="Experience API" src="apis-application-layers-experience.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="design-coherence">
				<title>Design Coherence</title>
				<ul>
					<li>Establish a <em>culture of API design</em></li>
					<ul>
						<li><q>This is how APIs are usually looking</q></li>
						<li>Here are some tools to help with design and documentation</li>
						<li>Here is a breakdown of what the API landscape looks like</li>
					</ul>
					<li>Observing reality helps to document <em>and</em> establish culture</li>
					<ul>
						<li>One way to think of establishing coherence is by writing <em>guidelines</em></li>
						<li>An alternative path is to document and disseminate <em>existing practices</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="design-conclusions">
			<title>Design Conclusions</title>
			<slide id="design-culture">
				<title>Design Culture</title>
				<ul>
					<li>API design matters for making APIs successful</li>
					<li>API design should be established as shared best practices</li>
					<li>Culture is formed by practice and collaboration</li>
					<li>Steer culture with tooling for design and sharing</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="hypermedia">
		<title>Hypermedia</title>
		<toc class="resources"><a href="http://webconcepts.info/specs/IETF/RFC/8288" title='RFC 8288, "Web Linking", October 2017'>RFC 8288</a>&#160;· <a href="http://www.ustream.tv/recorded/102891495" title='Mike Amundsen, "Twelve Patterns for Hypermedia Microservices", Craft Conference, April 2017'>12 Patterns</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title='Erik Wilde, "API Maps: Hypermedia API Design", August 2016'>API Maps</a></toc>
		<part id="web-linking">
			<title>Web Linking</title>
			<slide id="typed-links">
				<title>Web Links are Typed Links</title>
				<ul>
					<li>Links are <em>possible paths</em> a client can follow to accomplish a goal</li>
					<ul>
						<li>Some links are typed through HTML markup (<code>&lt;img></code>, <code>&lt;form></code>, <code>&lt;link rel=""></code>)</li>
						<li>Many links are typed for human users (<code>&lt;a></code>)</li>
					</ul>
					<li>Links show the way but do not determine the destination</li>
					<ul>
						<li>Images can use various formats represented at runtime through the media type</li>
						<li>Clients can specify capabilities/preferences via HTTP</li>
					</ul>
					<li>Hypermedia as the engine of application state (HATEOAS)</li>
					<ul>
						<li>Clients start at a resource and with a certain goal</li>
						<li>They follow links based on resources they encounter and choices they make</li>
						<li>Application state is a result of a series of <em>link-driven interactions</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-web-linking">
				<title>Web Linking for APIs</title>
				<ul>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/8288">Web Linking</a> takes linking to the HTTP level</li>
					<ul>
						<li><a href="http://www.webconcepts.info/concepts/http-headers/Link"><code>Link</code> HTTP Header</a> for links on the HTTP level</li>
						<li>All links are typed and types are either registered or defined/used by individual users</li>
						<li>The <a href="http://www.iana.org/assignments/link-relations/link-relations.xhtml">link relations registry</a> establishes a shared set of meaningful link types</li>
					</ul>
					<li>Documenting hypermedia APIs always means to document all link relation types</li>
					<ul>
						<li><em>Registered link types</em> have to be put/described in the context of the API</li>
						<li><em>Extension link types</em> must be completely documented in the context of the API</li>
					</ul>
				</ul>
			</slide>
			<slide id="registered-link-types">
				<title>Registered Link Types</title>
				<ul>
					<li>Well-known link relation types are registered with IANA</li>
					<ul>
						<li>Registration can be done be anybody and follows a simple process</li>
						<li>Ideally the registry should reflect shared practices by the community</li>
					</ul>
					<li>Registered link relation types are simple strings</li>
					<ul>
						<li>Any simple name that is used should be described in the registry</li>
						<li>For specific/proprietary types it is possible to use <em>extension relation types</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-link-types">
				<title>Extension Link Types</title>
				<ul>
					<li>Non-registered link relation type can be invented and used by everybody</li>
					<ul>
						<li>These <em>extension link relation types</em> must be named with a URI</li>
						<li>Optionally, the URI may provide documentation for the link relation type</li>
					</ul>
					<li>Many hypermedia APIs use a mix of registered and extension types</li>
					<ul>
						<li>Use registered type when the registry provides ones that are a good fit</li>
						<li>Use extension types when no good fits can be found in the registry</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-overview">
			<title>Hypermedia Overview</title>
			<slide id="hypermedia-affordances">
				<title>Hypermedia and Affordances</title>
				<blockquote><q href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">When I say hypertext, I mean the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions.</q> (<a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>)</blockquote>
			</slide>
			<slide id="hypermedia-workflow">
				<title>Hypermedia and Workflows</title>
				<ul>
					<li>Hypermedia combines state representation and possible further interactions</li>
					<ul>
						<li>Resource state allows clients to understand the current content</li>
						<li>Links allow clients to learn about the possible next steps</li>
						<li>Clients select and follow a link based on their application goals</li>
					</ul>
					<li>Workflows are represented by providing navigation options (affordances)</li>
					<ul>
						<li>Making it easier for clients to be <q>driven by available options</q></li>
						<li>Seamless fabric of navigation across individual APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia-evolution">
				<title>Hypermedia and API Evolution</title>
				<ul>
					<li>Extensibility generally is a good idea for APIs</li>
					<ul>
						<li>Eliminates or reduces the need to do potentially expensive versioning</li>
					</ul>
					<li>Hypermedia representations by definition combine data and control elements</li>
					<ul>
						<li><em>Data extensibility</em> results in the usual benefits of allowing representations to evolve</li>
						<li><em>Control extensibility</em> results in the ability to add new workflow paths</li>
					</ul>
					<li>Hypermedia-based evolution has many patterns to choose from</li>
					<ul>
						<li><em>Incremental additions</em> can show up as new links in extension slots</li>
						<li><em>Complete new APIs</em> can be advertised as new start resources in <em>home documents</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-design">
			<title>Hypermedia Design</title>
			<slide id="representing-links">
				<title>Representing Links</title>
				<ul>
					<li>Hypermedia always is about mixing data and controls in representations</li>
					<ul>
						<li>Some scenarios can strictly separate the links and the data</li>
						<li>Other scenarios need links to be embedded in data to make sense</li>
					</ul>
					<li>At the very minimum links need a <em>target URI</em> to identify the link target</li>
					<ul>
						<li>Typically links are typed implicitly or explicitly for differentiation</li>
						<li>Links may also be decorated with <em>hints</em> for additional information</li>
					</ul>
					<li>Links representations are the information that clients have to make decisions</li>
					<ul>
						<li>Some link hints may help to choose between navigation paths</li>
						<li>Some link hints may be optimizations that <q>duplicate/mirror</q> HTTP mechanisms</li>
					</ul>
					<li>Links may also be represented in <a href="http://webconcepts.info/concepts/http-header/Link">the HTTP <code>Link</code> header field</a></li>
				</ul>
			</slide>
			<slide id="json-feed">
				<title>Link Representation (JSON Feed Format)</title>
				<listing src="json-feed.json" href="https://jsonfeed.org/version/1"/>
			</slide>
			<slide id="json-feed-xml">
				<title>Link Representation (XML Feed Format)</title>
				<listing src="json-feed.xml"/>
			</slide>
			<slide id="typed-links">
				<title>Typed Links</title>
				<ul>
					<li>Links represents navigational options for clients</li>
					<ul>
						<li>APIs include links that are advertised based on service and state</li>
						<li>Clients choose links based on application state and goals</li>
					</ul>
					<li>Link typing on the Web often is done using <a href="http://webconcepts.info/specs/IETF/RFC/8288">RFC 8288 <q>Web Linking</q></a></li>
					<ul>
						<li><em href="http://tools.ietf.org/html/rfc8288#section-2.1.1">Registered types</em> are simple strings using <a href="https://www.iana.org/assignments/link-relations/link-relations.xhtml">well-known values</a></li>
						<li><em href="http://tools.ietf.org/html/rfc8288#section-2.1.2">Extension types</em> are URIs which might choose to self-document their meaning</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/">Registered types</a> have documented but fuzzy meaning</li>
					<ul>
						<li>APIs need to document which types they use and what they mean</li>
						<li>Reusing existing types makes the <q>API language</q> easier to understand and use</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal">
				<title>Typed Links (HAL Format)</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="17-37"/>
			</slide>
		</part>
		<part id="hypermedia-formats">
			<title>Hypermedia Formats</title>
			<slide id="generic-specific">
				<title>Specific Hypermedia Formats</title>
				<ul>
					<li>Any format that mixes control and data is a hypermedia format</li>
					<ul>
						<li>Standard issues of how to define representations</li>
						<li>Additional issues of where and how to embed links as controls</li>
					</ul>
					<li>Depending on the metamodel and schema language varying support</li>
					<ul>
						<li>Not everybody likes using schema languages</li>
						<li>Many schema languages are focusing on grammars and data types</li>
						<li>Some schema languages at least have data types for URIs</li>
						<li>Few schema languages have explicit support for hypermedia</li>
					</ul>
				</ul>
			</slide>
			<slide id="generic-hypermedia">
				<title>Generic Hypermedia Formats</title>
				<ul>
					<li>Instead of designing hypermedia it's possible to use existing formats</li>
					<ul>
						<li>Generic formats often provide little more than data/control separation</li>
						<li>Domain focus results in semi-generic formats such as collection formats</li>
					</ul>
					<li>Hypermedia is more a pattern than it is format or technology</li>
					<ul>
						<li>Specific technologies may come with more constraints than benefits</li>
						<li>Never underestimate the benefits of reusing shared languages</li>
					</ul>
					<li>So far there is no clear trend towards a common generic format</li>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-conclusions">
			<title>Conclusions</title>
			<slide id="evolution-focus">
				<title>The Web Pattern</title>
				<ul>
					<li>Hypermedia is a pattern mixing data and controls</li>
					<li>Hypermedia provides a good foundation for API evolvability</li>
					<li>Clients need a more data-driven control flow</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="openapi">
		<title short="OpenAPI">OpenAPI (formerly known as Swagger)</title>
		<toc class="resources"><a href="https://github.com/OAI/OpenAPI-Specification" title="OpenAPI Specification Repository">OpenAPI</a>&#160;· <a href="http://openapi-map.apihandyman.io/?version=3.0" title="Interactive OpenAPI Map by Arnaud Lauret">OpenAPI Map</a></toc>
		<part id="openapi-intro">
			<title>OpenAPI Introduction</title>
			<slide id="openapi-basics">
				<title>OpenAPI Basics</title>
				<img src="openapi-logo.png" href="https://www.openapis.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Swagger started as an easy way to generate code from an API description</li>
					<ul>
						<li><em>Server code</em> is generated by generating stubs for all specified URI paths</li>
						<li><em>Client code</em> generates SDKs for clients by wrapping API interactions</li>
					</ul>
					<li><em>Swagger</em> was renamed to <em>OpenAPI</em> at the beginning of 2016</li>
					<ul>
						<li>Swagger still exists <a href="https://smartbear.com/">as a product suite</a> offered by <a href="https://swaggerhub.com/">SmartBear</a></li>
						<li><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">OpenAPI 3.0</a> is the first standalone OpenAPI version and was <a href="https://www.openapis.org/blog/2017/07/26/the-oai-announces-the-openapi-specification-3-0-0">released in July 2017</a></li>
					</ul>
					<li>OpenAPI is focused on <link href="uri-style"/> APIs by modeling APIs as sets of URI paths</li>
					<ul>
						<li>Paths can be templated and have operations and optionally parameters</li>
						<li>JSON support is built into OpenAPI for request/response schemas</li>
						<li>XML support is present but rather weak in terms of XML sophistication</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-yaml">
				<title>JSON and YAML</title>
				<ul>
					<li>JSON is the de-facto standard for structured data on the Web</li>
					<li>JSON is human-readable but visibly comes from a code background</li>
					<li><a href="http://yaml.org/" title="YAML Ain't Markup Language">YAML</a> evolved as a human-readable format for configuration data</li>
					<ul>
						<li>JSON data can be written in YAML for a more human-friendly syntax</li>
						<li>YAML has many additional features that JSON does not support</li>
					</ul>
					<li>OpenAPI is defined in JSON and allows JSON and YAML representations</li>
				</ul>
			</slide>
			<slide id="openapi-info-json">
				<title>OpenAPI Info Object (JSON)</title>
				<listing src="openapi-info.json" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="openapi-info-yaml">
				<title>OpenAPI Info Object (YAML)</title>
				<listing src="openapi-info.yaml" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="minimal-openapi-example">
				<title>Minimal OpenAPI Example</title>
				<ul>
					<li>Identification of the Swagger/OpenAPI version</li>
					<li>Minimal metadata about the described API</li>
					<li>URIs that are made available by the API</li>
					<li>Operations that can be performed on these URIs</li>
					<li>Responses to expect from these operations</li>
				</ul>
			</slide>
			<slide id="swagger-weather-json">
				<title>Minimal Swagger Example (JSON)</title>
				<listing src="swagger-weather.json"/>
			</slide>
			<slide id="swagger-weather-yaml">
				<title>Minimal Swagger Example (YAML)</title>
				<listing src="swagger-weather.yaml"/>
			</slide>
			<slide id="openapi-weather-json">
				<title>Minimal OpenAPI Example (JSON)</title>
				<listing src="openapi-weather.json"/>
			</slide>
			<slide id="openapi-weather-yaml">
				<title>Minimal OpenAPI Example (YAML)</title>
				<listing src="openapi-weather.yaml"/>
			</slide>
			<slide id="openapi-query-parameter">
				<title>Paths with Query Parameters</title>
				<ul>
					<li>URIs with Query Parameters: <code>/pets?limit=42</code></li>
				</ul>
				<listing src="petstore.yaml" line="10-23"/>
			</slide>
			<slide id="openapi-path-parameter">
				<title>Paths with Path Parameters</title>
				<ul>
					<li>URIs with Path Parameters: <code>/pets/somepetname</code></li>
				</ul>
				<listing src="petstore.yaml" line="56-68"/>
			</slide>
			<slide id="openapi-editor">
				<title>OpenAPI/Swagger Editor</title>
				<img title='Web-based interactive OpenAPI/Swagger editor' href="https://editor.swagger.io/" src="swagger-editor-petstore.png" class="fullsize"/>
			</slide>
			<slide id="openapi-map">
				<title>OpenAPI: The Complete Picture</title>
				<img title='OpenAPI Map by Arnau Lauret' href="http://openapi-map.apihandyman.io/?version=3.0" src="openapi-map.png" class="fullsize"/>
			</slide>
		</part>
		<part id="openapi-conclusions">
			<title>Conclusions</title>
			<slide id="openapi-summary">
				<title>Describing URI Style APIs</title>
				<ul>
					<li>OpenAPI describes APIs by listing all resource paths</li>
					<li>OpenAPI is often used to generate server/client code</li>
					<li>OpenAPI creates a static and tightly coupled API landscape</li>
					<li>Evolving OpenAPI APIs is not a core part of OpenAPI's mission</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="representations">
		<title>Representations</title>
		<toc class="resources"><a href="http://www.webconcepts.info/concepts/media-type/" title="Web Concepts: Media Types">Media Types</a>&#160;· <a href="http://www.w3.org/TR/xml/" title='Tim Bray, Jean Paoli, C. Michael Sperberg-McQueen, Eve Maler, and François Yergeau, "Extensible Markup Language (XML) 1.0 (Fifth Edition)", W3C Recommendation REC-xml-20081126, November 2008'>XML</a>&#160;· <a href="http://webconcepts.info/specs/IETF/RFC/8259" title='Tim Bray, "The JavaScript Object Notation (JSON) Data Interchange Format", IETF RFC 9259, December 2017'>JSON</a>&#160;· <a href="http://webconcepts.info/specs/IETF/RFC/4287" title='Mark Nottingham and Robert Sayre, "The Atom Syndication Format", IETF RFC 4287, December 2005'>Atom</a>&#160;· <a href="https://www.w3.org/TR/activitystreams-core/" title='James Snell and Evan Prodromou, "Activity Streams 2.0", W3C Recommendation REC-activitystreams-core-20170523, May 2017'>Activity Streams</a>&#160;· <a href="https://jsonfeed.org/">JSON Feed</a>&#160;· <a title='Yakov Shafranovich, "Common Format and MIME Type for Comma-Separated Values (CSV) Files", IETF RFC 4180, October 2005' href="http://webconcepts.info/specs/IETF/RFC/4180">RFC 4180</a>&#160;· <a title='Erik Wilde, "The &apos;profile&apos; Link Relation Type", Internet RFC 6906, March 2013' href="http://webconcepts.info/specs/IETF/RFC/6906">RFC 6906</a>&#160;· <a title='Mark Nottingham and Erik Wilde, "Problem Details for HTTP APIs", Internet RFC 7807, March 2016' href="http://webconcepts.info/specs/IETF/RFC/7807">RFC 7807</a></toc>
		<part id="intro">
			<title>Introduction</title>
			<slide id="digital-shadow">
				<title>Digital Shadows</title>
				<ul>
					<li><em>Digital Transformation</em> mirrors/designs/builds a world in the digital realm</li>
					<ul>
						<li>Represent your business (processes) in IT to allow automation</li>
						<li>Business transformation can be (more) easily executed on the IT side</li>
						<li>IT insights and changes directly translate to the business side</li>
					</ul>
					<li>IT always has been <em>modeling</em> and <em>implementing</em> <q>reality</q></li>
					<ul>
						<li><em>Essential complexity</em> is a result of domain complexity</li>
						<li><em>Accidental complexity</em> is a result of implementation complications</li>
					</ul>
				</ul>
			</slide>
			<slide id="resources">
				<title>Resources</title>
				<ul>
					<li>APIs are languages that allow providers and consumers to communicate</li>
					<ul>
						<li>API design is about supporting <em>conversations</em> between peers</li>
						<li><em>Conversations</em> revolve around resource <em>interactions</em></li>
						<li><em>Interactions</em> are about exchanging resource representations</li>
					</ul>
					<li>Resources are anything that the API language should talk about</li>
					<ul>
						<li>Resources can be real-world concepts such as <em>products</em></li>
						<li>Resources can be immaterial concepts such as <em>product descriptions</em></li>
						<li>Resources can be ephemeral concepts such as <em>product orders</em></li>
						<li>Resources can be temporary concepts such as <em>current orders for a product</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="digital-representations">
				<title>Digital Representations</title>
				<ul>
					<li>Resources are concepts on the service side</li>
					<ul>
						<li>They are essential to the service model</li>
						<li>Resources are not directly accessible or available</li>
						<li>Clients only use <em>representations</em> when interacting with services</li>
					</ul>
					<li>Separate shallow <em>service surfaces</em> and deep <em>service models</em></li>
					<ul>
						<li><em>Service surfaces</em> are minimal sets of representations and interactions</li>
						<li><em>Service models</em> are domain models for experts and implementers</li>
					</ul>
					<li>Separating surfaces and models reduces coupling</li>
				</ul>
			</slide>
			<slide id="vocabularies">
				<title>Vocabularies</title>
				<ul>
					<li>Vocabularies define the language for API interactions</li>
					<ul>
						<li>They help to understand the scope and breadth of resource representations</li>
					</ul>
					<li>Shallow and simple vocabularies are essential for loose coupling</li>
					<ul>
						<li>Shallowness avoids unnecessary details and deep model dependencies</li>
						<li>Simplicity allows clients to more easily understand the <em>API language</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="validation">
				<title>Validation</title>
				<ul>
					<li>Validation helps to enforce the proper use of the language</li>
					<ul>
						<li>Vocabularies define the <q>sentences of the API conversation</q></li>
						<li>Good vocabularies define where the language can be extended</li>
						<li>Good vocabularies define what to do when encountering extensions</li>
					</ul>
					<li>Validation only covers the individual representation exchanges</li>
					<ul>
						<li>Most API have constraints which go beyond representation validation</li>
						<li>Validating conversation patterns is beyond representation validation</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="what-how">
			<title>What and How to Represent</title>
			<slide id="representing-what">
				<title>What to Represent</title>
				<ul>
					<li>Representations are determined by the <link href="styles">API style</link></li>
					<ul>
						<li><link href="tunnel-style">Tunnel style</link> represents function calls (names and parameters/results)</li>
						<li><link href="uri-style">URI style</link> represents resources for CRUD operations</li>
						<li><link href="hypermedia-style">Hypermedia style</link> represents resource for REST interactions</li>
						<li><link href="query-style">Query style</link> represents queries and query results</li>
						<li><link href="event-style">Event-based style</link> represents events that are produced/consumed</li>
					</ul>
					<li>Some styles especially benefit from <q>common representation patterns</q></li>
					<ul>
						<li><em>Tunnel style</em> may benefit from a general schema for function names and parameters</li>
						<li><em>Event-based style</em> may benefit from a general schema for event names and parameters</li>
					</ul>
				</ul>
			</slide>
			<slide id="objects-vs-documents">
				<title>Objects vs. Documents</title>
				<ul>
					<li><em>Objects</em> follow the pattern of many common programming languages</li>
					<ul>
						<li>Objects are structured and allow nesting</li>
						<li>Object members are typed according to an existing set of types</li>
					</ul>
					<li><em>Documents</em> represent semi-structured data</li>
					<ul>
						<li>Documents often have more flexible schemas with more variations</li>
						<li>Document content is a mix of structural elements with textual data</li>
					</ul>
				</ul>
			</slide>
			<slide id="object-example">
				<title>Object Example (JSON)</title>
				<listing src="json-example.json"/>
			</slide>
			<slide id="document-example">
				<title>Document Example (XML)</title>
				<listing src="section.xml"/>
			</slide>
			<slide id="profiles">
				<title>Profiles</title>
				<ul>
					<li>Variations of representations often can serve different purposes</li>
					<ul>
						<li><em>Order forms</em> represent that a customer is ordering goods or services</li>
						<li><em>Anonymized orders</em> may be more safe to pass around for privacy reasons</li>
						<li><em>Enhanced orders</em> may contain additional details for specific order types</li>
					</ul>
					<li>Signalling underlying commonality makes it easy to reuse processing code</li>
					<li>Signalling <em>profiles</em> makes it possible to identify variations</li>
					<ul>
						<li>Profiles can be more constrained than the underlying type (within its limitations)</li>
						<li>Profiles can specifically extend the underlying type (within its limitations)</li>
					</ul>
					<li><a title='Erik Wilde, "The &apos;profile&apos; Link Relation Type", Internet RFC 6906, March 2013' href="http://webconcepts.info/specs/IETF/RFC/6906">RFC 6906</a> defines how to identify profiles and signal their usage</li>
					<ul>
						<li>Profiles must be identify by URI (which serves as an identifier)</li>
						<li>Profiles can be signaled through <code>profile</code> links and/or representation mechanisms</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="xml">
			<title>Extensible Markup Language (XML)</title>
			<slide id="xml-origins">
				<title>XML Origins and History</title>
				<ul>
					<li>Envisioned as a way for sites to publish their data models</li>
					<ul>
						<li>HTML is a simple and mostly presentation-oriented vocabulary</li>
						<li>Web sites should have the freedom to use their domain vocabularies</li>
						<li>CSS/XSLT stylesheets would then be used to render in the browser</li>
					</ul>
					<li>XML was the first open structured data format on the Internet/Web</li>
					<ul>
						<li><em>Web Services</em> took it at ran with it (and little else)</li>
						<li><em>JavaScript</em> replaced the declarative stylesheet dreams</li>
					</ul>
					<li>JSON replaced XML quickly when it became an alternative</li>
					<ul>
						<li>Direct mapping into the data structures of most programming languages</li>
						<li>No baggage of document-oriented design and related technologies (no <em>data binding</em>)</li>
						<li>Better fit for simple <q>on-the-wire</q> models</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-basics">
				<title>Basic Concepts: Elements and Attributes</title>
				<ul>
					<li>XML Documents have an <em>XML declaration</em> (optional)</li>
					<li>There is exactly one <em>document element</em> (a.k.a. <em>root element</em>)</li>
					<li>Elements may be nested (there is no conceptual limit)</li>
					<ul>
						<li>Elements may be repeated (they can be identified by position)</li>
					</ul>
					<li>Elements are marked up using <em>tags</em></li>
					<ul>
						<li>Most elements have content, surrounded by <em>start</em> and <em>end tags</em></li>
						<li>Empty elements are allowed and may use a special notation</li>
					</ul>
					<li>Elements may have attributes (zero to any number)</li>
					<ul>
						<li>Attributes can only occur once on an element (i.e., they cannot be repeated)</li>
					</ul>
				</ul>
				<listing src="my-first.xml"/>
			</slide>
			<slide id="xml-tree">
				<title>XML is Trees</title>
				<ul>
					<li>Markup is important, but only a notation</li>
					<li>XML documents are trees with different node types</li>
					<ul>
						<li>Node types so far: document, element, attribute, text</li>
					</ul>
					<img style="width : 90% ; margin : 4% ;" src="xml-tree.png" title="XML Document Tree"/>
				</ul>
			</slide>
			<slide id="xml-content-names">
				<title>XML Content and Names</title>
				<p>XML documents can use a wide array of characters. They are defined by <a href="http://www.unicode.org/">Unicode</a>, which in Version 5.0 defines more than 100'000 characters (#100'000 added in 2005).</p>
				<listing src="japanese1.xml"/>
				<listing src="japanese2.xml"/>
			</slide>
			<slide id="xml-elements">
				<title>Elements</title>
				<ul>
					<li>Elements can use a <a href="http://www.w3.org/TR/xml/#NT-Name">wide variety of names</a></li>
					<ul>
						<li>Allowed: <code>&lt;html></code>, <code>&lt;id9832798472></code>, <code>&lt;_></code>, <code>&lt;:></code>, <code>&lt;こんにちは></code></li>
						<li>Disallowed: leading numbers, spaces, control characters</li>
					</ul>
					<li>Element names usually convey some information about the content</li>
					<ul>
						<li>This is not reliable and highly language-dependent</li>
						<li>It is <em>extremely useful</em> when working with a known vocabulary</li>
						<li>It is <em>potentially harmful</em> when working with an unknown vocabulary</li>
					</ul>
					<li>Elements are the foundation for XML's versatility</li>
					<ul>
						<li>They can be nested (<code>&lt;address>&lt;city>Berkeley&lt;/city>&lt;zip>94709&lt;/zip>…</code>)</li>
						<li>They can be repeated (<code>&lt;givenname>Erik&lt;/givenname>&lt;givenname>Thomas&lt;/givenname></code>)</li>
						<li>Their sequence can convey additional information (e.g., given names have a sequence)</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-attributes">
				<title>Attributes</title>
				<ul>
					<li>Additional information pertaining to elements</li>
					<li>Traditionally, anything that is not considered <q>content</q></li>
					<ul>
						<li>SGML is a document markup language</li>
						<li>XML uses SGML's document-based concepts</li>
						<li>XML has its roots in the document world</li>
					</ul>
					<li>Elements: Content (i.e., Data); Attributes: Metadata</li>
					<li>Documents often distinguish by what is textual content</li>
				</ul>
				<listing src="section.xml" line="12-20"/>
			</slide>
		</part>
		<slide id="mixed-content">
			<title>Mixed Content</title>
			<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>
			<pre><![CDATA[<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>]]></pre>
			<img style="width : 90% ; margin : 4% ;" src="mixed-content.png" title="XML tree for mixed content"/>
		</slide>
		<slide id="mixed-content-usage">
			<title>Mixed Content Usage</title>
			<ul>
				<li>Database people find mixed content rather irritating</li>
				<ul>
					<li>Cannot be easily mapped to relational structures</li>
					<li>Is more <em>document-like</em> than <em>data-like</em></li>
					<li>Much harder to optimize for query analysis and query processing</li>
				</ul>
				<li>Document people find mixed content very intriguing</li>
				<ul>
					<li>Textual content can still be used as simple text</li>
					<li>Markup provides additional information for rich text</li>
					<li>Start with a text-only document and use markup to add structure to it</li>
				</ul>
			</ul>
		</slide>
		<slide>
			<title>Semantics</title>
			<ul>
				<li>XML is a language for encoding trees</li>
				<ul>
					<li>Elements and attributes are labeled nodes in this tree</li>
					<li>The labels can be chosen freely by document authors</li>
				</ul>
				<li>The tree's meaning is nothing XML is concerned with</li>
				<ul>
					<li>Peers must have a mutual understanding of the semantics</li>
					<li>XML without mutual understanding is almost useless</li>
					<li>Reverse engineering often is possible, but it is risky and brittle</li>
				</ul>
			</ul>
		</slide>
		<part id="json">
			<title>JavaScript Object Notation (JSON)</title>
			<slide id="json-xml">
				<title>JSON and XML</title>
				<ul>
					<li>JSON replaced XML very quickly because of its simplicity</li>
					<ul>
						<li>JSON is mostly used for <q>on-the-wire</q> models</li>
						<li>XML is intended for document representation, storage, and processing</li>
					</ul>
					<li>JSON's main advantage over XML is its object-orientation</li>
					<ul>
						<li>JSON can be directly mapped into most language's native data structures</li>
						<li>XML needs tree model processing or some form of data-binding</li>
					</ul>
					<li>JSON has no notion of vocabularies or namespaces</li>
					<ul>
						<li>XML's complexity and complications are not needed in most cases</li>
						<li>Composing JSON vocabularies is much more brittle than in XML</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-basics">
				<title>JSON Basics</title>
				<ul>
					<li>JSON is the <q>data structure part</q> of JavaScript</li>
					<ul>
						<li>Perfect match for client code consuming JSON data</li>
						<li>Very good match for many other languages with structured data types</li>
					</ul>
					<li>JSON is good for <em>data-on-the-wire</em> and not so much for complex models</li>
					<li>JSON has found its way into many typical IT components</li>
					<ul>
						<li>Some databases use JSON as their native data model (<a href="https://www.mongodb.com/">MongoDB</a>)</li>
						<li>Many databases have added JSON to their data type support</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-structure">
				<title>JSON Structure</title>
				<ul>
					<li>JSON has a small set of data types</li>
					<ul>
						<li><code>object</code>s are a set of name/value pairs called <em>members</em></li>
						<li><code>array</code>s are a sequence of potentially heterogeneous values</li>
						<li><code>number</code>s use regular decimal notation with an optional exponent</li>
						<li><code>string</code>s are quoted with escape for special characters and Unicode</li>
						<li><code>boolean</code>s use the two values <code>true</code> and <code>false</code></li>
					</ul>
					<li>Objects and arrays can be nested as deeply as required</li>
				</ul>
			</slide>
			<slide id="json-example">
				<title>JSON Example</title>
				<listing src="json-example.json"/>
			</slide>
		</part>
		<part id="more-representation">
			<title>More Representation Formats</title>
			<slide id="collection-formats">
				<title>Collections as a Pattern</title>
				<ul>
					<li>Collections and their management is a common design pattern</li>
					<ul>
						<li>Often some form of similarity/commonality across collection members</li>
					</ul>
					<li>Re-inventing collection formats might be a good design choice</li>
					<ul>
						<li><a href="http://webconcepts.info/specs/IETF/RFC/4287" title='Mark Nottingham and Robert Sayre, "The Atom Syndication Format", IETF RFC 4287, December 2005'>Atom</a> is XML-based and has <a href="http://dret.typepad.com/dretblog/atom-landscape.html">many additional features</a></li>
						<li><a href="https://jsonfeed.org/">JSON Feed</a> is a JSON-based variant of Atom</li>
						<li><a href="https://www.w3.org/TR/activitystreams-core/">Activity Streams</a> focuses on activity publishing/syndication</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-problem">
				<title>HTTP Problem Details</title>
				<ul>
					<li><a href="http://webconcepts.info/concepts/http-status-code/">HTTP status codes</a> are useful but minimalistic</li>
					<ul>
						<li>Their well-defined semantics allow intermediaries to act on them</li>
						<li>Servers may want to convey additional information with them</li>
					</ul>
					<li>APIs may include <em>problem details</em> as part of their representation designs</li>
					<ul>
						<li>Using a standard reduces the design work on the server side</li>
						<li>Using a standard allows developers to more easily understand the design</li>
						<li>Using a standard allows problem details analysis across APIs</li>
					</ul>
					<li><a title='Mark Nottingham and Erik Wilde, "Problem Details for HTTP APIs", Internet RFC 7807, March 2016' href="http://webconcepts.info/specs/IETF/RFC/7807">RFC 7807</a> defines a JSON-centric model for problem details</li>
					<ul>
						<li><code>application/problem+json</code> is a JSON-based representation of the problem detail model</li>
						<li><code>application/problem+xml</code> is an XML-based representation of the problem detail model</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-problem-json">
				<title>HTTP Problem: JSON</title>
				<listing href="https://tools.ietf.org/html/rfc7807#section-3" src="http-problem.json"/>
			</slide>
			<slide id="http-problem-xml">
				<title>HTTP Problem: XML</title>
				<listing href="https://tools.ietf.org/html/rfc7807#appendix-A" src="http-problem.xml"/>
			</slide>
		</part>
		<part id="representation-conclusions">
			<title>Conclusions</title>
			<slide id="language-matters">
				<title>Language Matters</title>
				<ul>
					<li>APIs are languages</li>
					<li>Representations are language sentences</li>
					<li>Design and document the language of each API</li>
					<li>Choosing a metamodel is a question of API, context, and taste</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="change-management">
		<title short="Change Management">Change Management and Versioning</title>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a>&#160;· <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-sunset-header" title='Erik Wilde, "The Sunset HTTP Header", Internet Draft wilde-sunset-header'>Sunset Header</a></toc>
		<part id="change-management-introduction">
			<title>Introduction</title>
			<slide id="versioning-practice">
				<title>Versioning in Practice</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>But often they are only useful for signaling continuity or breakage points</li>
						<li>Most things work or break in a binary way (or simply refuse to even try)</li>
					</ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility</em> means to work with older components</li>
						<li><em>Forward compatibility</em> means to work with more advanced components</li>
					</ul>
					<li>The Web has good rules to support both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility:</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
				</ul>
			</slide>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have and document a plan for API evolution</li>
						<li>The simplest possible plan may be to never change the API</li>
					</ul>
					<li>Extensibility should be made easy for API consumers</li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li>Extension points make it clear where to expect extensions</li>
						<li>Processing models make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="extensibility-examples">
			<title>Extensibility Examples</title>
			<slide id="extensibility-content">
				<title>Extensibility of Content</title>
				<ul>
					<li>Extending content can be done by <em>additive</em> changes to the content</li>
					<ul>
						<li><em>Adding properties</em> to the existing content model</li>
						<li><em>Limiting properties</em> to a more constraining appearance/value model</li>
					</ul>
					<li>Extension can never change the semantics of existing content</li>
					<ul>
						<li><em>Ignoring</em> extensions always must be a safe thing to do</li>
						<li><em>Dependencies across extensions</em> should be avoided if possible</li>
					</ul>
					<li>Specifying <em>extension points</em> depends on the representation format</li>
				</ul>
			</slide>
			<slide id="extensible-content-xml">
				<title>XML Content Extension</title>
				<listing src="address.xml"/>
				<listing src="address-extended.xml"/>
			</slide>
			<slide id="extensible-content-xsd">
				<title>XML Content Extension: XSD Schema</title>
				<listing src="address.xsd"/>
			</slide>
			<slide id="extensible-content-json">
				<title>JSON Content Extension</title>
				<listing src="address.json"/>
				<listing src="address-extended.json"/>
			</slide>
			<slide id="extensibility-control">
				<title>Extensibility of Controls</title>
				<ul>
					<li>Controls expose new paths of the workflow available to clients</li>
					<ul>
						<li>New paths should not have any impact on existing paths</li>
						<li>Existing clients should ignore those paths</li>
					</ul>
					<li>Hypermedia formats should be based on controls being an open set</li>
					<ul>
						<li>Specifics on how to add and handle extensions depend on the format</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal-extension">
				<title>Extending Controls in HAL</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="30-37"/>
				<listing src="hal-extended.json"/>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers follow the <code>MAJOR.MINOR.PATCH</code> pattern and the following rules</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for incompatible API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
					</ul>
					<li>Mostly about how to name implementation artifacts but also applicable to APIs</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
					</ul>
				</ul>
			</slide>
			<slide id="service-api-version">
				<title>Service vs. API Version</title>
				<ul>
					<li><em>Service versions</em> may be internal information only</li>
					<ul>
						<li>Implementation information does not have to shown up in the API</li>
						<li>For internal/trusted/open cases service and API may be the same thing</li>
					</ul>
					<li><em>API versions</em> are about changes that may affect consumers</li>
					<ul>
						<li><code>PATCH</code> does not change API design or behavior apart from increasing quality</li>
						<li><code>MINOR</code> does change API behavior but in a safe way</li>
						<li><code>MAJOR</code> changes API behavior in ways that require client adaptations</li>
					</ul>
					<li><code>PATCH</code>/<code>MINOR</code> may make sense to expose inside the API</li>
					<li><code>MAJOR</code> means that there is a <em>different API</em> for the <em>same service</em></li>
				</ul>
			</slide>
			<slide id="version-identification">
				<title>Identifying Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions at the API level</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to use in the general Web fabric</li>
						<li>Media types often are not used by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used <em>anywhere</em> in the URI path</li>
					</ul>
				</ul>
			</slide>
			<slide id="linking-versions">
				<title>Linking Versions</title>
				<ul>
					<li>Communicating versions via links works better than naming schemes</li>
					<ul>
						<li>APIs remain self-contained as long as consumers are working with one version</li>
						<li>APIs are brought into context when consumers want versioning information</li>
					</ul>
					<li><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a> defines link relations for <q>simple version navigation</q></li>
					<ul>
						<li><code>successor-version</code> links to the newer version of the API</li>
						<li><code>latest-version</code> links to the newest version of the API</li>
						<li><code>predecessor-version</code> links to the older version of the API</li>
						<li><code>version-history</code> links to a resource about the version history</li>
					</ul>
					<li>Plays well with <em>home documents</em> and their role for an API</li>
					<ul>
						<li>APIs share home documents or at least version histories across versions</li>
						<li>Versioning links are used to allow navigation across all API versions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="decommissioning">
			<title>Decommissioning</title>
			<slide id="http-sunset">
				<title>Signaling API End-of-Life</title>
				<ul>
					<li>APIs can change in terms of features and will be decommissioned at some point</li>
					<ul>
						<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
						<li><em>Hypermedia</em> helps as a pattern to move extensibility beyond data models</li>
						<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
						<li><a href="http://dret.typepad.com/dretblog/2015/08/http-sunset-header.html">HTTP <code>Sunset</code>ting</a> can be used to <a href="http://webconcepts.info/concepts/http-header/Sunset">signal upcoming sunsets on the HTTP level</a></li>
					</ul>
					<li>One possible requirement is that APIs must support <code href="http://webconcepts.info/concepts/http-header/Sunset">Sunset</code></li>
					<ul>
						<li>Services must document/describe the support of <code>Sunset</code></li>
						<li>Services may implement <code>Sunset</code> any way they like</li>
						<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="change-management-conclusions">
			<title>Conclusions</title>
			<slide id="plan-for-evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="semtech">
		<title>Semantic Technologies</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://www.w3.org/TR/rdf11-concepts/" title='Richard Cyganiak, David Wood, and Markus Lanthaler, "RDF 1.1 Concepts and Abstract Syntax", W3C Recommendation REC-rdf11-concepts-20140225, February 2014'>RDF</a>&#160;· <a href="http://dret.typepad.com/dretblog/2011/05/from-ai-to-bi.html" title='Erik Wilde, "From AI to BI", May 2011'>From AI to BI</a>&#160;· <a href="http://5stardata.info/">5★ Open Data</a>&#160;· <a href="http://webdata.systems/" title="How to publish data on the Web. Web Data principles help you to be open and webby.">Web Data</a></toc>
		<part id="semantics">
			<title>Semantics and the Semantic Web</title>
			<slide id="semantics-what">
				<title>What are Semantics?</title>
				<ul>
					<li><em>Semantics</em> are anything that is concerned with <em>representing meaning</em></li>
					<ul>
						<li>Most applications are associating models with meaningful concepts for users</li>
					</ul>
					<li><em>Semantics</em> in a narrower sense often refer to <em>logic-based representations</em></li>
					<ul>
						<li>Statements rooted in formal logic can be used for <em>inferring new statements</em></li>
						<li><q>Berlin is in Germany, and Germany is in Europe, therefore Berlin is in Europe</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-web">
				<title>Semantic Web</title>
				<ul>
					<li>Make statements about <q>facts</q> in a shared metamodel</li>
					<li>Provide a framework for combining <q>facts</q> and deriving new ones</li>
					<li>Statements are made in a webby way (URIs as the identity model)</li>
				</ul>
			</slide>
			<slide id="identity-web">
				<title>Identity on the (Semantic) Web</title>
				<ul>
					<li>Communications need shared concepts</li>
					<ul>
						<li>This is true regardless of whether formal semantics come into play</li>
					</ul>
					<li>The Web's identity model (URIs) is global, federated, and extensible</li>
					<ul>
						<li>If you want to talk about <q>anything</q> use a URI to identify it</li>
						<li>Works well but the resulting noise makes it impractical</li>
						<li>Reserve URI identification for context-free concept identification</li>
					</ul>
				</ul>
				<listing src="number-concept.txt"/>
			</slide>
			<slide id="identity-value">
				<title>The Value of Identity</title>
				<ul>
					<li>Sharing meaning becomes harder and more powerful with group size</li>
					<ul>
						<li>More users need to agree on shared meaning</li>
						<li>More users/applications can build on shared concepts (network effect)</li>
					</ul>
					<li>Sharing meaning can happen at various levels</li>
					<ol>
						<li><em>License copy/paste:</em> Reuse the license text when the license is reused</li>
						<li><em>License with human-understandable name:</em> Use a license name that is well-established</li>
						<li><em>License with machine-readable name:</em> Use a license URI that machines can recognize and compare</li>
						<li><em>Machine-understandable license:</em> Use a formal model of what the license does</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="rdf">
			<title>Resource Description Framework (RDF)</title>
			<slide id="rdf-roots">
				<title>Describing Resources</title>
				<ul>
					<li>RDF started as a generalization of <span title="Platform for Internet Content Selection">PICS</span></li>
					<ul>
						<li>A way to simple make <em>statements</em> about URI-identified resources</li>
						<li>Statements are using <em>(Subject, Predicate, Object)</em> triples</li>
					</ul>
					<li>Statements can be aggregated and result in a graph-oriented data model</li>
					<ul>
						<li><em>Subject</em> (URI): The resource the statement is about</li>
						<li><em>Predicate</em> (URI): The kind of statement being made</li>
						<li><em>Object</em> (URI or literal): The statement that is being made</li>
					</ul>
					<li>The aggregate graph can be interpreted as a set of interconnected statements</li>
				</ul>
			</slide>
			<slide id="triple-example">
				<title>Triple Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-triple" src="rdf11-primer-example-triples.txt"/>
			</slide>
			<slide id="two-rdf-views">
				<title>Two Views of RDF</title>
				<ul>
					<li>The <em>logic view</em> sees the graph as a set of interconnected statements</li>
					<ul>
						<li>Statements are at the center of this perspective</li>
						<li>Merging graphs is mainly an act of merging statements</li>
					</ul>
					<li>The <em>graph view</em> sees the graph as a triple-based data structure</li>
					<ul>
						<li>Merging graphs based on node identity is the main concern</li>
						<li>Having elaborate schemas of statement types is not a necessity</li>
					</ul>
					<li>Both views are complementary but influence the models and tooling</li>
				</ul>
			</slide>
			<slide id="triple-graph">
				<title>Triples as a Graph</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="rdf11-primer-example-graph.jpg" title="Informal graph of the sample triples" href="https://www.w3.org/TR/rdf11-primer/#section-triple"/>
			</slide>
			<slide id="triple-graph">
				<title>Triples as a Graph</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="rdf11-primer-example-multiple-graphs.jpg" title="Informal graph of the sample dataset" href="https://www.w3.org/TR/rdf11-primer/#section-multiple-graphs"/>
			</slide>
			<slide id="n-triples-example">
				<title>N-Triples Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-n-triples" src="rdf11-primer-example-n-triples.txt"/>
			</slide>
			<slide id="turtle-example">
				<title>Turtle Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-turtle" src="rdf11-primer-example-turtle.txt"/>
			</slide>
			<slide id="trig-example">
				<title>TriG Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-trig" src="rdf11-primer-example-trig.txt"/>
			</slide>
			<slide id="json-ld-example">
				<title>JSON-LD Example</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-json-ld" src="rdf11-primer-example-json-ld.json"/>
			</slide>
			<slide id="json-ld-example-context">
				<title>JSON-LD Example (Context)</title>
				<listing href="https://www.w3.org/TR/rdf11-primer/#section-json-ld" src="rdf11-primer-example-json-ld-context.json"/>
			</slide>
		</part>
		<part id="linked-data">
			<title>Linked Data</title>
			<slide id="linked-data-definition">
				<title>Linked Data ≟ Data that is Linked</title>
				<ul>
					<li><q>Linking Data</q> is something that is based on viewing <em>data as a graph</em></li>
					<ul>
						<li>Any way to represent graph-based data can be considered <q>linked data</q></li>
					</ul>
					<li><em>Linked Data</em> has become a trademark to refer to specific technologies</li>
					<ul>
						<li>Driven by an unfortunate emphasis of <q>how</q> over <q>what</q></li>
					</ul>
					<li><em href="http://webdata.systems/">Web Data</em> is an alternative vision that focuses less on the <q>how</q></li>
					<ul>
						<li>If your data is linked then it can be considered <em>linked data</em> (lowercase)</li>
						<li>Turning it into <em>Linked Data</em> (uppercase) is an optional technology choice</li>
					</ul>
				</ul>
			</slide>
			<slide id="linked-open-data">
				<title>Linked Open Data</title>
				<ol>
					<li><em>Open License</em> → Allow others to use the data</li>
					<li><em>Structured Data</em> → Publish machine-readable structured data</li>
					<li><em>Open Format</em> → Use open formats over proprietary ones</li>
					<li><em>URI Identifiers</em> → Identify concepts globally and by URI</li>
					<li><em>Interlinking</em> → Interconnect datasets by cross-linking URIs</li>
				</ol>
			</slide>
			<slide id="five-star-steps">
				<title>5★ Open Data Steps</title>
				<img src="5-star-steps.png" title="5★ Open Data" href="http://5stardata.info/" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="lod-cloud">
				<title>Linked Open Data Cloud</title>
				<img src="lod-cloud-2018-04-30.png" title="Linked Open Data Cloud" href="https://lod-cloud.net/" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="semtech-conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-description-discovery">
				<title>Decentralize Description and Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no such thing as a <q>Microservice API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="standards">
		<title>Standards</title>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://www.iso.org/" title="International Organization for Standardization">ISO</a>&#160;· <a href="http://www.iana.org/protocols" title="Internet Assigned Numbers Authority Protocol Registries">IANA Registries</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<part id="languages-standards">
			<title>APIs and Standards</title>
			<slide id="apis-are-languages">
				<title>API are Languages</title>
				<ul>
					<li>APIs allow service providers and consumers to communicate</li>
					<ul>
						<li>Service providers <em>define</em> the language to be used for service interactions</li>
						<li>Service consumers <em>use</em> the language to interact with the service</li>
					</ul>
					<li>Interfaces both separate and connect users of the interface</li>
					<ul>
						<li><em>Separation</em> means that the interface is self-contained</li>
						<li><em>Connection</em> means that the interface is easy to use</li>
					</ul>
					<li>Language design becomes different in complex landscapes</li>
					<ul>
						<li><em>Singular APIs</em> derive value from being individually polished products</li>
						<li><em>Landscape APIs</em> derive value from maximizing productivity across products</li>
					</ul>
				</ul>
			</slide>
			<slide id="languages-need-standards">
				<title>Languages need Standards</title>
				<ul>
					<li>Standards become building blocks of easily usable APIs</li>
					<ul>
						<li>Each building block reduces design effort and improves understandability</li>
					</ul>
					<li>Building block can be used from various areas</li>
					<ol>
						<li>General <em>API concepts</em> that can be used uniformly across various APIs</li>
						<li><em>Domain concepts</em> that can be used across APIs for a certain domain</li>
						<li><em>Organizational concepts</em> that make sense for APIs within an organization</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="protocol-standards">
			<title>Protocols are Standards</title>
			<slide id="standard-types">
				<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
				<ul>
					<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
					<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
					<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
					<li><em>Open standards:</em> <q>Hello everybody! Let's share a way to do this!</q></li>
				</ul>
			</slide>
			<slide id="xkcd-standards">
				<title>How Standards Proliferate</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="sdos">
			<title>Standards-Defining Organizations (SDOs)</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
				<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
				<img title="World Wide Web Consortium (W3C)" href="http://www.w3c.org/" src="w3c.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="iso">
				<title><a href="http://www.iso.org/">International Organization for Standardization (ISO)</a></title>
				<img title="International Organization for Standardization (ISO)" href="http://www.iso.org/" src="iso.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="registries">
			<title>Managing Value Spaces: Registries</title>
			<slide id="why-registries">
				<title>Separating Definition and Evolution</title>
				<ul>
					<li>Concepts may be well-defined but with open and evolving value sets</li>
					<ul>
						<li><em>Employees</em> may be as <q>simple</q> as listing people who have been on payroll</li>
						<li><em>Languages</em> are not easy to find and identify but some consensus is possible</li>
						<li><em>Countries</em> are even trickier because of politics and history</li>
					</ul>
					<li>Technical concepts often are easier to identify and manage</li>
					<ul>
						<li><em>Registry policies</em> must be well-defined so that management is predictable</li>
						<li>Registries contain values and usually <em>link</em> to semantic descriptions</li>
						<li>Sharing values should be the equivalent of sharing concepts</li>
					</ul>
				</ul>
			</slide>
			<slide id="iana-registries">
				<title><a href="http://www.iana.org/" title="Internet Assigned Numbers Authority">IANA</a> <a href="http://www.iana.org/protocols">Protocol Registries</a></title>
				<img title="Internet Assigned Numbers Authority (IANA) Protocol Registries" href="http://www.iana.org/protocols" src="iana-registries.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="registry-policy">
				<title>Preventing Value Drift</title>
				<ul>
					<li>Registered values should be <em>stable over time</em></li>
					<ul>
						<li>The only allowed semantic update are clarifications or updated specifications</li>
						<li>Backwards-compatible specifications are essential (the old meaning still holds)</li>
					</ul>
					<li>Registered values should <em>never be reassigned</em></li>
					<ul>
						<li>Reassigning values is equivalent to a breaking change in value semantics</li>
						<li>Once registered, values are defined and their meaning will never change</li>
					</ul>
					<li>Registered values may be marked as being <em>deprecated</em></li>
					<ul>
						<li>There may be a registry flag indicating that values should be treated as <q>deprecated</q></li>
						<li>Deprecated values may be treated as errors at some point in time</li>
						<li>Deprecated values can never be reassigned</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="web-concepts">
			<title>Web Concepts</title>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="specs">
				<title>Web Concepts: <a href="http://webconcepts.info/specs/">Specifications</a></title>
				<ul>
					<li>Specifications define values for <link href="concepts">existing concepts</link></li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234 (HTTP/1.1 Caching)</a> defines new values for three existing Web Concepts:</li>
					<ul>
						<li><a href="http://webconcepts.info/concepts/http-cache-directive/" title="List of all HTTP Cache Directives">HTTP Cache Directives</a>: <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-age" title="The 'max-age' request directive indicates that the client is unwilling to accept a response whose age is greater than the specified number of seconds. Unless the max-stale request directive is also present, the client is not willing to accept a stale response. The 'max-age' response directive indicates that the response is to be considered stale after its age is greater than the specified number of seconds.">max-age</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-stale" title="The 'max-stale' request directive indicates that the client is willing to accept a response that has exceeded its freshness lifetime. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its freshness lifetime by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.">max-stale</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/min-fresh" title="The 'min-fresh' request directive indicates that the client is willing to accept a response whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.">min-fresh</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/must-revalidate" title="The 'must-revalidate' response directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server.">must-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-cache" title="The 'no-cache' request directive indicates that a cache MUST NOT use a stored response to satisfy the request without successful validation on the origin server. The 'no-cache' response directive indicates that the response MUST NOT be used to satisfy a subsequent request without successful validation on the origin server. This allows an origin server to prevent a cache from using it to satisfy a request without contacting it, even by caches that have been configured to send stale responses.">no-cache</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-store" title="The 'no-store' directive indicates that a cache MUST NOT store any part of either this request or any response to it. This directive applies to both private and shared caches. 'MUST NOT store' in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it.">no-store</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-transform" title="The 'no-transform' directive indicates that an intermediary (whether or not it implements a cache) MUST NOT transform the payload.">no-transform</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/only-if-cached" title="The 'only-if-cached' request directive indicates that the client only wishes to obtain a stored response. If it receives this directive, a cache SHOULD either respond using a stored response that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status code. If a group of caches is being operated as a unified system with good internal connectivity, a member cache MAY forward such a request within that group of caches.">only-if-cached</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/private" title="The 'private' response directive indicates that the response message is intended for a single user and MUST NOT be stored by a shared cache. A private cache MAY store the response and reuse it for later requests, even if the response would normally be non-cacheable.">private</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/proxy-revalidate" title="The 'proxy-revalidate' response directive has the same meaning as the must-revalidate response directive, except that it does not apply to private caches.">proxy-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/public" title="The 'public' response directive indicates that any cache MAY store the response, even if the response would normally be non-cacheable or cacheable only within a private cache.">public</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/s-maxage" title="The 's-maxage' response directive indicates that, in shared caches, the maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header field. The s-maxage directive also implies the semantics of the proxy-revalidate response directive.">s-maxage</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a>: <code><a href="http://webconcepts.info/concepts/http-header/Age" title="The 'Age' header field conveys the sender's estimate of the amount of time since the response was generated or successfully validated at the origin server.">Age</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Cache-Control" title="The 'Cache-Control' header field is used to specify directives for caches along the request/response chain. Such cache directives are unidirectional in that the presence of a directive in a request does not imply that the same directive is to be given in the response.">Cache-Control</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Expires" title="The 'Expires' header field gives the date/time after which the response is considered stale. The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.">Expires</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Pragma" title="The 'Pragma' header field allows backwards compatibility with HTTP/1.0 caches, so that clients can specify a 'no-cache' request that they will understand (as Cache-Control was not defined until HTTP/1.1). When the Cache-Control header field is also present and understood in a request, Pragma is ignored.">Pragma</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Warning" title="The 'Warning' header field is used to carry additional information about the status or transformation of a message that might not be reflected in the status code. This information is typically used to warn about possible incorrectness introduced by caching operations or transformations applied to the payload of the message.">Warning</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-warn-code/" title="List of all HTTP Warn Codes">HTTP Warn Codes</a>: <code><a href="http://webconcepts.info/concepts/http-warn-code/110" title="A cache SHOULD generate this whenever the sent response is stale.">110</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/111" title="A cache SHOULD generate this when sending a stale response because an attempt to validate the response failed, due to an inability to reach the server.">111</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/112" title="A cache SHOULD generate this if it is intentionally disconnected from the rest of the network for a period of time.">112</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/113" title="A cache SHOULD generate this if it heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours.">113</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/199" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user.">199</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/214" title="This Warning code MUST be added by a proxy if it applies any transformation to the representation, such as changing the content-coding, media-type, or modifying the representation data, unless this Warning code already appears in the response.">214</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/299" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action.">299</a></code></li>
					</ul>
					<li>Specifications add <em>one or more values</em> for <em>one or more concepts</em></li>
					<li><a href="http://webconcepts.info/specs/IETF/">Specification series</a> define naming patterns for automated processing</li>
				</ul>
			</slide>
			<slide id="concepts">
				<title>Web Concepts: <a href="http://webconcepts.info/concepts/">Concepts and Values</a></title>
				<ul>
					<li>Concepts establish a namespace for sharing values with shared meanings</li>
					<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a> are one concept with currently 192 distinct values</li>
					<ul>
						<li>The currently listed values all are defined in W3C/IETF specifications</li>
						<li>If required the list could be extended with de-facto standards as well</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/" title="List of all Link Relations">Link Relations</a> are an extensible and fuzzy concept</li>
					<ul>
						<li>103 link relations have been established as registered values</li>
						<li>Hypermedia applications often will use <q>private</q> URI-identified relations</li>
						<li>It is possible that only registered link relations are good candidates for sharing</li>
					</ul>
				</ul>
			</slide>
			<slide id="overview">
				<title>Web Concepts Overview</title>
				<img src="web-concepts.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="spec-series">
				<title>Specification Series</title>
				<listing src="specs.xml" line="4-22"/>
			</slide>
			<slide id="concept-config">
				<title>Concept Configuration</title>
				<listing src="concepts.xml" line="20-24"/>
				<listing src="concepts.xml" line="30-39"/>
			</slide>
			<slide id="constraining-concepts">
				<title>Constraining Concepts</title>
				<ul>
					<li>Ignore/remove <em>specifications</em> that you are not interested in</li>
					<li>Ignore/remove <em>specification series</em> that you are not interested in</li>
					<li>Ignore/remove <em>organizations</em> that you are not interested in</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be the starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="custom-concepts">
				<title>Custom Concepts</title>
				<ul>
					<li>Add <em>specifications</em> that you are interested in</li>
					<li>Add <em>specification series</em> that you are interested in</li>
					<li>Add <em>organizations</em> that you are interested in</li>
					<li>Anything that has potential for reuse can and should be added</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be the starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="concept-coverage">
				<title>Concept Coverage</title>
				<ul>
					<li>Track <em>concept value usage</em> across APIs</li>
					<li>Create a dashboard of concept/value popularity (possibly over time)</li>
					<li>Can be done through code analysis (up to a certain point)</li>
					<li>Probably works better/easier through <q>service fabric instrumentation</q></li>
					<li>Ideally separate tooling and backed by an API/format for representing usage data</li>
					<li>Could even detect difference between declared/used Web Concepts</li>
				</ul>
			</slide>
		</part>
		<part id="standards-conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/audi-2018"><code>dret.net/lectures/audi-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/audi-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>