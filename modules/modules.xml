<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="apj.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Modules</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2017-06">June 2017</date>
	<copyright>2017 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top">
							<b><span class="summary"><hotspot:title/></span><span class="toggle">:</span></b> <span class="toggle"><span class="description"><hotspot:toc class="abstract"/></span></span>
						</td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <hotspot:slides>(*)</hotspot:slides></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction to APIs</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="high-level-view">
			<title>APIs from 50,000 feet</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>APIs in their current sense evolved from the <em>original API</em></li>
					<ul>
						<li><em>Local APIs</em> originated as a way to build systems (i.e., one big thing)</li>
						<li><em>Network APIs</em> were invented decades ago but nobody found the silver bullet</li>
						<li><em>Web APIs</em> are a loose and evolving collection of principles and patterns</li>
					</ul>
					<li>Languages become necessary when coordination is required</li>
					<ul>
						<li><em>Human language</em> is a result of improving ecological fitness</li>
						<li><em>Human written language</em> is a result of new organizational challenges</li>
					</ul>
					<li>Same problems/approaches/answers like other language problems</li>
					<ul>
						<li><em>Domain-only:</em> Domains figure out their problems and their languages</li>
						<li><em>Universal:</em> Find the <em>universal grammar</em> and use it everywhere</li>
						<li><em>Hybrid:</em> Use principles and patterns but avoid überformats</li>
					</ul>
				</ul>
			</slide>
			<slide id="two-views">
				<title>Two Views of API Scope/Focus</title>
				<ul>
					<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
					<ul>
						<li>Focus on <em>systems/software engineering</em> and better modularization</li>
						<li><q>Turn a system into an ecosystem.</q></li>
					</ul>
					<li><em>External:</em> Using APIs to build up ecosystems</li>
					<ul>
						<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
						<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
					</ul>
					<li>Both views are complementary and mostly a difference in perspective</li>
				</ul>
			</slide>
			<slide id="one-perception">
				<title>One Perception of API Value</title>
				<ul>
					<li>System/ecosystem boundaries are blurry</li>
					<ul>
						<li>System/ecosystem perspective is a question of perspective</li>
					</ul>
					<li>APIs provide a foundation for communications in an ecosystem</li>
					<ul>
						<li><em>Internal:</em> Value is in system changeability</li>
						<li><em>External:</em> Value is in system agility</li>
					</ul>
					<li>API discussions should always be aware of both perspectives</li>
					<ul>
						<li>Separate internal/external API strategies are counter-productive</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="three-api-drivers">
			<title>Three Drivers of the API Economy</title>
			<slide id="api-driver-push">
				<title>Driver #1: Push</title>
				<ul>
					<li>Many environments change at increasing velocities</li>
					<ul>
						<li>Economics change</li>
						<li>Incentives change</li>
						<li>Technologies change</li>
					</ul>
					<li>Organizations are <em>pushed</em> to better handle change</li>
					<ul>
						<li>They have to become better at <em>reacting to external changes</em></li>
						<li>They have to become better at <em>executing internal changes</em></li>
						<li>They have to become better at <em>embracing changing</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-pull">
				<title>Driver #2: Pull</title>
				<ul>
					<li>External: Participating in the <em>API economy</em> becomes increasingly beneficial</li>
					<ul>
						<li>Interfacing with customers/partners becomes easier</li>
						<li>The number of API-ready customers/partners keeps increasing</li>
						<li>The <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</a> guarantees for the trend to continue</li>
					</ul>
					<li>Internal: Being able to plan and execute changing quickly improves fitness</li>
					<ul>
						<li>Traditionally, IT is perceived as a sluggish and heavyweight</li>
						<li>Increasingly, IT becomes the <q>lube</q> for the organizational machinery</li>
						<li>Additionally, IT can allow completely new classes of business models</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-follow">
				<title>Driver #3: Follow</title>
				<ul>
					<li>Having an <em>API strategy</em> becomes increasingly important</li>
					<ul>
						<li>Organizations have executed on this for a long time (Amazon API memo: 2002)</li>
						<li>Organizations share experiences and tooling around API strategies</li>
					</ul>
					<li>Using APIs becomes less of an <q>if</q> and more of a <q>how</q></li>
					<ul>
						<li>Business pushes IT to make sure strategy can be executed quickly</li>
						<li>IT can leverage others as justification and leaders</li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="bimodal">
		<title>Bimodal IT</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="caching">
		<title>Caching</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234</a>&#160;· <a href="https://www.mnot.net/cache_docs/" title='Mark Nottingham: Caching Tutorial'>Caching Tutorial</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="caching-overview">
			<title>Overview</title>
			<slide id="caching-online">
				<title>Caching for Online Scenarios</title>
			</slide>
			<slide id="caching-offline">
				<title>Caching for Offline Scenarios</title>
			</slide>
		</part>
		<part id="caching-locations">
			<title>Caching Locations</title>
			<slide id="proxy-cache">
				<title>Proxy Cache</title>
			</slide>
			<slide id="cache-client">
				<title>Client Cache</title>
			</slide>
			<slide id="cache-reverse-proxy">
				<title>Reverse Proxy Cache</title>
			</slide>
		</part>
		<part id="caching-http">
			<title>Caching in HTTP</title>
		</part>
	</presentation>
	<presentation id="design">
		<title>API Design</title>
		<toc class="abstract">APIs play a crucial role in modern IT architecture because they delineate and define the boundaries of IT capabilities. Producers and consumers of APIs interact using the API itself as a language for communications. Designing this language makes a big difference in how easy it is for consumers to use the API, and thus can make a big difference in API discovery, understanding, adoption, and productivity. Additional challenges in the API space are caused by the fact that API producers and consumers are not necessarily synchronized in their development cycles, meaning that API designs should take into account that both producers and consumers can evolve independently, and should try to minimize potential disruption because of incompatibilities.</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/10/api-usability-matters.html" title='Erik Wilde, "API Usability Matters: UX and CX is like DX and …", October 2016'>API Usability</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a>&#160;· <a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="design-process">
			<title>Design as a Process</title>
			<slide id="design-eames">
				<title>Design and Constraints</title>
				<blockquote><q href="http://www.markwunsch.com/eames">Design depends largely on constraints.</q> (<a href="https://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles Eames</a>)</blockquote>
			</slide>
			<slide id="design-questions">
				<title>Design Questions</title>
				<ul>
					<li>Design is an iterative process to solve a given problem</li>
					<ol>
						<li>Identify a <em>problem</em> (provided externally or identified internally)</li>
						<li><em>Why</em> is the problem a problem?</li>
						<li>Identify the <em>constraints</em></li>
						<li><em>What</em> can be done to address the problem?</li>
						<li>Identify the possible solutions</li>
						<li><em>How</em> is the problem solved given the constraints?</li>
						<li>Assess design quality and repeat	</li>
					</ol>
				</ul>
			</slide>
			<slide id="api-lifecycle-design">
				<title>API Lifecycle and Design</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="messages-models">
			<title>Messages vs. Models</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
					<ul>
						<li>Expose <em>as little as possible</em> of the domain complexity</li>
						<li>Resist the temptation to <em>expose your domain model</em></li>
					</ul>
					<li>Interfaces are languages for communication</li>
					<ul>
						<li>They establish a language between API provider and consumer</li>
						<li>Keeping the language simple keeps the API usable</li>
					</ul>
					<li><q>Model Creep</q> is an obstacle for API adoption</li>
					<ul>
						<li>There is no <q>one true model</q> for any domain</li>
						<li>Keeping the language simple minimizes conflict potential</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-messages">
				<title>APIs and Messages</title>
				<ul>
					<li>Messages are the sentences in API communications</li>
					<ul>
						<li>They transport meaning between collaborating peers</li>
						<li>They are independent of how peers implement their activities</li>
					</ul>
					<li>Messages can follow patterns that make APIs easier to use</li>
					<ul>
						<li><em>API styles</em> are focusing on specific communication styles</li>
						<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, …)</li>
						<li><em>API models</em> add message models (SOAP, HAL, GraphQL, …)</li>
						<li><em>Vocabularies</em> help to describe specific APIs</li>
					</ul>
					<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
				</ul>
			</slide>
			<slide id="messaging-start">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction forms</q> to be as succinct as possible</li>
				</ul>
			</slide>
		</part>
		<part id="api-scope">
			<title>API Scope</title>
			<slide id="api-tool">
				<title>APIs as Tools</title>
				<ul>
					<li>APIs exist to solve specific problems</li>
					<ul>
						<li>Think about the problem and not the solution</li>
						<li>Design a <em>capability</em> that hides solution details</li>
					</ul>
					<li>Collaborate with consumers and gather their feedback</li>
					<ul>
						<li><q>API first</q> is all about driving solutions from the API</li>
						<li>Use approaches the make incremental design easy</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-maslow">
				<title>Tools and Problems</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-design-simple">
				<title>KISS API Design</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<li>There is no single correct path to well-designed APIs</li>
					<ul>
						<li>What is the capability that the API is exposing?</li>
						<li>What are the assumptions about API consumers?</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api">
				<title>Microservice APIs</title>
				<ul>
					<li>A bigger landscape of APIs</li>
					<li>A more diverse landscape of APIs</li>
					<li>A landscape of faster evolving APIs</li>
				</ul>
			</slide>
		</part>
		<part id="design-dx">
			<title>Developer Experience (DX)</title>
			<slide id="design-thinking">
				<title>Design Thinking</title>
				<ul>
					<li>Design is driven by creating products/solutions</li>
					<ul>
						<li>How well does the product address a given problem?</li>
						<li>How easy is the designed product to use?</li>
					</ul>
					<li>APIs often are <em>part of a bigger picture</em></li>
					<ul>
						<li>Developers have to use APIs to <em>design their applications</em></li>
						<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-integration-client">
				<title>Ad-Hoc API Integration</title>
				<img title="Client-Side API Integration" src="apis-application-layer-client.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-integration-server">
				<title>Pre-Packaged API Integration</title>
				<img title="Server-Side API Integration" src="apis-application-layer-server.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="design-coherence">
				<title>Design Coherence</title>
				<ul>
					<li>Establish a <em>culture of API design</em></li>
					<ul>
						<li><q>This is how APIs are usually looking</q></li>
						<li>Here are some tools to help with design and documentation</li>
						<li>Here is a breakdown of what the API landscape looks like</li>
					</ul>
					<li>Observing reality helps to document <em>and</em> establish culture</li>
					<ul>
						<li>One way to think of establishing coherence is by writing <em>guidelines</em></li>
						<li>An alternative path is to document and disseminate <em>existing practices</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
					</ul>
					<li>Teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to success</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Modern service architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="design-conclusions">
			<title>Design Conclusions</title>
			<slide id="design-culture">
				<title>Design Culture</title>
				<ul>
					<li>API design matters for making APIs successful</li>
					<li>API design should be established as shared best practices</li>
					<li>Culture is formed by practice and collaboration</li>
					<li>Steer culture with tooling for design and sharing</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="digital-transformation">
		<title>Digital Transformation</title>
		<toc class="abstract"><em>Digital Transformation</em> refers to the process of starting with an organization and organizational processes, and looking at how these can best be supported and expressed through IT means. <em>A first step</em> of digital transformation is to align organizational and IT structures, so that IT changes and improvements are more closely aligned with the organizational side. <em>A second step</em> of digital transformation is to look at IT as an enabler and driver of organizational processes and models that without IT would not be possible. APIs play a central role in digital transformation since they are the way how organizational capabilities are designed, exposed, and utilized in a landscape of digital capabilities.</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="digital-transformation-introduction">
			<title>Digital Transformation: Why?</title>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation">
				<title>Digital Transformation</title>
				<img href="https://upload.wikimedia.org/wikipedia/commons/3/31/Great_white_shark_south_africa.jpg" src="digital-transformation-shark.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services talk to each other <em>only</em> through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>Service Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>APIs emphasize independence and autonomy of capabilities</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
						<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
			<slide id="MSA-v">
				<title>The Three V's of Service Landscapes</title>
				<ul>
					<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
					<ul>
						<li>How big is the service landscape and can I get an overview of what's around?</li>
					</ul>
					<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
					<ul>
						<li>As a creator or consumer, how do I deal with different service designs?</li>
					</ul>
					<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
					<ul>
						<li>As the landscape evolves, how stable are services and their designs?</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-scale">
				<title>Service Landscape Scale</title>
				<ul>
					<li>Different environments have different ideas of MS scale</li>
					<ul>
						<li>Small projects may have a handful of services</li>
						<li>Large MS adopters may have hundreds or thousands of services</li>
					</ul>
					<li>Public APIs and microservice APIs combined mean a bigger API inventory</li>
					<li>Using any form of discovery may not be necessary from the start</li>
					<ul>
						<li>Consider the possibility when starting the MSA effort</li>
						<li>Having a plan helps teams to be aware of the need later on</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-diversity">
				<title>Service Landscape Diversity</title>
				<ul>
					<li>Not all services use the same technical foundations</li>
					<ul>
						<li>Different communications mechanisms</li>
						<li>Different metamodels (XML/JSON/RDF) for data models</li>
						<li>Different models for representing application concepts</li>
						<li>In a Web context, these are concepts such as <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">HTTP headers</a>, <a href="https://github.com/dret/sedola/blob/master/MD/mediatypes.md">media types</a>, and <a href="https://github.com/dret/sedola/blob/master/MD/linkrels.md">link relations</a></li>
					</ul>
					<li>Handling diversity can be challenging because of different <q>design universes</q></li>
					<ul>
						<li>Depending on choice, similar concepts/models may be represented differently</li>
						<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
					</ul>
					<li><link href="ms-discovery">Discovering documentation</link> provides a better overview of the ecosystem</li>
					<ul>
						<li>A reality-based overview of the technology landscape</li>
						<li>A possible starting point or guideline for getting MSA teams started</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralization">
				<title>Service Landscape Decentralization</title>
				<ul>
					<li>Decentralization means no single point of control</li>
					<li>Decentralization means no automatic top-down visibility</li>
					<ul>
						<li><em>API gateways</em> are one way of improving visibility (and control)</li>
						<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
					</ul>
					<li>Complete and uncontrolled decentralization is an ideal</li>
					<ul>
						<li><em>Observe</em> how the MSA landscape develops</li>
						<li><em>Identify pain points</em> from the design and operational point of view</li>
						<li><em>Identify popular patterns</em> so that teams have a starting point</li>
						<li><em>Convincing teams</em> instead of mandatory guidelines</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="documentation-dx">
		<title>API Documentation and DX</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="hypermedia">
		<title>Hypermedia</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5988" title='RFC 5988, "Web Linking", October 2010'>RFC 5988</a>&#160;· <a href="http://www.ustream.tv/recorded/102891495" title='Mike Amundsen, "Twelve Patterns for Hypermedia Microservices", Craft Conference, April 2017'>12 Patterns</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title='Erik Wilde, "API Maps: Hypermedia API Design", August 2016'>API Maps</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="hypermedia-overview">
			<title>Overview</title>
			<slide id="hypermedia-affordances">
				<title>Hypermedia and Affordances</title>
				<blockquote><q href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">When I say hypertext, I mean the simultaneous presentation of information and controls such that the information becomes the affordance through which the user (or automaton) obtains choices and selects actions.</q> (<a href="https://en.wikipedia.org/wiki/Roy_Fielding">Roy Fielding</a>)</blockquote>
			</slide>
			<slide id="hypermedia-workflow">
				<title>Hypermedia and Workflows</title>
				<ul>
					<li>Hypermedia combines state representation and possible further interactions</li>
					<ul>
						<li>Resource state allows clients to understand the current content</li>
						<li>Links allow clients to understand the possible next steps</li>
						<li>Clients select the link based on their application goals</li>
					</ul>
					<li>Workflows are represented by providing navigation options (affordances)</li>
					<ul>
						<li>Making it easier for clients to be <q>driven by available options</q></li>
						<li>Seamless fabric of navigation across individual APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="hypermedia-evolution">
				<title>Hypermedia and API Evolution</title>
				<ul>
					<li>Extensibility generally is a good idea for APIs</li>
					<ul>
						<li>Eliminates or reduces the need to do potentially expensive versioning</li>
					</ul>
					<li>Hypermedia representations by definition combine data and control elements</li>
					<ul>
						<li><em>Data extensibility</em> results in the usual benefits of allowing representations to evolve</li>
						<li><em>Control extensibility</em> results in the ability to add new workflow paths</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-design">
			<title>Hypermedia Design</title>
			<slide id="representing-links">
				<title>Representing Links</title>
				<ul>
					<li>Hypermedia always is about mixing data and controls in representations</li>
					<ul>
						<li>Some scenarios can strictly separate the links and the data</li>
						<li>Other scenarios need links to be embedded in data to make sense</li>
					</ul>
					<li>At the very minimum links need a <em>target URI</em> to identify the link target</li>
					<ul>
						<li>Typically links are typed implicitly or explicitly for differentiation</li>
						<li>Links may also be decorated with <em>hints</em> for additional information</li>
					</ul>
					<li>Links representations are the information that clients have to make decisions</li>
					<ul>
						<li>Some link hints may help to choose between navigation paths</li>
						<li>Some link hints may be optimizations that <q>duplicate/mirror</q> HTTP mechanisms</li>
					</ul>
					<li>Links may also be represented in <a href="http://webconcepts.info/concepts/http-header/Link">the HTTP <code>Link</code> header field</a></li>
				</ul>
			</slide>
			<slide id="json-feed">
				<title>Link Representation (JSON Feed Format)</title>
				<listing src="json-feed.json" href="https://jsonfeed.org/version/1"/>
			</slide>
			<slide id="typed-links">
				<title>Typed Links</title>
				<ul>
					<li>Links represents navigational options for clients</li>
					<ul>
						<li>APIs include links that are advertised based on service and state</li>
						<li>Clients choose links based on application state and goals</li>
					</ul>
					<li>Link typing on the Web often is done using <a href="https://tools.ietf.org/html/rfc5988">RFC 5988 <q>Web Linking</q></a></li>
					<ul>
						<li><em href="http://tools.ietf.org/html/rfc5988#section-4.1">Registered types</em> are simple strings using <a href="https://www.iana.org/assignments/link-relations/link-relations.xhtml">well-known values</a></li>
						<li><em href="http://tools.ietf.org/html/rfc5988#section-4.2">Extension types</em> are URIs which might choose to self-document their meaning</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/">Registered types</a> have documented but fuzzy meaning</li>
					<ul>
						<li>APIs need to document which types they use and what they mean</li>
						<li>Reusing existing types makes the <q>API language</q> easier to understand and use</li>
					</ul>
				</ul>
			</slide>
			<slide id="hal">
				<title>Typed Links (HAL Format)</title>
				<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="17-37"/>
			</slide>
		</part>
		<part id="hypermedia-formats">
			<title>Hypermedia Formats</title>
			<slide id="generic-specific">
				<title>Specific Hypermedia Formats</title>
				<ul>
					<li>Any format that mixes control and data is a hypermedia format</li>
					<ul>
						<li>Standard issues of how to define representations</li>
						<li>Additional issues of where and how to embed links as controls</li>
					</ul>
					<li>Depending on the metamodel and schema language varying support</li>
					<ul>
						<li>Not everybody likes using schema languages</li>
						<li>Many schema languages are focusing on grammars and data types</li>
						<li>Some schema languages at least have data types for URIs</li>
						<li>Few schema languages have explicit support for hypermedia</li>
					</ul>
				</ul>
			</slide>
			<slide id="generic-hypermedia">
				<title>Generic Hypermedia Formats</title>
				<ul>
					<li>Instead of designing hypermedia it's possible to use existing formats</li>
					<ul>
						<li>Generic formats often provide little more than data/control separation</li>
						<li>Domain focus results in semi-generic formats such as collection formats</li>
					</ul>
					<li>Hypermedia is more a pattern than it is format or technology</li>
					<ul>
						<li>Specific technologies may come with more constraints than benefits</li>
						<li>Never underestimate the benefits of reusing shared languages</li>
					</ul>
					<li>So far there is no clear trend towards a common generic format</li>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-conclusions">
			<slide id="evolution-focus">
				<title>Conclusions</title>
				<ul>
					<li>Hypermedia is a pattern mixing data and controls</li>
					<li>Hypermedia provides a good foundation for API evolvability</li>
					<li>Clients need a more data-driven control flow</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="governance">
		<title>API Governance</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="abstract">Microservices are a way how to improve the speed of software delivery, result in more scalable architectures, and make sure that these goals do not compromise the robustness of the overall landscape. The concept of microservices has been distilled from a set of practices that have been adopted in bigger organizations that need to make sure that service development and delivery is as fast as possible. Microservices have a close architectural parallel in the Web, which is built around the same general principles of strictly separate implementations, easily usable interfaces, and an ecosystem model where the measure of success and fitness is that of the overall resulting system, and not that of the individual components.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>How to get there?</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="bimodal-it">
				<title>Bimodal IT</title>
				<img title="Bimodal IT office workers" href="https://en.wikipedia.org/wiki/Minions_(film)" src="minions.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="protocols">
		<title>Protocols</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="https://tools.ietf.org/html/rfc7230" title='RFC 7230, "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing", June 2014'>HTTP</a>&#160;· <a href="https://www.mnot.net/blog/2017/05/11/status_codes" title='Mark Nottingham, "How to Think About HTTP Status Codes", May 2017'>HTTP Status Codes</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="standards-bodies">
			<title>Standards Bodies</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
			</slide>
		</part>
		<part id="HTTP">
			<title short="HTTP">Hypertext Transfer Protocol (HTTP)</title>
			<slide>
				<title>DNS &amp; HTTP</title>
				<p>The two basic protocols which every Web browser must implement are <em>DNS</em> access and <em>HTTP</em>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <em>TCP</em> support (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
				<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
			</slide>
			<slide>
				<title>HTTP Messages</title>
				<ul>
					<li>HTTP needs a reliable connection</li>
					<ul>
						<li>The foundation for HTTP is <em>TCP</em></li>
						<li>DNS resolution yields an IP address</li>
						<li>Open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
					</ul>
					<li>HTTP is a <em>text-based</em> protocol</li>
					<ul>
						<li>The connection is used to transmit <em>text messages</em></li>
						<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
						<li>Basic HTTP operations can be carried out by hand (e.g., per <code>telnet</code>)</li>
					</ul>
				</ul>
				<pre>start-line
message-header *

message-body ?</pre>
			</slide>
			<slide id="http-headers">
				<title>HTTP Header Fields</title>
				<ul>
					<li>Header fields contain information about the message</li>
					<ul>
						<li><em>General header:</em> <code>Date</code> as the message origination date</li>
						<li><em>Request header:</em> <code>Accept-Language</code> indicates language preferences</li>
						<li><em>Response header:</em> <code>Server</code> contains system information</li>
						<li><em>Entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
					</ul>
					<li>HTTP (and others) define <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">a number of header fields</a></li>
					<ul>
						<li>Unknown fields must be ignored (extensibility)</li>
					</ul>
					<li>HTTP is about acting on these fields</li>
					<ul>
						<li>HTTP defines what HTTP implementations must or should do</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-request">
				<title>HTTP Requests</title>
				<ul>
					<li>After opening a connection, the client sends a request</li>
					<ul>
						<li>The method indicates the action to be performed on the resource</li>
						<li>HTTP's most interesting methods are: <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code></li>
					</ul>
					<li>The URI identifies the resource to which the request should be applied</li>
					<ul>
						<li>Absolute URIs are required when contacting <em>proxies</em></li>
						<li>Absolute paths are required when contacting a server directly</li>
						<li>The URI may contain <em>query information</em></li>
					</ul>
					<li>The <code>Host</code> header field must be included in every HTTP/1.1 request</li>
				</ul>
				<pre>Method Request-URI HTTP/Major.Minor
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-get">
				<title>HTTP GET</title>
				<ul>
					<li>Retrieval action based on the URI</li>
					<ul>
						<li>Maybe implemented by reading a file</li>
						<li>Maybe implemented by processing a file (PHP)</li>
						<li>Maybe implemented by running code</li>
					</ul>
					<li>Semantics may change based on header fields</li>
					<ul>
						<li><code>If-*:</code> only reply with the entity if necessary</li>
						<li><code>Range:</code> only reply with the requested part of the entity</li>
					</ul>
					<li>Cacheability depends on header fields of the response</li>
				</ul>
				<pre>GET / HTTP/1.1
Host: ischool.berkeley.edu</pre>
			</slide>
			<slide id="http-response">
				<title>HTTP Responses</title>
				<ul>
					<li>The server's response to acting on a request</li>
					<ul>
						<li>the status code is given numerically and as text</li>
						<li><code>2**</code> for variations of <q>ok</q></li>
						<li><code>3**</code> for redirections</li>
						<li><code>4**</code> are different client side problems (<code>404</code>: not found)</li>
						<li><code>5**</code> are different server side problems</li>
					</ul>
					<li>Header fields specify additional information</li>
					<ul>
						<li>Information about the server</li>
						<li>Information about the entity (media type, encoding, language)</li>
					</ul>
				</ul>
				<pre>HTTP/Major.Minor Status-Code Text
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-performance">
				<title>HTTP Performance</title>
				<ul>
					<li>HTTP/1.0 allowed one transaction per connection</li>
					<ul>
						<li>TCP connection setup and teardown are expensive</li>
						<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
						<li>Typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
						<li>Typically, these resources are stored on the same server</li>
					</ul>
					<li>HTTP/1.1 introduces <em>persistent connections</em></li>
					<ul>
						<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
						<li>Additional requests to the same server use the same TCP connection</li>
					</ul>
					<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
					<ul>
						<li>Instead of waiting for a response, requests can be queued</li>
						<li>The server responds as fast as possible</li>
						<li>The order may not be changed (there is no sequence number)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Connection Handling</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-phttp-pipelining.png"/>
			</slide>
			<slide>
				<title>HTTP Access Control</title>
				<ul>
					<li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> because of access control</li>
					<ul>
						<li><code>401 Unauthorized</code> means the resource is access controlled</li>
						<li><code>403 Forbidden</code> means the resource is inaccessible</li>
						<li><code>405 Method Not Allowed</code> signals a request using the wrong <link href="http-request">request method</link></li>
					</ul>
					<li>Two different approaches to unauthorized access are possible</li>
					<ul>
						<li>Repeat the HTTP request with the proper authentication credentials</li>
						<li>Redirect to a <q>authentication resource</q> for authentication</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Authentication</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-authentication.gif" title="HTTP Authentication" href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/Security5.html"/>
			</slide>
			<slide id="http-basic">
				<title>Basic HTTP Authentication</title>
				<ul>
					<li>Authentication is based on <em>authentication realms</em></li>
					<ul>
						<li>A set of resources for which the authentication is required</li>
						<li>An opaque name which is used to signal which login is required</li>
						<li>Username/password often is specific for a given realm</li>
					</ul>
					<li>Users supply username and password through the client</li>
					<ul>
						<li>Sent as <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoded <q><code>username:password</code></q> string</li>
						<li>Username and password are <a href="http://www.google.com/search?hl=en&amp;q=base64+decoder"><em>not</em> transmitted securely</a></li>
						<li>Basic authentication should <em>always</em> use HTTPS</li>
					</ul>
					<li>Authorization is handled on the server side</li>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="SokEvo"</pre>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">GET /private/index.html HTTP/1.0
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</pre>
				</ul>
			</slide>
			<slide>
				<title>Repeated Access</title>
				<ul>
					<li>Clients typically access more than one protected resource</li>
					<ul>
						<li>A perfectly stateless client would always request authentication from the user</li>
						<li>Using the <em>realm</em> clients can identify repeated accesses to sets of resources</li>
					</ul>
					<li>Web interactions by default are perfectly stateless</li>
					<ul>
						<li>Each request is completely independent from other requests</li>
						<li>Stateless interactions make the Web loosely coupled and scalable</li>
						<li>Concepts like the <em>realm</em> or cookies introduce <q>state</q></li>
					</ul>
					<li>Clients remember the authentication and replay it automatically</li>
					<ul>
						<li>Browsers provide little control over this feature</li>
						<li><q>Logging out</q> of HTTP authenticated sessions is hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="http2">
				<title>HTTP/2</title>
				<ul>
					<li>Started with the goal of <em>improving browser efficiency</em> (i.e., no API focus)</li>
					<ul>
						<li>Spearheaded by Google with its <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> approach for Chrome/Google connectivity</li>
					</ul>
					<li>Maintaining compatibility with HTTP/1.1 as much as possible</li>
					<ul>
						<li>Reuse the existing set of <a href="http://webconcepts.info/concepts/http-method/">request methods</a>, <a href="http://webconcepts.info/concepts/http-status-code/">status codes</a>, and most <a href="http://webconcepts.info/concepts/http-header/">header fields</a></li>
						<li>Allow peers to negotiate use of HTTP/1.1 and HTTP/2.0</li>
					</ul>
					<li>Advanced features for more efficient transmission and communications</li>
					<ul>
						<li>Headers can be compressed and repeated efficiently (binary transmission)</li>
						<li>Fully multiplexed avoiding blocking and other inefficiencies from ordered pipelining</li>
						<li><em>Server push</em> allows servers to send resources prior to getting requests</li>
					</ul>
					<li>Quick uptake through <a href="https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Protocol_support">support in all major browsers</a> and <a href="https://github.com/http2/http2-spec/wiki/Implementations">many servers</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="registries">
		<title>Registries</title>
		<toc class="abstract">...</toc>
		<toc class="resources">...</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="representations">
		<title>Representations</title>
		<toc class="abstract">APIs allows providers and consumers of digital services to communicate. Their language depends on the specific API style and API design, but at some level always is based on representing information that is passed back and forth. These representations can be based on a variety of generic models, which often makes it easier for API creators to design and define the specific language of their API. There are many existing generic models, but for the realm of Internet/Web APIs, <em>Extensible Markup Language (XML)</em>, <em>JavaScript Object Notation (JSON)</em>, and <em>Resource Description Framework (RDF)</em> are the most popular ones.</toc>
		<toc class="resources"><a href="http://www.webconcepts.info/concepts/media-type/" title="Web Concepts: Media Types">Media Types</a>&#160;· <a href="http://www.w3.org/TR/xml/" title='Tim Bray, Jean Paoli, C. Michael Sperberg-McQueen, Eve Maler, and François Yergeau, "Extensible Markup Language (XML) 1.0 (Fifth Edition)", W3C Recommendation REC-xml-20081126, November 2008'>XML</a>&#160;· <a href="https://tools.ietf.org/html/rfc7159" title='Tim Bray, "The JavaScript Object Notation (JSON) Data Interchange Format", IETF RFC 7159, June 2016'>JSON</a>&#160;· <a href="http://www.w3.org/TR/rdf11-concepts/" title='Richard Cyganiak, David Wood, and Markus Lanthaler, "RDF 1.1 Concepts and Abstract Syntax", W3C Recommendation REC-rdf11-concepts-20140225, February 2014'>RDF</a>&#160;· <a href="https://tools.ietf.org/html/rfc4287" title='Mark Nottingham and Robert Sayre, "The Atom Syndication Format", IETF RFC 4287, December 2005'>Atom</a>&#160;· <a href="https://www.w3.org/TR/activitystreams/" title='James Snell and Evan Prodromou, "Activity Streams 2.0", W3C Proposed Recommendation PR-activitystreams-core-20170413, April 2017'>Activity Streams</a>&#160;· <a href="https://jsonfeed.org/">JSON Feed</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="digital-shadow">
				<title>Digital Shadows</title>
				<ul>
					<li><em>Digital Transformation</em> mirrors/designs/builds a world in the digital realm</li>
					<ul>
						<li>Represent your business (processes) in IT to allow automation</li>
						<li>Business transformation can be (more) easily executed on the IT side</li>
						<li>IT insights and changes directly translate to the business side</li>
					</ul>
					<li>IT always has been <em>modeling</em> and <em>implementing</em> <q>reality</q></li>
					<ul>
						<li><em>Essential complexity</em> is a result of domain complexity</li>
						<li><em>Accidental complexity</em> is a result of implementation complications</li>
					</ul>
				</ul>
			</slide>
			<slide id="resources">
				<title>Resources</title>
				<ul>
					<li>APIs are languages that allow providers and consumers to communicate</li>
					<ul>
						<li>API design is about supporting <em>conversations</em> between peers</li>
						<li><em>Conversations</em> revolve around resource <em>interactions</em></li>
						<li><em>Interactions</em> are about exchanging resource representations</li>
					</ul>
					<li>Resources are anything that the API language should talk about</li>
					<ul>
						<li>Resources can be real-world concepts such as <em>products</em></li>
						<li>Resources can be immaterial concepts such as <em>product descriptions</em></li>
						<li>Resources can be ephemeral concepts such as <em>product orders</em></li>
						<li>Resources can be temporary concepts such as <em>current orders for a product</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="digital-representations">
				<title>Digital Representations</title>
				<ul>
					<li>Resources are concepts on the service side</li>
					<ul>
						<li>They are essential to the service model</li>
						<li>Resources are not directly accessible or available</li>
						<li>Clients only use <em>representations</em> when interacting with services</li>
					</ul>
					<li>Separate shallow <em>service surfaces</em> and deep <em>service models</em></li>
					<ul>
						<li><em>Service surfaces</em> are minimal sets of representations and interactions</li>
						<li><em>Service models</em> are domain models for experts and implementers</li>
					</ul>
					<li>Separating surfaces and models increases loose coupling</li>
				</ul>
			</slide>
			<slide id="vocabularies">
				<title>Vocabularies</title>
				<ul>
					<li>Vocabularies define the language for API interactions</li>
					<ul>
						<li>They help to understand the scope and breadth of resource representations</li>
					</ul>
					<li>Shallow and simple vocabularies are essential for loose coupling</li>
					<ul>
						<li>Shallowness avoids unnecessary details and deep model dependencies</li>
						<li>Simplicity allows clients to more easily understand the <em>API language</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="validation">
				<title>Validation</title>
				<ul>
					<li>Validation helps to enforce the proper use of the language</li>
					<ul>
						<li>Vocabularies define the <q>sentences of the API conversation</q></li>
						<li>Good vocabularies define where the language can be extended</li>
						<li>Good vocabularies define what to do when encountering extensions</li>
					</ul>
					<li>Validation only covers the individual representation exchanges</li>
					<ul>
						<li>Most API have constraints which go beyond representation validation</li>
						<li>Validating conversation patterns is beyond representation validation</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="xml">
			<title>Extensible Markup Language (XML)</title>
			<slide id="xml-origins">
				<title>XML Origins and History</title>
				<ul>
					<li>Envisioned as a way for sites to publish their data models</li>
					<ul>
						<li>HTML is a simple and mostly presentation-oriented vocabulary</li>
						<li>Web sites should have the freedom to use their domain vocabularies</li>
						<li>CSS/XSLT stylesheets would then be used to render in the browser</li>
					</ul>
					<li>XML was the first open structured data format on the Internet/Web</li>
					<ul>
						<li><em>Web Services</em> took it at ran with it (and little else)</li>
						<li><em>JavaScript</em> replaced the declarative stylesheet dreams</li>
					</ul>
					<li>JSON replaced XML quickly when it became an alternative</li>
					<ul>
						<li>Direct mapping into the data structures of most programming languages</li>
						<li>No baggage of document-oriented design and related technologies (no <em>data binding</em>)</li>
						<li>Better fit for simple <q>on-the-wire</q> models</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-basics">
				<title>Basic Concepts: Elements and Attributes</title>
				<ul>
					<li>XML Documents have an <em>XML declaration</em> (optional)</li>
					<li>There is exactly one <em>document element</em> (a.k.a. <em>root element</em>)</li>
					<li>Elements may be nested (there is no conceptual limit)</li>
					<ul>
						<li>Elements may be repeated (they can be identified by position)</li>
					</ul>
					<li>Elements are marked up using <em>tags</em></li>
					<ul>
						<li>Most elements have content, surrounded by <em>start</em> and <em>end tags</em></li>
						<li>Empty elements are allowed and may use a special notation</li>
					</ul>
					<li>Elements may have attributes (zero to any number)</li>
					<ul>
						<li>Attributes can only occur once on an element (i.e., they cannot be repeated)</li>
					</ul>
				</ul>
				<listing src="my-first.xml"/>
			</slide>
			<slide id="xml-tree">
				<title>XML is Trees</title>
				<ul>
					<li>Markup is important, but only a notation</li>
					<li>XML documents are trees with different node types</li>
					<ul>
						<li>Node types so far: document, element, attribute, text</li>
					</ul>
					<img style="width : 90% ; margin : 4% ;" src="xml-tree.png" title="XML Document Tree"/>
				</ul>
			</slide>
			<slide id="xml-content-names">
				<title>XML Content and Names</title>
				<p>XML documents can use a wide array of characters. They are defined by <a href="http://www.unicode.org/">Unicode</a>, which in Version 5.0 defines more than 100'000 characters (#100'000 added in 2005).</p>
				<listing src="japanese1.xml"/>
				<listing src="japanese2.xml"/>
			</slide>
			<slide id="xml-elements">
				<title>Elements</title>
				<ul>
					<li>Elements can use a <a href="http://www.w3.org/TR/xml/#NT-Name">wide variety of names</a></li>
					<ul>
						<li>Allowed: <code>&lt;html></code>, <code>&lt;id9832798472></code>, <code>&lt;_></code>, <code>&lt;:></code>, <code>&lt;こんにちは></code></li>
						<li>Disallowed: leading numbers, spaces, control characters</li>
					</ul>
					<li>Element names usually convey some information about the content</li>
					<ul>
						<li>This is not reliable and highly language-dependent</li>
						<li>It is <em>extremely useful</em> when working with a known vocabulary</li>
						<li>It is <em>potentially harmful</em> when working with an unknown vocabulary</li>
					</ul>
					<li>Elements are the foundation for XML's versatility</li>
					<ul>
						<li>They can be nested (<code>&lt;address>&lt;city>Berkeley&lt;/city>&lt;zip>94709&lt;/zip>…</code>)</li>
						<li>They can be repeated (<code>&lt;givenname>Erik&lt;/givenname>&lt;givenname>Thomas&lt;/givenname></code>)</li>
						<li>Their sequence can convey additional information (e.g., given names have a sequence)</li>
					</ul>
				</ul>
			</slide>
			<slide id="xml-attributes">
				<title>Attributes</title>
				<ul>
					<li>Additional information pertaining to elements</li>
					<li>Traditionally, anything that is not considered <q>content</q></li>
					<ul>
						<li>SGML is a document markup language</li>
						<li>XML uses SGML's document-based concepts</li>
						<li>XML has its roots in the document world</li>
					</ul>
					<li>Elements: Content (i.e., Data); Attributes: Metadata</li>
					<li>Documents often distinguish by what is textual content</li>
				</ul>
				<listing src="section.xml" line="12-20"/>
			</slide>
		</part>
		<slide id="mixed-content">
			<title>Mixed Content</title>
			<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>
			<pre><![CDATA[<p>The term <em>Mixed content</em> in XML refers to elements <a href="http://www.w3.org/TR/xml/#sec-mixed-content">which have text content mixed with elements</a>. What these elements do depends on the elements <img style="height : 1em" src="smiley.gif"/>, but the important point is that they are on the same level as the text nodes of the mixed content.</p>]]></pre>
			<img style="width : 90% ; margin : 4% ;" src="mixed-content.png" title="XML tree for mixed content"/>
		</slide>
		<slide id="mixed-content-usage">
			<title>Mixed Content Usage</title>
			<ul>
				<li>Database people find mixed content rather irritating</li>
				<ul>
					<li>Cannot be easily mapped to relational structures</li>
					<li>Is more <em>document-like</em> than <em>data-like</em></li>
					<li>Much harder to optimize for query analysis and query processing</li>
				</ul>
				<li>Document people find mixed content very intriguing</li>
				<ul>
					<li>Textual content can still be used as simple text</li>
					<li>Markup provides additional information for rich text</li>
					<li>Start with a text-only document and use markup to add structure to it</li>
				</ul>
			</ul>
		</slide>
		<slide>
			<title>Semantics</title>
			<ul>
				<li>XML is a language for encoding trees</li>
				<ul>
					<li>Elements and attributes are labeled nodes in this tree</li>
					<li>The labels can be chosen freely by document authors</li>
				</ul>
				<li>The tree's meaning is nothing XML is concerned with</li>
				<ul>
					<li>Peers must have a mutual understanding of the semantics</li>
					<li>XML without mutual understanding is almost useless</li>
					<li>Reverse engineering often is possible, but it is risky and brittle</li>
				</ul>
			</ul>
		</slide>
		<part id="json">
			<title>JavaScript Object Notation (JSON)</title>
			<slide id="json-xml">
				<title>JSON and XML</title>
				<ul>
					<li>JSON replaced XML very quickly because of its simplicity</li>
					<ul>
						<li>JSON is mostly used for <q>on-the-wire</q> models</li>
						<li>XML is intended for document representation, storage, and processing</li>
					</ul>
					<li>JSON's main advantage over XML is its object-orientation</li>
					<ul>
						<li>JSON can be directly mapped into most language's native data structures</li>
						<li>XML needs tree model processing or some form of data-binding</li>
					</ul>
					<li>JSON has no notion of vocabularies or namespaces</li>
					<ul>
						<li>XML's complexity and complications are not needed in most cases</li>
						<li>Composing JSON vocabularies is much more brittle than in XML</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-basics">
				<title>JSON Basics</title>
				<ul>
					<li>JSON is the <q>data structure part</q> of JavaScript</li>
					<ul>
						<li>Perfect match for client code consuming JSON data</li>
						<li>Very good match for many other languages with structured data types</li>
					</ul>
					<li>JSON is good for <em>data-on-the-wire</em> and not so much for complex models</li>
					<li>JSON has found its way into many typical IT components</li>
					<ul>
						<li>Some databases use JSON as their native data model (<a href="https://www.mongodb.com/">MongoDB</a>)</li>
						<li>Many databases have added JSON to their data type support</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-structure">
				<title>JSON Structure</title>
				<ul>
					<li>JSON has a small set of data types</li>
					<ul>
						<li><code>object</code>s are a set of name/value pairs called <em>members</em></li>
						<li><code>array</code>s are a sequence of potentially heterogeneous values</li>
						<li><code>number</code>s use regular decimal notation with an optional exponent</li>
						<li><code>string</code>s are quoted with escape for special characters and Unicode</li>
						<li><code>boolean</code>s use the two values <code>true</code> and <code>false</code></li>
					</ul>
					<li>Objects and arrays can be nested as deeply as required</li>
				</ul>
			</slide>
			<slide id="json-example">
				<title>JSON Example</title>
				<listing src="json-example.json"/>
			</slide>
			<slide id="ijson">
				<title>JSON and I-JSON</title>
				<ul>
					<li>Plain JSON is defined by <a href="http://tools.ietf.org/html/rfc7159">RFC 7159</a></li>
					<li>I-JSON constrains JSON and is defined by <a href="http://tools.ietf.org/html/rfc7493">RFC 7493</a></li>
					<li>I-JSON defines some common-sense conventions around JSON</li>
					<ul>
						<li>The only allowed character encoding is UTF-8</li>
						<li>No numbers exceeding the limits of IEEE 754 double precision</li>
						<li>No members with duplicate names in objects</li>
						<li>Try to avoid top-level constructs other than array/object</li>
						<li>For time/date values use ISO 8601 with timezone and trailing seconds</li>
						<li>Binary data should be encoded using <code href="http://tools.ietf.org/html/rfc4648#section-5">base64url</code></li>
					</ul>
					<li>Most developers instinctively avoid features disallowed by I-JSON</li>
				</ul>
			</slide>
		</part>
		<part id="rdf">
			<title>Resource Description Framework (RDF)</title>
			<slide id="rdf-roots">
				<title>Describing Resources</title>
				<ul>
					<li>RDF started as a generalization of <span title="Platform for Internet Content Selection">PICS</span></li>
					<ul>
						<li>A way to simple make statements about URI-identified resources</li>
						<li>Statements are using <em>(Subject, Predicate, Object)</em> triples</li>
					</ul>
					<li>Statements can be aggregated and result in a graph-oriented data model</li>
					<ul>
						<li>Subject: ...</li>
						<li>Predicate: ...</li>
						<li>Object: ...</li>
					</ul>
				</ul>
			</slide>
			<slide id="rdf-vocabularies">
				<title>RDF Vocabularies: Schemas and Ontologies</title>
			</slide>
			<slide id="sparql">
				<title>Querying RDF with SPARQL</title>
			</slide>
		</part>
		<part id="more-representation">
			<title>More Representation Formats</title>
			<slide id="collection-formats">
				<title>Collections as a Pattern</title>
				<ul>
					<li>Collections and their management is a common design pattern</li>
					<ul>
						<li>Often some form of similarity/commonality across collection members</li>
					</ul>
					<li>Re-inventing collection formats might be a good design choice</li>
					<ul>
						<li><a href="https://tools.ietf.org/html/rfc4287" title="IETF RFC 4287">Atom</a> is XML-based and has <a href="http://dret.typepad.com/dretblog/atom-landscape.html">many additional features</a></li>
						<li><a href="https://jsonfeed.org/">JSON Feed</a> is a JSON-based variant of Atom</li>
						<li><a href="https://www.w3.org/TR/activitystreams/">Activity Streams</a> focuses on activity publishing/syndication</li>
					</ul>
				</ul>
			</slide>
			<slide id="csv">
				<title>Comma-Separated Values (CSV)</title>
				<ul>
					<li><a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a> defines a textual format for <q>spreadsheet data</q></li>
					<li>CSV has been used for a long time, but some of the details were solved differently</li>
					<li>Defining a media type makes it easier for implementations to know what to expect</li>
					<ul>
						<li>The CSV registration not only registers the type, but also defines it</li>
					</ul>
					<li>CSV is not overly complex, but some issues have to be solved</li>
					<ul>
						<li>How to separate lines (CRLF)</li>
						<li>How to end the file (CRLF is allowed but optional)</li>
						<li>Are headers allowed (yes, but they are not marked as such)</li>
						<li>May different lines use different numbers of fields (no)</li>
						<li>Are spaces significant (yes)</li>
						<li>Are quotes significant (no, they are delimiters, so quotes as values must be escaped)</li>
						<li>How to treat fields with CRLF, commas, or quotes (enclose the value in quotes)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide>
				<title>Language Matters</title>
				<ul>
					<li>APIs are languages</li>
					<li>Representations are language sentences</li>
					<li>Design and document the language of each API</li>
					<li>Choosing a metamodel is a question of API, context, and taste</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="semtech">
		<title>Semantic Technologies</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2011/05/from-ai-to-bi.html" title='Erik Wilde, "From AI to BI", May 2011'>From AI to BI</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
	</presentation>
	<presentation id="standards">
		<title>Standards</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="https://webconcepts.info/">Web Concepts</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="standards-bodies">
			<title>Standards Bodies</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title>API Styles</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="api-language">
			<title>APIs are Languages</title>
			<slide id="problem-solving">
				<title>Distributed Problem Solving</title>
				<ul>
					<li>APIs are part of distributed problem solving</li>
					<li>Ideal APIs can be used for a range of problems</li>
					<li>Problem-solving often requires combining APIs</li>
					<li><q>Language families</q> make it easier to learn and use new APIs</li>
				</ul>
			</slide>
			<slide id="api-conversation">
				<title>APIs are Conversations</title>
				<ul>
					<li>APIs support conversations between interacting peers</li>
					<ul>
						<li>Some conversations are point-to-point (how to find the peer?)</li>
						<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
						<li>Some conversations are point-to-ether (what does the ether do?)</li>
					</ul>
					<li>API technology does not determine the API conversation style</li>
					<ul>
						<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHook</q> pattern)</li>
						<li>Synchronous conversations and be layered on top of asynchronous foundations</li>
					</ul>
					<li>Conversation goals should determine the conversation style</li>
				</ul>
			</slide>
		</part>
		<part id-"tunnel-style">
			<title>Tunnel Style</title>
			<slide id="rpc-over-http">
				<title>Distributed Programming</title>
				<ul>
					<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
					<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
					<li>Resource identifiers typically are context-dependent</li>
					<li>Suffers from the typical RPC problems at bigger scale</li>
					<ul>
						<li>Failure is hard to deal with (function calls always succeed)</li>
						<li>Scoped identifiers mean naming problems and no network effect</li>
					</ul>
					<li>Convenient for developers looking to <q>code like a local program</q></li>
				</ul>
			</slide>
		</part>
		<part id-"uri-style">
			<title>URI Style</title>
			<slide id="webby-identifiers">
				<title>Identifiers for Resources</title>
				<ul>
					<li>Makes a major step towards a more webby service design</li>
					<ul>
						<li>Resources are identified by URIs and thus globally unique</li>
						<li>Data context may be established by using URI identifiers for resources</li>
						<li>Navigational context is missing because of a lack of links</li>
					</ul>
					<li>One necessary step in the evolution of designing decentralized systems</li>
					<ul>
						<li><em>Web of Data</em> is a good starting point</li>
						<li><em>Web of Services</em> is what makes the Web what it is</li>
					</ul>
					<li>Developers are tempted/required to hardcode control flows</li>
					<ul>
						<li>No navigational guidance provided by the API</li>
						<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id-"hypermedia-style">
			<title>Hypermedia Style</title>
			<slide id="webby-style">
				<title>Webby APIs</title>
				<ul>
					<li>Based on mixing data and controls in representations</li>
					<ul>
						<li><em>Data</em> represents the current resource state</li>
						<li><em>Controls</em> represent the advertised next options for clients</li>
					</ul>
					<li>Controls allow clients to work across individual APIs</li>
					<ul>
						<li>APIs expose sets of resources and provide links</li>
						<li>Clients follow links without being aware of API boundaries</li>
					</ul>
					<li>Developers must code differently from usual programming flows</li>
					<ul>
						<li>Applications are driven by the responses that client code receives</li>
						<li>Imperative programming is not the best fit for this kind of flow</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id-"asynchronous-style">
			<title>Asynchronous Style</title>
			<slide id="fire-and-forget">
				<title>Fire and Forget</title>
				<ul>
					<li>Synchronous communications result in tighter coupling between peers</li>
					<li>Asynchronous communications can make data provision easier</li>
					<ul>
						<li>Data is tagged and submitted into some <em>communications fabric</em></li>
						<li>The fabric takes care of notifying and delivering data to consumers</li>
					</ul>
					<li>The fabric is far beyond the <em>smart endpoints and dumb pipes</em> idea</li>
					<ul>
						<li><em>Smart pipes</em> are not bad per se but often have problems scaling</li>
					</ul>
					<li>Managing the fabric becomes an essential part of making code work</li>
					<ul>
						<li>Who is producing data?</li>
						<li>Who is consuming data?</li>
						<li>What are the ways in which data can or must be tagged?</li>
						<li>How is the namespace of data tagging managed?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id-"style-conclusions">
			<title>Conclusions</title>
			<slide id="no-style-hammer">
				<title>There is no Style Hammer</title>
				<ul>
					<li>API styles can be combined</li>
					<li>Style coherence makes a API landscape more usable</li>
					<li>Style fundamentalism may pick the wrong tool for a problem</li>
					<li>Be aware of styles and pick the one that works best</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="versioning">
		<title>Versioning</title>
		<toc class="abstract">...</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc7234" title="RFC 6648: 'Deprecating the &quot;X-&quot; Prefix and Similar Constructs in Application Protocols', June 2012">RFC 6648</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="https://blog.goodapi.co/api-change-management-2fe5bba32e9b" title='Zdenek Nemec, "API Change Management", April 2017'>Change Management</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="versioning-introduction">
			<title>Introduction</title>
			<slide id="versioning-practice">
				<title>Versioning in Practice</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>But often they are only useful for signaling continuity or breakage points</li>
						<li>Most things work or break in a binary way (or simply refuse to even try)</li>
					</ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility</em> means to work with older components</li>
						<li><em>Forward compatibility</em> means to work with more advanced components</li>
					</ul>
					<li>The Web has good rules to support both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
				</ul>
			</slide>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have and document a plan for API evolution</li>
					</ul>
					<li>Extensibility should be made easy for API consumers</li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li>Extension points make it clear where to expect extensions</li>
						<li>Processing models make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="version-identification">
				<title>Identifying Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions on the service surface</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to see/support in the general Web fabric</li>
						<li>Media types often are not used by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used in URI path or in the domain name</li>
					</ul>
				</ul>
			</slide>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers follow the <code>MAJOR.MINOR.PATCH</code> pattern and the following rules</li>
					<ul>
						<li>increase <code>MAJOR</code> version for incompatible API changes</li>
						<li>increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
						<li>increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
					</ul>
					<li>Mostly about how to name implementation artifacts and of limited use for APIs</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>No behavioral benefit other than allowing clients to raise errors and stop working</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="versioning-conclusions">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="skeleton">
		<title>General Skeleton</title>
		<toc class="abstract">General-purpose skeleton with introduction and conclusions.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/..."><code>dret.net/lectures/...</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/..."><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>