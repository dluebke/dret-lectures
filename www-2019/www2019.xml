<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="goodapi" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="www2019.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<title>The Challenge of API Management</title>
	<date short="2019-05-14">May 14, 2019</date>
	<copyright>2019 Erik Wilde</copyright>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation external="2019-05-www-mike.pdf">
		<title short="Introduction Mike">Introduction Mike Amundsen</title>
	</presentation>
	<presentation id="intro">
		<title short="Introduction">Introduction: Why? What? How?</title>
		<toc class="resources"><a href="https://www.goodapi.co/">Good API</a>&#160;· <a href="http://shop.oreilly.com/product/0636920201755.do" title="Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen, 'Continuous API Management: Making the Right Decisions in an Evolving Landscape', O'Reilly Media, December 2018">CAM Book</a>&#160;· <a href="http://shop.oreilly.com/product/0636920050308.do" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dretwitter">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Part of <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> 2016-2019 focusing on API Design and Management</li>
					<li>Joined <a href="https://www.goodapi.co/">Good API</a> in 2019 focusing on API Strategy and Guidance for Digital Transformation</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, and <a href="http://www.linkedin.com/in/netdret">LinkedIn</a></li>
				</ul>
			</slide>
			<slide id="good-api">
				<title><a href="http://www.goodapi.co/">Good API</a></title>
				<img src="good-api-black.png" href="http://www.goodapi.co/" title="Good API" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>International team based in Prague and Zurich</li>
					<ul>
						<li>Adam Kliment: <a href="http://twitter.com/ntmlk" class="twitter-follow-button" title="Adam Kliment on Twitter: @ntmlk"><code>@ntmlk</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Zdenek <q>Z</q> Nemec: <a href="http://twitter.com/zdne" class="twitter-follow-button" title="Z on Twitter: @zdne"><code>@zdne</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Working on <em>Digital Transformation</em> and <em>API Strategy and Programs</em></li>
					<ul>
						<li>Planning and coaching digital transformation initiatives</li>
						<li>Formulating API strategies for building a solid foundation</li>
						<li>Executing API programs to turn API strategies into API landscapes</li>
					</ul>
				</ul>
			</slide>
			<slide id="cam-book">
				<title>Continuous API Management (2018)</title>
				<img src="CAM-cover-2048px.jpg" href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559" title="Continuous API Management: Making the Right Decisions in an Evolving Landscape" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/continuous-api-management">Continuous API Management: Making the Right Decisions in an Evolving Landscape</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920201755.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen</li>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture (2016)</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q href="https://www.apiacademy.co/resources/books/microservice-architecture-aligning-principles-practices-culture">Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<ul>
						<li><a href="http://shop.oreilly.com/product/0636920050308.do">O'Reilly book page</a></li>
						<li><a href="https://www.amazon.com/Microservice-Architecture-Aligning-Principles-Practices/dp/1491956259">Amazon book page</a></li>
					</ul>
					<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
				</ul>
			</slide>
		</part>
		<part id="overview">
			<title>Tutorial Overview</title>
			<slide id="api-growth">
				<title>API Growth</title>
				<ul>
					<li>APIs are the Web pages of the machine Web</li>
					<ul>
						<li>Connectivity within and across organizations</li>
						<li><em>Inside</em> and <em>outside</em> depends on context and shifts over time</li>
					</ul>
					<li>Allowing decentralization with some level of standardization</li>
					<ul>
						<li><em>Decentralization</em> allows teams and capabilities to be developed faster</li>
						<li><em>Standardization</em> results in a more uniform and accessible landscape</li>
					</ul>
					<li>Learning from the (UI) Web</li>
					<ul>
						<li>Standardize enabling technologies to design and build access to information/services</li>
						<li>Refrain from standardizing domain models</li>
						<li>Evolve the ecosystem by observing usage and providing guidance and support</li>
					</ul>
				</ul>
			</slide>
			<slide id="schedule">
				<title>Schedule</title>
				<ul>
					<li>Part I: Understanding API Styles and Technologies</li>
					<ul>
						<li>Session 1 (Morning): 9.00-10.30</li>
						<ul>
							<li><link href="perspectives"/></li>
							<li><link href="standards"/></li>
						</ul>
						<li>Session 2 (Morning): 11.00-12.30</li>
						<ul>
							<li><a href="2019-05-www-api-styles.pdf">Styles: Five API Styles</a></li>
							<li><a href="2019-05-www-api-design.pdf">Design: Learning the API Design Method</a></li>
						</ul>
					</ul>
					<li>Part II: Supporting Continuous Change in the API Landscape</li>
					<ul>
						<li>Session 1 (Afternoon): 14.00-15.30</li>
						<ul>
							<li><link href="products"/></li>
							<li><a href="2019-05-www-api-consumption.pdf">Consumption: Network and Dependency Challenges</a></li>
						</ul>
						<li>Session 2 (Afternoon): 16.00-17.30</li>
						<ul>
							<li><link href="landscapes"/></li>
							<li><a href="2019-05-www-api-governance.pdf">Governance: Decision Making and Observability</a></li>
						</ul>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/www-2019"><code>dret.net/lectures/www-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="perspectives">
		<title short="Perspectives">Perspectives: Two Perspectives of APIs</title>
		<toc class="resources"><a href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" title='Gregor Hohpe, "Reverse Engineering the Organization", May 2018'>Reverse Engineering the Organization</a></toc>
		<part id="high-level-view">
			<title>APIs from 50,000 feet</title>
			<slide id="digital-transformation">
				<title>Digital Transformation</title>
				<img src="bear-digital-transformation.jpg" title="Digital Transformation: Because being more agile than the competition just may be a good idea..." style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="global-challenge">
				<title>Digital Transformation: The Global Challenge</title>
				<img title="Japan" src="godzilla-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 5% ; "/>
				<img title="Australia" src="crocodile-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 1% ; "/>
				<img title="United States" src="bear-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 1% ; "/>
				<img title="Poland" src="wolf-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 5% ; "/>
				<img title="Colombia" src="jaguar-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 1% ; "/>
				<img title="South Africa" src="shark-digital-transformation.jpg" style=" width : 28% ; height : 30% ; object-fit : contain ; margin : 1% 1% 1% 1% ; "/>
			</slide>
			<slide id="api-pattern">
				<title>APIs are a Pattern</title>
				<div style="height: 70%">
					<img style="float: left; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Uniform interface" src="pneumatic-tubes.jpg" href="https://twitter.com/NotableHistory/status/529966375125544960"/>
					<img style="float: right; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Self-describing representations and stateless interactions" src="nj-gun-permit.png"/>
				</div>
			</slide>
		</part>
		<part id="api-aspects">
			<title>APIs: 3 Drivers, 2 Perspectives, 1 Lifecycle</title>
			<slide id="api-driver-push">
				<title>API Driver #1: Push</title>
				<ul>
					<li>Many environments change at increasing velocities</li>
					<ul>
						<li>Economics change</li>
						<li>Incentives change</li>
						<li>Technologies change</li>
					</ul>
					<li>Organizations are <em>pushed</em> to better handle change</li>
					<ul>
						<li>They have to become better at <em>reacting to external changes</em></li>
						<li>They have to become better at <em>executing internal changes</em></li>
						<li>They have to become better at <em>embracing changing</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-pull">
				<title>API Driver #2: Pull</title>
				<ul>
					<li>External: Participating in the <em>API economy</em> becomes increasingly beneficial</li>
					<ul>
						<li>Interfacing with customers/partners becomes easier</li>
						<li>The number of API-ready customers/partners keeps increasing</li>
						<li>The <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</a> guarantees for the trend to continue</li>
					</ul>
					<li>Internal: Being able to plan and execute changing quickly improves fitness</li>
					<ul>
						<li>Traditionally, IT is perceived as sluggish and heavyweight</li>
						<li>Increasingly, IT becomes the <q>lube</q> for the organizational machinery</li>
						<li>Additionally, IT can allow completely new classes of business models</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-follow">
				<title>API Driver #3: Follow</title>
				<ul>
					<li>Having an <em>API strategy</em> becomes increasingly important</li>
					<ul>
						<li>Organizations have executed on this for a long time (Amazon API memo: 2002)</li>
						<li>Organizations share experiences and tooling around API strategies</li>
					</ul>
					<li>Using APIs becomes less of an <q>if</q> and more of a <q>how</q></li>
					<ul>
						<li>Business pushes IT to make sure strategy can be executed quickly</li>
						<li>IT can leverage others as justification and leaders</li>
					</ul>
				</ul>
			</slide>
			<slide id="two-views">
				<title>Two Views of API Scope/Focus</title>
				<ul>
					<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
					<ul>
						<li>Focus on <em>systems/software engineering</em> and better modularization</li>
						<li><q>Turn a system into an ecosystem.</q></li>
						<li>Use <em>Private APIs</em> as a way to reduce tight coupling</li>
					</ul>
					<li><em>External:</em> Using APIs to build up ecosystems</li>
					<ul>
						<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
						<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
						<li>Use <em>Public APIs</em> as a way to (better) interface with partners/public</li>
					</ul>
					<li>Both views are complementary and mostly a difference in perspective</li>
				</ul>
			</slide>
			<slide id="one-management-cycle">
				<title>One Management Lifecycle</title>
				<img title="API Lifecycle" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="digital-transformation-why">
			<title>Digital Transformation: Why?</title>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-economy">
				<title>Business Agility</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="web-works">
				<title>The Web Works</title>
				<ul>
					<li>MSA is about service autonomy in service-oriented landscapes</li>
					<ul>
						<li><em>Developer autonomy</em> is the freedom to choose the best tools for the job</li>
						<li><em>Operations autonomy</em> means that every service is operated standalone</li>
					</ul>
					<li>MSA is also about effectiveness in autonomy-focused service-oriented landscapes</li>
					<ul>
						<li><em>Rapid provisioning</em> means that getting started is an easy task</li>
						<li><em>Basic monitoring</em> establishes visibility into service operations</li>
						<li><em>Rapid deployment</em> increases the velocity of service landscape evolution</li>
					</ul>
				</ul>
			</slide>
			<slide id="web-industrialized">
				<title>The Web, Industrialized</title>
				<ul>
					<li>MSA applies Web Architecture's <em href="http://dret.net/netdret/publications#pau09a">loose coupling</em> to the API space</li>
					<ul>
						<li>Build services with no hidden dependencies</li>
						<li>Choose the best tool for the job</li>
						<li>Decouple service provisioning from delivery architecture</li>
						<li>Monitor service state and usage</li>
						<li>React quickly when customers or market demand change</li>
						<li>Experiment ruthlessly and keep experimentation cost low</li>
					</ul>
					<li>MSA is all about being webby while minimizing the cost</li>
				</ul>
			</slide>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Microservices</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/www-2019"><code>dret.net/lectures/www-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="standards">
		<title short="Standards">Standardization Landscape: Standards and SDOs</title>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://www.iso.org/" title="International Organization for Standardization">ISO</a>&#160;· <a href="http://www.iana.org/protocols" title="Internet Assigned Numbers Authority Protocol Registries">IANA Registries</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a></toc>
		<part id="languages-standards">
			<title>APIs and Standards</title>
			<slide id="apis-are-languages">
				<title>API are Languages</title>
				<ul>
					<li>APIs allow service providers and consumers to communicate</li>
					<ul>
						<li>Service providers <em>define</em> the language to be used for service interactions</li>
						<li>Service consumers <em>use</em> the language to interact with the service</li>
					</ul>
					<li>Interfaces both separate and connect users of the interface</li>
					<ul>
						<li><em>Separation</em> means that the interface is self-contained</li>
						<li><em>Connection</em> means that the interface is easy to use</li>
					</ul>
					<li>Language design becomes different in complex landscapes</li>
					<ul>
						<li><em>Singular APIs</em> derive value from being individually polished products</li>
						<li><em>Landscape APIs</em> derive value from maximizing productivity across products</li>
					</ul>
				</ul>
			</slide>
			<slide id="languages-need-standards">
				<title>Languages need Standards</title>
				<ul>
					<li>Standards become building blocks of easily usable APIs</li>
					<ul>
						<li>Each building block reduces design effort and improves understandability</li>
					</ul>
					<li>Building blocks can be used from various areas</li>
					<ol>
						<li>General <em>API concepts</em> that can be used uniformly across various APIs</li>
						<li><em>Domain concepts</em> that can be used across APIs for a certain domain</li>
						<li><em>Organizational concepts</em> that make sense for APIs within an organization</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="protocol-standards">
			<title>Protocols are Standards</title>
			<slide id="standard-types">
				<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
				<ul>
					<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
					<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
					<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
					<li><em>Open standards:</em> <q>Hello everybody! Let's share a way to do this!</q></li>
				</ul>
			</slide>
			<slide id="xkcd-standards">
				<title>How Standards Proliferate</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="sdos">
			<title>Standards-Defining Organizations (SDOs)</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
				<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
				<img title="World Wide Web Consortium (W3C)" href="http://www.w3c.org/" src="w3c.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="iso">
				<title><a href="http://www.iso.org/">International Organization for Standardization (ISO)</a></title>
				<img title="International Organization for Standardization (ISO)" href="http://www.iso.org/" src="iso.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="registries">
			<title>Managing Value Spaces: Registries</title>
			<slide id="why-registries">
				<title>Separating Definition and Evolution</title>
				<ul>
					<li>Concepts may be well-defined but with open and evolving value sets</li>
					<ul>
						<li><em>Employees</em> may be as <q>simple</q> as listing people who have been on payroll</li>
						<li><em>Languages</em> are not easy to find and identify but some consensus is possible</li>
						<li><em>Countries</em> are even trickier because of politics and history</li>
					</ul>
					<li>Technical concepts often are easier to identify and manage</li>
					<ul>
						<li><em>Registry policies</em> must be well-defined so that management is predictable</li>
						<li>Registries contain values and usually <em>link</em> to semantic descriptions</li>
						<li>Sharing values should be the equivalent of sharing concepts</li>
					</ul>
				</ul>
			</slide>
			<slide id="iana-registries">
				<title><a href="http://www.iana.org/" title="Internet Assigned Numbers Authority">IANA</a> <a href="http://www.iana.org/protocols">Protocol Registries</a></title>
				<img title="Internet Assigned Numbers Authority (IANA) Protocol Registries" href="http://www.iana.org/protocols" src="iana-registries.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="registry-policy">
				<title>Preventing Value Drift</title>
				<ul>
					<li>Registered values should be <em>stable over time</em></li>
					<ul>
						<li>The only allowed semantic update are clarifications or updated specifications</li>
						<li>Backwards-compatible specifications are essential (the old meaning still holds)</li>
					</ul>
					<li>Registered values should <em>never be reassigned</em></li>
					<ul>
						<li>Reassigning values is equivalent to a breaking change in value semantics</li>
						<li>Once registered, values are defined and their meaning will never change</li>
					</ul>
					<li>Registered values may be marked as being <em>deprecated</em></li>
					<ul>
						<li>There may be a registry flag indicating that values should be treated as <q>deprecated</q></li>
						<li>Deprecated values may be treated as errors at some point in time</li>
						<li>Deprecated values can never be reassigned (see above)</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="web-concepts">
			<title>Web Concepts</title>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="specs">
				<title>Web Concepts: <a href="http://webconcepts.info/specs/">Specifications</a></title>
				<ul>
					<li>Specifications define values for <link href="concepts">existing concepts</link></li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7234" title='RFC 7234: "Hypertext Transfer Protocol (HTTP/1.1): Caching", June 2014'>RFC 7234 (HTTP/1.1 Caching)</a> defines new values for three existing Web Concepts:</li>
					<ul>
						<li><a href="http://webconcepts.info/concepts/http-cache-directive/" title="List of all HTTP Cache Directives">HTTP Cache Directives</a>: <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-age" title="The 'max-age' request directive indicates that the client is unwilling to accept a response whose age is greater than the specified number of seconds. Unless the max-stale request directive is also present, the client is not willing to accept a stale response. The 'max-age' response directive indicates that the response is to be considered stale after its age is greater than the specified number of seconds.">max-age</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/max-stale" title="The 'max-stale' request directive indicates that the client is willing to accept a response that has exceeded its freshness lifetime. If max-stale is assigned a value, then the client is willing to accept a response that has exceeded its freshness lifetime by no more than the specified number of seconds. If no value is assigned to max-stale, then the client is willing to accept a stale response of any age.">max-stale</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/min-fresh" title="The 'min-fresh' request directive indicates that the client is willing to accept a response whose freshness lifetime is no less than its current age plus the specified time in seconds. That is, the client wants a response that will still be fresh for at least the specified number of seconds.">min-fresh</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/must-revalidate" title="The 'must-revalidate' response directive indicates that once it has become stale, a cache MUST NOT use the response to satisfy subsequent requests without successful validation on the origin server.">must-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-cache" title="The 'no-cache' request directive indicates that a cache MUST NOT use a stored response to satisfy the request without successful validation on the origin server. The 'no-cache' response directive indicates that the response MUST NOT be used to satisfy a subsequent request without successful validation on the origin server. This allows an origin server to prevent a cache from using it to satisfy a request without contacting it, even by caches that have been configured to send stale responses.">no-cache</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-store" title="The 'no-store' directive indicates that a cache MUST NOT store any part of either this request or any response to it. This directive applies to both private and shared caches. 'MUST NOT store' in this context means that the cache MUST NOT intentionally store the information in non-volatile storage, and MUST make a best-effort attempt to remove the information from volatile storage as promptly as possible after forwarding it.">no-store</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/no-transform" title="The 'no-transform' directive indicates that an intermediary (whether or not it implements a cache) MUST NOT transform the payload.">no-transform</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/only-if-cached" title="The 'only-if-cached' request directive indicates that the client only wishes to obtain a stored response. If it receives this directive, a cache SHOULD either respond using a stored response that is consistent with the other constraints of the request, or respond with a 504 (Gateway Timeout) status code. If a group of caches is being operated as a unified system with good internal connectivity, a member cache MAY forward such a request within that group of caches.">only-if-cached</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/private" title="The 'private' response directive indicates that the response message is intended for a single user and MUST NOT be stored by a shared cache. A private cache MAY store the response and reuse it for later requests, even if the response would normally be non-cacheable.">private</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/proxy-revalidate" title="The 'proxy-revalidate' response directive has the same meaning as the must-revalidate response directive, except that it does not apply to private caches.">proxy-revalidate</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/public" title="The 'public' response directive indicates that any cache MAY store the response, even if the response would normally be non-cacheable or cacheable only within a private cache.">public</a></code>, <code><a href="http://webconcepts.info/concepts/http-cache-directive/s-maxage" title="The 's-maxage' response directive indicates that, in shared caches, the maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the Expires header field. The s-maxage directive also implies the semantics of the proxy-revalidate response directive.">s-maxage</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a>: <code><a href="http://webconcepts.info/concepts/http-header/Age" title="The 'Age' header field conveys the sender's estimate of the amount of time since the response was generated or successfully validated at the origin server.">Age</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Cache-Control" title="The 'Cache-Control' header field is used to specify directives for caches along the request/response chain. Such cache directives are unidirectional in that the presence of a directive in a request does not imply that the same directive is to be given in the response.">Cache-Control</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Expires" title="The 'Expires' header field gives the date/time after which the response is considered stale. The presence of an Expires field does not imply that the original resource will change or cease to exist at, before, or after that time.">Expires</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Pragma" title="The 'Pragma' header field allows backwards compatibility with HTTP/1.0 caches, so that clients can specify a 'no-cache' request that they will understand (as Cache-Control was not defined until HTTP/1.1). When the Cache-Control header field is also present and understood in a request, Pragma is ignored.">Pragma</a></code>, <code><a href="http://webconcepts.info/concepts/http-header/Warning" title="The 'Warning' header field is used to carry additional information about the status or transformation of a message that might not be reflected in the status code. This information is typically used to warn about possible incorrectness introduced by caching operations or transformations applied to the payload of the message.">Warning</a></code></li>
						<li><a href="http://webconcepts.info/concepts/http-warn-code/" title="List of all HTTP Warn Codes">HTTP Warn Codes</a>: <code><a href="http://webconcepts.info/concepts/http-warn-code/110" title="A cache SHOULD generate this whenever the sent response is stale.">110</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/111" title="A cache SHOULD generate this when sending a stale response because an attempt to validate the response failed, due to an inability to reach the server.">111</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/112" title="A cache SHOULD generate this if it is intentionally disconnected from the rest of the network for a period of time.">112</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/113" title="A cache SHOULD generate this if it heuristically chose a freshness lifetime greater than 24 hours and the response's age is greater than 24 hours.">113</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/199" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action, besides presenting the warning to the user.">199</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/214" title="This Warning code MUST be added by a proxy if it applies any transformation to the representation, such as changing the content-coding, media-type, or modifying the representation data, unless this Warning code already appears in the response.">214</a></code>, <code><a href="http://webconcepts.info/concepts/http-warn-code/299" title="The warning text can include arbitrary information to be presented to a human user or logged. A system receiving this warning MUST NOT take any automated action.">299</a></code></li>
					</ul>
					<li>Specifications add <em>one or more values</em> for <em>one or more concepts</em></li>
					<li><a href="http://webconcepts.info/specs/IETF/">Specification series</a> define naming patterns for automated processing</li>
				</ul>
			</slide>
			<slide id="concepts">
				<title>Web Concepts: <a href="http://webconcepts.info/concepts/">Concepts and Values</a></title>
				<ul>
					<li>Concepts establish a namespace for sharing values with shared meanings</li>
					<li><a href="http://webconcepts.info/concepts/http-header/" title="List of all HTTP Header Fields">HTTP Header Fields</a> are one concept with currently 200 distinct values</li>
					<ul>
						<li>The currently listed values are defined in W3C/IETF specifications</li>
						<li>If required the list could be extended with de-facto standards as well</li>
					</ul>
					<li><a href="http://webconcepts.info/concepts/link-relation/" title="List of all Link Relation Types">Link Relation Types</a> are an extensible and fuzzy concept</li>
					<ul>
						<li>123 distinct link relation types have been established as registered values</li>
						<li>Hypermedia applications often will use <q>private</q> URI-identified relations</li>
					</ul>
				</ul>
			</slide>
			<slide id="overview">
				<title>Web Concepts Overview</title>
				<img src="web-concepts.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="spec-series">
				<title>Specification Series</title>
				<listing src="specs.xml" line="4-22"/>
			</slide>
			<slide id="concept-config">
				<title>Concept Configuration</title>
				<listing src="concepts.xml" line="20-24"/>
				<listing src="concepts.xml" line="30-39"/>
			</slide>
			<slide id="constraining-concepts">
				<title>Constraining Concepts</title>
				<ul>
					<li>Ignore/remove <em>specifications</em> that you are not interested in</li>
					<li>Ignore/remove <em>specification series</em> that you are not interested in</li>
					<li>Ignore/remove <em>organizations</em> that you are not interested in</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be one starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="custom-concepts">
				<title>Custom Concepts</title>
				<ul>
					<li>Add <em>specifications</em> that you are interested in</li>
					<li>Add <em>specification series</em> that you are interested in</li>
					<li>Add <em>organizations</em> that you are interested in</li>
					<li>Anything that has potential for reuse can and should be added</li>
					<li>The resulting specifications are <em>your</em> Web Concepts</li>
					<li>They can be one starting point for <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API guidelines</a></li>
				</ul>
			</slide>
			<slide id="concept-coverage">
				<title>Concept Coverage</title>
				<ul>
					<li>Track <em>concept value usage</em> across APIs</li>
					<li>Create a dashboard of concept/value popularity (possibly over time)</li>
					<li>Can be done through code analysis (up to a certain point)</li>
					<li>Probably works better/easier through <q>service fabric instrumentation</q></li>
					<li>Ideally separate tooling and backed by an API/format for representing usage data</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/www-2019"><code>dret.net/lectures/www-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="2019-05-www-api-styles.pdf">
		<title short="Styles">Styles: Five API Styles</title>
	</presentation>
	<presentation external="2019-05-www-api-design.pdf">
		<title short="Design">Design: Learning the API Design Method</title>
	</presentation>
	<presentation id="products">
		<title short="Products">Products: Pillars and Maturity</title>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a>&#160;· <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-sunset-header" title='Erik Wilde, "The Sunset HTTP Header", Internet Draft wilde-sunset-header'>Sunset Header</a></toc>
		<part id="product-landscape-1">
			<title>From Products to Landscapes</title>
			<slide id="focus-scale-1">
				<title>Scaling the API Practice (Focus)</title>
				<img title="Digital Transformation and API Landscapes: Focus and Scale" src="focus-scale-perspectives.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="continuity-scale-1">
				<title>Scaling the API Practice (Continuity)</title>
				<img title="Continuous Architecting: Continuity and Scale" src="continuity-scale.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="product-compass">
			<title>CAM Product Compass</title>
			<slide id="pillar-maturity">
				<title>Product Pillars and Maturity</title>
				<ul>
					<li><em>API Products</em> are created in the context of (possibly implicit) API landscapes</li>
					<ul>
						<li>They are influenced by the culture and constraints of the landscape</li>
					</ul>
					<li><em>Product Pillars</em> identify areas of investment during an API's lifetime</li>
					<li><em>Product Maturity</em> describes stages of an API product's lifetime</li>
				</ul>
			</slide>
			<slide id="product-pillars">
				<title>CAM Product Compass</title>
				<img src="cam-compass-product.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="compass-maturity">
				<title>CAM Product Compass: Maturity</title>
				<img src="compass-maturity.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="product-compass-change-management">
				<title>CAM Product Compass: Change Management</title>
				<ul>
					<li>Does your design include a plan how to make any changes to the API?</li>
					<li>Do you have an idea of what your API should and shouldn't be, so that you can more easily decide which evolution paths you are trying to keep open?</li>
					<li>If your design does not plan on evolving the API itself, do you have a plan how to operate multiple versions and how to manage the consumers of these multiple versions?</li>
					<li>If your design includes a plan for evolving the API itself, do you document this clearly so that clients know what to expect?</li>
					<li>Does your documentation include a history of changes so that it is possible for consumers to understand how the API evolved?</li>
					<li>Do you have a plan how to decommission the API, and how this will be communicated to active consumers?</li>
				</ul>
			</slide>
			<slide id="product-compass-deployment">
				<title>CAM Product Compass: Deployment</title>
				<ul>
					<li>Deployment automation for the API product is done in line with the strategic goals, so that deployments can be rolled out fast enough.</li>
					<li>Deployment is aligned with the change management principles, so that if necessary, multiple versions can be operated and potentially discovered in parallel.</li>
					<li>Deployment decisions are structured in a way so that given the constraints of when to release and who gets to decide, deployment can happen as fast as possible.</li>
					<li>Deployment scalability has been taken into account, so that scaling the product up when required is supported by the deployment packaging model and by the deployment environment.</li>
				</ul>
			</slide>
			<slide id="product-compass-design">
				<title>CAM Product Compass: Design</title>
				<ul>
					<li>Have you identified (based on the API product strategy) who the API is designed for, and included that perspective in the design process?</li>
					<li>Given the API's strategy, is the design balancing the needs and optimization potential for the individual API product with those for the API landscape?</li>
					<li>Given the API's style and technology, is it using a recommended and/or standardized description format that makes it easier for consumers to gain an initial understanding of the API, possibly aided by tooling they can use?</li>
				</ul>
			</slide>
			<slide id="product-compass-development">
				<title>CAM Product Compass: Development</title>
				<ul>
					<li>Are design and development coordinated so that any changes in the API design (the interface description) can be easily reflected and implemented in the development process?</li>
					<li>Does development include technologies and/or tools that are not part of the recommended development technologies and/or tools in the organization?</li>
				</ul>
			</slide>
			<slide id="product-compass-discovery">
				<title>CAM Product Compass: Discovery</title>
				<ul>
					<li>Given the strategic goals of the API product, marketing is targeting the appropriate channels to make sure that potential users can easily discover the API.</li>
					<li>Based on the available documentation and the strategic goals, the discovery experience takes into account the best way how potential new users can understand the API product once they discover it.</li>
					<li>Based on the change management strategy, it is made sure that it is always the most recent version that is made available through all discovery channels.</li>
				</ul>
			</slide>
			<slide id="product-compass-documentation">
				<title>CAM Product Compass: Documentation</title>
				<ul>
					<li>Is the documentation and learning experience for the API based on the strategic goals of the API product?</li>
					<li>Is documentation for the API integrated into the API landscape as much possible, given the strategic goals of the API product?</li>
					<li>Does the API product provide its documentation assets in reusable ways, so that they cab be integrated into other documentation services (such as a portal) as needed?</li>
					<li>Is documentation produced and published so that it is easy to identify the API product version the documentation is for?</li>
				</ul>
			</slide>
			<slide id="product-compass-monitoring">
				<title>CAM Product Compass: Monitoring</title>
				<ul>
					<li>Given the strategic goals, do the monitoring capabilities include all the information that is needed to evaluate the API product's health and success?</li>
					<li>Is all the monitoring information collected in a way that it can be easily accessed and reused?</li>
					<li>All of the data monitored has undergone security considerations, and for any PII data in particular, it is made sure that all security and privacy considerations are applied to monitoring tooling and services as well.</li>
				</ul>
			</slide>
			<slide id="product-compass-security">
				<title>CAM Product Compass: Security</title>
				<ul>
					<li>The API product controls basic technical security issues (identities, authenticate clients and end users, authorize usage, and implement rate limits, ...) either itself or by using libraries or tooling.</li>
					<li>Documentation and design expose as little information about implementation details as possible to reduce the attack surface.</li>
					<li>Data management by the API product has been reviewed and verified to comply with the applicable regulations.</li>
					<li>The API supports necessary support functions to comply with known regulations (such as GDPR) around security and privacy.</li>
					<li>Security considerations are part of the deployment considerations, so that for example geographic locations are taken into account.</li>
				</ul>
			</slide>
			<slide id="product-compass-strategy">
				<title>CAM Product Compass: Strategy</title>
				<ul>
					<li>Do you have a clearly defined and documented reason why the API exists?</li>
					<li>Are there clearly defined criteria and indicators (such as OKR or KPI) that allow you to say whether the strategic goal has been reached or not?</li>
					<li>Do you have plans for how to balance investment in product pillars based on the strategy and goals (i.e., to implement your strategy and reach your goals)?</li>
					<li>Is there a plan for when and how the strategy or investment can be adjusted if the indicators or other information indicate that such a change is advisable?</li>
				</ul>
			</slide>
			<slide id="product-compass-testing">
				<title>CAM Product Compass: Testing</title>
				<ul>
					<li>Is testing using as much existing tooling as possible?</li>
					<li>Are there metrics in place to evaluate and observe the coverage of tests?</li>
					<li>Do your tests include scenarios where consumed APIs are not performing or are not reachable, in order to test for resiliency of the API product?</li>
				</ul>
			</slide>
			<slide id="compass-api">
				<title>CAM Product Compass: Results</title>
				<img src="compass-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="change-management">
			<title>Change Management</title>
			<part id="change-management-introduction">
				<title>Introduction</title>
				<slide id="versioning-practice">
					<title>Versioning in Practice</title>
					<ul>
						<li>Version numbers have an almost mythical role in IT</li>
						<ul>
							<li>But often they are only useful for signaling continuity or breakage points</li>
							<li>Most things work or break in a binary way (or simply refuse to even try)</li>
						</ul>
						<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
						<ul>
							<li><em>Backwards compatibility</em> means to work with older components</li>
							<li><em>Forward compatibility</em> means to work with more advanced components</li>
						</ul>
						<li>The Web has good rules to support both compatibility types</li>
						<ul>
							<li><em>Backwards compatibility:</em> New browser accessing older content</li>
							<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
						</ul>
					</ul>
				</slide>
				<slide id="versioning-tweet-fielding">
					<title>Versioning Breaks Things</title>
					<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
				</slide>
				<slide id="evolution">
					<title>Plan for Evolution</title>
					<ul>
						<li>Planning for evolution means to reduce pain in the future</li>
						<ul>
							<li>No immediate benefits other than <q>doing the right thing</q></li>
							<li>Modest effort when part of the API design process and culture</li>
						</ul>
						<li>Extensibility should be part of the <em>API design culture</em></li>
						<ul>
							<li>Each API must have and document a plan for API evolution</li>
							<li>The simplest possible plan may be to never change the API</li>
						</ul>
						<li>Extensibility should be made easy for API consumers</li>
						<ul>
							<li>Provide test cases that simulate correct/incorrect API extensions</li>
							<li>Provide feature flags so that services can enter <q>test mode</q></li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="robust-extensibility">
				<title>Robust Extensibility</title>
				<slide id="core-semantics">
					<title>Meaningful Core Semantics</title>
					<ul>
						<li>The core of the API allows clients to have meaningful interactions</li>
						<ul>
							<li>The starting point of an API should be meaningful and complete</li>
						</ul>
						<li>The core of the API is robust over time</li>
						<ul>
							<li>Anything that is added to the core does not change the core semantics</li>
						</ul>
						<li>Anything that is not part of the core can be safely ignored</li>
						<ul>
							<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
						</ul>
					</ul>
				</slide>
				<slide id="extension-points">
					<title>Well-Defined Extension Points</title>
					<ul>
						<li>APIs should be clear about where extensions are allowed</li>
						<ul>
							<li>API metamodels often decide where (potential) extension points are</li>
							<li>API schemas/definitions should further narrow down where extensions are allowed</li>
						</ul>
						<li>API tests can make sure that the extension points are properly implemented</li>
						<ul>
							<li>Extensions in allowed places are ignored and tests should succeed</li>
							<li>Extensions in other places should raise errors about malformed content</li>
						</ul>
						<li>Extension points are interesting to support in generic software</li>
						<ul>
							<li>Monitoring can report which and where extensions are being used</li>
							<li>Libraries can make it easy to create/parse extension data</li>
						</ul>
					</ul>
				</slide>
				<slide id="processing-model">
					<title>Well-Defined Processing Model</title>
					<ul>
						<li>Extensions are well-defined and their handling is well-defined as well</li>
						<ul>
							<li>Extension points make it clear where to expect extensions</li>
							<li>Processing models make it clear what to do with extensions</li>
						</ul>
						<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
						<ul>
							<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
							<li>HTML has a rule of ignoring unknown elements but processing their content</li>
						</ul>
						<li>How to <em>learn</em> about extensions is a different matter</li>
						<ul>
							<li>If an API evolves along a single path it may be as simple as looking along that path</li>
							<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="extensibility-examples">
				<title>Extensibility Examples</title>
				<slide id="extensibility-content">
					<title>Extensibility of Content</title>
					<ul>
						<li>Extending content can be done by <em>additive</em> changes to the content</li>
						<ul>
							<li><em>Adding properties</em> to the existing content model</li>
							<li><em>Limiting properties</em> to a more constraining appearance/value model</li>
						</ul>
						<li>Extension can never change the semantics of existing content</li>
						<ul>
							<li><em>Ignoring</em> extensions always must be a safe thing to do</li>
							<li><em>Dependencies across extensions</em> should be avoided if possible</li>
						</ul>
						<li>Specifying <em>extension points</em> depends on the representation format</li>
					</ul>
				</slide>
				<slide id="extensible-content-xml">
					<title>XML Content Extension</title>
					<listing src="address.xml"/>
					<listing src="address-extended.xml"/>
				</slide>
				<slide id="extensible-content-xsd">
					<title>XML Content Extension: XSD Schema</title>
					<listing src="address.xsd"/>
				</slide>
				<slide id="extensible-content-json">
					<title>JSON Content Extension</title>
					<listing src="address.json"/>
					<listing src="address-extended.json"/>
				</slide>
				<slide id="extensibility-control">
					<title>Extensibility of Controls</title>
					<ul>
						<li>Controls expose new paths of the workflow available to clients</li>
						<ul>
							<li>New paths should not have any impact on existing paths</li>
							<li>Existing clients should ignore those paths</li>
						</ul>
						<li>Hypermedia formats should be based on controls being an open set</li>
						<ul>
							<li>Specifics on how to add and handle extensions depend on the format</li>
						</ul>
					</ul>
				</slide>
				<slide id="hal-extension">
					<title>Extending Controls in HAL</title>
					<listing src="hal.json" href="http://stateless.co/hal_specification.html" line="30-37"/>
					<listing src="hal-extended.json"/>
				</slide>
			</part>
			<part id="versioning-strategies">
				<title>Versioning Strategies</title>
				<slide id="semantic-versioning">
					<title><a href="http://semver.org/">Semantic Versioning</a></title>
					<ul>
						<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
						<li>Version numbers follow the <code>MAJOR.MINOR.PATCH</code> pattern and the following rules</li>
						<ul>
							<li>Increase <code>MAJOR</code> version for incompatible API changes</li>
							<li>Increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
							<li>Increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
						</ul>
						<li>Mostly about how to name implementation artifacts but also applicable to APIs</li>
						<ul>
							<li>Exposing detailed version/patch information is a potential security risk</li>
							<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
						</ul>
					</ul>
				</slide>
				<slide id="service-api-version">
					<title>Service vs. API Version</title>
					<ul>
						<li><em>Service versions</em> may be internal information only</li>
						<ul>
							<li>Implementation information does not have to show up in the API</li>
							<li>For internal/trusted/open cases service and API may be the same thing</li>
						</ul>
						<li><em>API versions</em> are about changes that may affect consumers</li>
						<ul>
							<li><code>PATCH</code> does not change API design or behavior apart from increasing quality</li>
							<li><code>MINOR</code> does change API behavior but in a safe way</li>
							<li><code>MAJOR</code> changes API behavior in ways that require client adaptations</li>
						</ul>
						<li><code>PATCH</code>/<code>MINOR</code> may make sense to expose inside the API</li>
						<li><code>MAJOR</code> means that there is a <em>different API</em> for the <em>same service</em></li>
					</ul>
				</slide>
				<slide id="version-identification">
					<title>Identifying Versions</title>
					<ul>
						<li>Versioning may be necessary when the extension model is not working anymore</li>
						<li>Three main ways how to distinguish between versions at the API level</li>
						<ul>
							<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
							<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
							<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
						</ul>
						<li>All of these have side-effects which have to be balanced</li>
						<ul>
							<li>New URIs change resource identity which may result in data integration problems</li>
							<li>Custom headers are specific for a service and hard to use in the general Web fabric</li>
							<li>Media types often are not used by APIs or the clients consuming them</li>
						</ul>
						<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
						<ul>
							<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
							<li>Version numbers can be used <em>anywhere</em> in the URI path</li>
						</ul>
					</ul>
				</slide>
				<slide id="linking-versions">
					<title>Linking Versions</title>
					<ul>
						<li>Communicating versions via links works better than naming schemes</li>
						<ul>
							<li>APIs remain self-contained as long as consumers are working with one version</li>
							<li>APIs are brought into context when consumers want versioning information</li>
						</ul>
						<li><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a> defines link relations for <q>simple version navigation</q></li>
						<ul>
							<li><code>successor-version</code> links to the newer version of the API</li>
							<li><code>latest-version</code> links to the newest version of the API</li>
							<li><code>predecessor-version</code> links to the older version of the API</li>
							<li><code>version-history</code> links to a resource about the version history</li>
						</ul>
						<li>Plays well with <em>home documents</em> and their role for an API</li>
						<ul>
							<li>APIs share home documents or at least version histories across versions</li>
							<li>Versioning links are used to allow navigation across all API versions</li>
						</ul>
					</ul>
				</slide>
			</part>
			<part id="decommissioning">
				<title>Decommissioning</title>
				<slide id="http-sunset">
					<title>Signaling API End-of-Life</title>
					<ul>
						<li>APIs can change in terms of features and will be decommissioned at some point</li>
						<ul>
							<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
							<li><em>Hypermedia</em> helps as a pattern to move extensibility beyond data models</li>
							<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
							<li><a href="http://dret.typepad.com/dretblog/2015/08/http-sunset-header.html">HTTP <code>Sunset</code>ting</a> can be used to <a href="http://webconcepts.info/concepts/http-header/Sunset">signal upcoming sunsets on the HTTP level</a></li>
						</ul>
						<li>One possible requirement is that APIs must support <code href="http://webconcepts.info/concepts/http-header/Sunset">Sunset</code></li>
						<ul>
							<li>Services must document/describe the support of <code>Sunset</code></li>
							<li>Services may implement <code>Sunset</code> any way they like</li>
							<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="api-journey-guidance">
				<title>Guiding the API Journey</title>
				<ul>
					<li>Gather and combine and evolve guidelines for your API journey</li>
					<li>Help teams with investing the right effort at the right time</li>
					<li>Understand where your APIs are and where you want them to be</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/www-2019"><code>dret.net/lectures/www-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="2019-05-www-api-consumption.pdf">
		<title short="Consumption">Consumption: Network and Dependency Challenges</title>
	</presentation>
	<presentation id="landscapes">
		<title short="Landscapes">Landscapes: Aspects and their Management</title>
		<toc class="resources"></toc>
		<part id="product-landscape-2">
			<title>From Products to Landscapes</title>
			<slide id="focus-scale-2">
				<title>Scaling the API Practice (Focus)</title>
				<img title="Digital Transformation and API Landscapes: Focus and Scale" src="focus-scale-perspectives.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="continuity-scale-2">
				<title>Scaling the API Practice (Continuity)</title>
				<img title="Continuous Architecting: Continuity and Scale" src="continuity-scale.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="landscape-management">
			<title>API Landscape Management</title>
			<slide id="mission">
				<title>Increasing Product Team Productivity</title>
				<ul>
					<li>API product teams need guidance, autonomy, and support</li>
					<ul>
						<li><em>Guidance</em> helps understanding and navigating the current landscape</li>
						<li><em>Autonomy</em> allows choices to be made driven by product and user needs</li>
						<li><em>Support</em> increases productivity of teams for cross-cutting concerns</li>
					</ul>
					<li>Balancing <em>product value</em> and <em>product portfolio value</em></li>
					<ul>
						<li>Products focus on achieving <q>local maxima</q> for product value</li>
						<li>Landscapes focus on achieving <q>global maxima</q> across all products</li>
					</ul>
				</ul>
			</slide>
			<slide id="why-what-how">
				<title>Guidelines: Why? What? How? Test!</title>
				<ul>
					<li>Guidance needs to be motivated, clear, actionable, and testable</li>
					<ul>
						<li><em><q>Why</q></em> explains why a problem is a problem</li>
						<li><em><q>What</q></em> explains a design to address the problem</li>
						<li><em><q>How</q></em> explains how to implement the solution</li>
						<li><em><q>Test</q></em> provides feedback to verify compliance</li>
					</ul>
					<li>Guidance is further qualified by when it is applicable</li>
					<ul>
						<li><em>Guidance evolution</em> has stages such as <em>experimental/production/deprecated</em></li>
						<li><em>Guidance applicability</em> is decided by API maturity stage</li>
					</ul>
					<li><em>Governance</em> is about how the guidelines are <q>enforced</q>/<q>encouraged</q></li>
				</ul>
			</slide>
			<slide id="landscape-aspects">
				<title>CAM Landscape Compass</title>
				<img title="API Landscape Aspects" src="landscape-aspects.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="v1-variety">
				<title>V1: Variety</title>
				<ul>
					<li>APIs come in many different shapes (on different levels)</li>
					<ul>
						<li><em>API style</em> moved from RPC (SOAP) to Web APIs</li>
						<li><em>Web API style</em> starts embracing query-style APIs (GraphQL)</li>
					</ul>
					<li>Allow <em>more than one way</em> to address a problem</li>
					<ul>
						<li>Embrace diversity as a way to explore new ways to solve a problem</li>
					</ul>
				</ul>
				<blockquote>Example Question: How easy is it for your landscape to embrace and support a new API technology?</blockquote>
			</slide>
			<slide id="v2-vocabulary">
				<title>V2: Vocabulary</title>
				<ul>
					<li>APIs are languages that define how two parties communicate</li>
					<li>Each API is a mix of reused technology and problem-specific definitions</li>
					<ul>
						<li>Reusing generic metamodels such as XML or JSON is a natural choice for most</li>
						<li>Reusing specific models is a harder design task</li>
					</ul>
					<li>Maximizing reuse benefits producers and consumers</li>
					<ul>
						<li><em>Producers</em> don't have to re-invent the wheel for solved problems</li>
						<li><em>Consumers</em> can understand part of the API because they know it already</li>
					</ul>
				</ul>
				<blockquote>Example Question: Is there an easy way for developers to discover the vocabularies that are in use throughout existing APIs?</blockquote>
			</slide>
			<slide id="v3-volume">
				<title>V3: Volume</title>
				<ul>
					<li>API volume is a good thing and should be encouraged</li>
					<ul>
						<li>More components in an ecosystem mean more choice and better selection</li>
						<li>Selection should be <em>within</em> the ecosystem, not <em>getting into</em> the ecosystem</li>
					</ul>
					<li>Guidelines and support needs to grow and evolve along ecosystem growth</li>
					<ul>
						<li>Identifying bottlenecks <em>for the product teams</em> helps to make teams more productive</li>
						<li>Identifying bottlenecks <em>for the ecosystem</em> helps to eliminate participation barriers</li>
					</ul>
				</ul>
				<blockquote>Example Question: How easy is it for developers to design, implement, and deploy a new product?</blockquote>
			</slide>
			<slide id="v4-velocity">
				<title>V4: Velocity</title>
				<ul>
					<li>Change frequency is a good thing and should be encouraged</li>
					<li>Changes in consumption ideally are invisible to producers</li>
					<ul>
						<li><em>Onboarding</em> is invisible to producers</li>
						<li><em>Scalability</em> should be built into each product</li>
					</ul>
					<li>Changes in products ideally are invisible to consumers</li>
					<ol>
						<li><link href="v7-versioning">Change management</link> provides a robust product evolution path</li>
						<li>Product evolution is opaque and consumers always use their favorite version</li>
					</ol>
				</ul>
				<blockquote>Example Question: Does anything in the API landscape slow down teams when creating or changing APIs?</blockquote>
			</slide>
			<slide id="v5-vulnerability">
				<title>V5: Vulnerability</title>
				<ul>
					<li>Every API is a possible attack vector into a capability</li>
					<li>Security is easy to get wrong and hard to get right</li>
					<li>Security often gets API programs started</li>
					<li>Identity can become an important asset for large organizations</li>
					<ul>
						<li>GDPR is hard to get right without solid identity management</li>
					</ul>
				</ul>
				<blockquote>Example Question: Are APIs designed from the ground up to be potentially externalizable?</blockquote>
			</slide>
			<slide id="v6-visibility">
				<title>V6: Visibility</title>
				<ul>
					<li>Product catalogs are essential for product success</li>
					<li><em>Visibility refinement</em> depends on the expected target audience</li>
					<ul>
						<li><em>Private APIs</em> may be able to get away with just making them findable</li>
						<li><em>Partner APIs</em> already need some marketing so that partners will notice</li>
						<li><em>Public APIs</em> may need a comprehensive plan for a competitive market presence</li>
					</ul>
				</ul>
				<blockquote>Example Question: How easy it is for architects, teams, and consumers to explore the entire API landscape?</blockquote>
			</slide>
			<slide id="v7-versioning">
				<title>V7: Versioning</title>
				<ul>
					<li>API success creates potential problem for API products</li>
					<ul>
						<li>More usage means more feedback means more input and motivation to improve the product</li>
						<li>More usage means greater risk for potential disruption of existing consumers</li>
					</ul>
					<li>Managing products and their implementations</li>
					<ul>
						<li><em>Implementations</em> should use well-know schemes such as <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a></li>
						<li><em>APIs</em> should expose a subset of the implementation version information</li>
						<li><em>API management</em> can take care of some product management issues</li>
					</ul>
				</ul>
				<blockquote>Example Question: Are APIs designed and implemented so that changes create as little disruption as possible?</blockquote>
			</slide>
			<slide id="v8-volatility">
				<title>V8: Volatility</title>
				<ul>
					<li>Products in ecosystems appear, change, and disappear</li>
					<ul>
						<li>Change is not a problem but a feature that is essential for ecosystem growth</li>
					</ul>
					<li>Treating dependencies responsibly increases product resilience</li>
					<ul>
						<li>Not making any assumptions about APIs always being accessible</li>
						<li>Always behaving well when APIs are inaccessible</li>
					</ul>
					<li>Client-side products (such as SDKs) need to be resilient</li>
					<li>Testing always should include degraded and inaccessible API dependencies</li>
				</ul>
				<blockquote>Example Question: Are all dependencies implemented to be visible and to behave responsibly when some APIs fail?</blockquote>
			</slide>
			<slide id="api-design">
				<title>Good Plumbing Matters</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="continuous-architecting">
			<title>Continuous Architecting</title>
			<slide id="ford-model-t">
				<title>Interface Design</title>
				<img src="ford-model-t.jpg" title="Model T Speedster" href="https://commons.wikimedia.org/wiki/File:1913_Ford_Model_T_Speedster_dashboard.JPG" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="audi-rs6-plus">
				<title>Interface Continuity and Evolution</title>
				<img src="audi-rs6-plus-interior.jpg" title="Audi RS6 Plus Interior" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-api">
				<title>API your APIs</title>
				<ul>
					<li>Expose design-time and runtime API information in the API</li>
					<ul>
						<li><em>Design-time</em> allows automation of API landscape overview</li>
						<li><em>Runtime</em> allows automation of API landscape status</li>
					</ul>
					<li>Follow <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust extensibility principles</a> for these <q>API APIs</q></li>
					<ul>
						<li><em>Meaningful Core:</em> Start with a simple but useful scenario</li>
						<li><em>Extension Points:</em> Think about how scenarios might evolve</li>
						<li><em>Processing Model:</em> Be clear about how extensions are handled</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-patterns">
				<title>Emerging API Patterns</title>
				<ul>
					<li>Self-description for APIs is increasing</li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7807">Problem details</a> as a way how APIs expose error information</li>
					<ul>
						<li>Enables generic error handling but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/nottingham-json-home">Home documents</a> as a way how APIs provide starting pages</li>
					<ul>
						<li>Enables harvesting of API start points but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/inadarei-api-health-check">Healthcheck reports</a> as a way how APIs expose status information</li>
					<ul>
						<li>Enables landscape-level status reports but also allows additional information</li>
					</ul>
					<li><a href="http://dret.net/lectures/apistrat-2018">API Labels</a> as a way for representing <q>API product labels</q></li>
					<ul>
						<li>Share <em>API labels</em> as a way to describe cross-cutting aspects of APIs</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="ecosystems">
				<title>Ecosystems win over Systems</title>
				<ul>
					<li>Ecosystems have built-in mechanisms for determining fitness</li>
					<ul>
						<li>Systems are easy to build but hard to improve over time</li>
						<li>Ecosystems are hard to build but easy to improve over time</li>
					</ul>
					<li>APIs are the plumbing that make product ecosystems work</li>
					<ul>
						<li><em>Good plumbing</em> allows the ecosystem to change and evolve organically</li>
						<li><em>Bad plumbing</em> means that not all potential product value is realized</li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks!</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/www-2019"><code>dret.net/lectures/www-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation external="2019-05-www-api-governance.pdf">
		<title short="Governance">Governance: Decision Making and Observability</title>
		<toc class="resources"><a href="https://www.apiscene.io/product/how-to-establish-and-grow-an-effective-api-governance-process/" title='James Higginbotham, "How to Establish and Grow an Effective API Governance Process", April 2019'>Establishing Effective API Governance</a></toc>
	</presentation>
</hotspot>