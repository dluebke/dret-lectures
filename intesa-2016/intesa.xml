<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="api.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Intesa Sao Paolo API Workshop, Moncalieri, Italy</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2016-10-04">October 4, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top">
							<b><span class="summary"><hotspot:title/></span><span class="toggle">:</span></b> <span class="toggle"><span class="description"><hotspot:toc class="abstract"/></span></span>
						</td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction</title>
		<toc class="abstract">APIs increasingly become the <em>connective tissue</em> of the Web in general, and the way how business is looking at their IT strategy and structure in particular. APIs are what both <em>separate</em> and <em>connect</em> collaborating and communicating peers: They facilitate <em>loose coupling</em> of service providers and consumers and thus strike a balance between the ability to collaborate and cooperate, while still maintaining independence and individual control.</toc>
		<toc class="resources"><a href="http://dret.net/biblio/reference/pau09a" title="Cesare Pautasso and Erik Wilde, 'Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design', Proceedings of the 18th International World Wide Web Conference, ACM Press, Madrid, Spain, April 2009">Loose&#160;Coupling</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Design and Strategy</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title>API Academy</title>
				<img src="ca-logo.png" href="http://www.ca.com/" title="CA Technologies" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="resources"><a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture">Microservices Book</a>&#160;· <a href="http://www.martinfowler.com/articles/microservices.html" title="Martin Fowler on Microservices">Fowler on Microservices</a></toc>
		<toc class="abstract"><em>Microservice Architecture</em> and <em>Microservices</em> embrace a new style of IT development and culture that focuses on speed, safety, robustness, and scalability. Taking the ideas of agile development, CI/CD, and DevOps one step further, microservices embrace organizational changes as well, so that improved IT processes are not compromised by the side-effects of organizational realities.</toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="5in5">
			<title>Microservices: 5 in 5</title>
			<slide id="why">
				<title>Why?</title>
				<ul>
					<li>IT is the/a key factor for organizational fitness and sophistication</li>
					<li>IT complexity increases, yet IT velocity should increase as well</li>
					<li>IT landscapes need to adapt to shifting organizations/partners/strategies</li>
					<li>The line between internal and external IT is increasingly blurred/shifting</li>
					<li>Top-down design and control of complex systems is problematic</li>
				</ul>
			</slide>
			<slide id="what">
				<title>What?</title>
				<ul>
					<li><em>Reduce</em> system size to the max and integrate into an ecosystem</li>
					<li>Make the system implementations <em>self-contained</em>, <em>self-sustaining</em>, and <em>independent</em></li>
					<li><em>Cultivate</em> organizational structures aligned with the system boundaries</li>
					<li><em>Empower</em> system developers/owners to make their own design decisions</li>
					<li><em>Enforce</em> system separation by disallowing shortcuts</li>
				</ul>
			</slide>
			<slide id="how">
				<title>How?</title>
				<ul>
					<li>Focus on <em>team size</em> and <em>service scope</em> to keep size small</li>
					<li>Focus on <em>effective</em> ways to speed up service delivery</li>
					<li>Focus on <em>standalone-ability</em> throughout a service's lifecycle</li>
					<li>Focus on <em>ecosystems</em> of services to improve overall robustness</li>
					<li>Focus on <em>loose coupling</em> so that the ecosystem is resilient</li>
				</ul>
			</slide>
			<slide id="definition-goals">
				<title>One Definition: Goals</title>
				<p class="abstract">An architectural style for building solutions as network-based systems of services modularized by domains in order to improve the solutions’ evolvability, deployability, composability, scalability, resiliency and replaceability
				</p>
			</slide>
			<slide id="definition-methods">
				<title>Another Definition: Methods</title>
				<p class="abstract">A <em>microservice</em> is an independently deployable component of bounded scope that supports interoperability through message-based communication. <em>Microservice architecture</em> is a style of engineering highly automated, evolvable software systems made up of capability-aligned microservices.</p>
			</slide>
		</part>
		<part id="big-picture">
			<title>The Big Picture</title>
			<slide>
				<title>Important IT Trends</title>
				<table>
					<tr><th>CI/CD</th><td>No more fear of change</td></tr>
					<tr><th>Cloud Computing</th><td>Instantaneous provisioning</td></tr>
					<tr><th>Web APIs</th><td>Self-serve integration</td></tr>
					<tr><th>DevOps</th><td>An empathetic, agile culture</td></tr>
					<tr><th>Open Source Everything</th><td>Instant pluggable code</td></tr>
					<tr><th>JavaScript Frameworks</th><td>A way to create more developers</td></tr>
					<tr><th>GitHub</th><td>A way to connect all these developers</td></tr>
					<tr><th>Containers/Docker</th><td>Exact replication of code deployments</td></tr>
				</table>
			</slide>
			<slide id="goals">
				<title>Microservice Goals</title>
				<ul>
					<li>Reduce Cost</li>
					<li>Increase Release Speed</li>
					<li>Improve Resilience</li>
					<li>Enable Visibility</li>
				</ul>
			</slide>
			<slide id="conway">
				<title>Conway's Laws</title>
				<ol>
					<li>Focus on communications (<q>Communication dictates design</q>)</li>
					<li>Support continuous process (<q>Be able to do it over</q>)</li>
					<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
					<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
				</ol>
			</slide>
		</part>
		<part id="details">
			<title>Some Details/Questions</title>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
				</ul>
			</slide>
			<slide id="containers">
				<title>Containerization!</title>
				<ul>
					<li><q href="http://www.apiacademy.co/resources/api360-microservices-summit-microservices-blind-spots/">Containerization is the gateway drug for microservices.</q></li>
					<li>Containers exist because of CI/CD (rapid deployment)</li>
					<li>Containers allow agility <em>on the development and deployment level</em></li>
					<li>MSA allows agility <em>on the service ecosystem level</em></li>
					<li>MSA without (some form of) containerization is hard to imagine</li>
				</ul>
			</slide>
			<slide id="ms-size">
				<title>How Micro?</title>
				<ul>
					<li>There is no hard limit on the size of a Microservice</li>
					<li>Domain limits (DDD) are a good starting point</li>
					<li>Team size (<link href="conway">Conway</link>) is a good starting point</li>
				</ul>
			</slide>
			<slide id="ms-size-upside">
				<title>How Micro? The Good News!</title>
				<ul>
					<li>MSA tells you to keep services independent and agile</li>
					<li>MSA is a continuous process of reassessing services and their utility</li>
					<ul>
						<li>If a service is too big, split service and team and relaunch the new services</li>
						<li>If granularity is too small, join teams and services and relaunch the new service</li>
					</ul>
					<li>...but still not a simple answer to the <q>how big?</q> question</li>
				</ul>
			</slide>
			<slide id="services-or-code">
				<title>Why the Code Focus?</title>
				<ul>
					<li>Loose coupling is essential and not an easy thing to get right</li>
					<li>Microservice teams have complete authority over technology choices</li>
					<ul>
						<li>But they have to develop and deploy according to MSA</li>
					</ul>
					<li>Apart from <q>being agile</q>, the only visible part is the API</li>
					<li>MSA critically depends on API strategy, design, and tooling</li>
					<ul>
						<li><em>API quality</em> is a critical factor for MSA landscape fitness</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide>
				<title>Microservices Matter</title>
				<ul>
					<li>They combine some essential SE trends of the past decade</li>
					<li>MSA results in service landscapes that can evolve and adapt faster and better</li>
					<li>MSA has a lot of tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to MSA is a gradual process and can take several years</li>
				</ul>
			</slide>
			<slide id="msa-book-2">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/intesa-2016/microservices"><code>dret.net/lectures/intesa-2016/microservices</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/intesa-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="api-design">
		<title>API Design</title>
		<toc class="abstract"><em>Microservice Architecture</em> is about loose coupling, making sure that every service is entirely self-contained and can only be interacted with through its API. Another important aspect of that architectural style is that designers and developers have a lot of autonomy when it comes to designing, developing, and deploying their services. For this reason, <em>API design</em> for microservices must specifically target the <em>diversity</em> and <em>decentralization</em> that are inherent properties of any microservices landscape.</toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="design-issues">
			<title>API Design Issues</title>
			<slide id="api-design">
				<title>General API Design Issues</title>
				<ul>
					<li>APIs are the domain boundaries of teams and capabilities</li>
					<li>Keeping the boundaries <em>clear</em> and <em>clean</em> is essential for microservices</li>
					<li><em>Developer Experience (DX)</em> helps to manage and maintain the boundaries</li>
					<li>Managing <em>API Design</em> and <em>Documentation</em> is an essential part of any <em>API Strategy</em></li>
					<li><em>API Design Quality</em> directly impacts the success of any <em>API Strategy</em></li>
				</ul>
			</slide>
			<slide id="ms-design">
				<title>Microservice API Design Issues</title>
				<ul>
					<li><em>Diversity:</em> Microservice teams are free to design their APIs</li>
					<ul>
						<li>Focus on managing diversity instead of defining standards</li>
					</ul>
					<li><em>Limited Scope:</em> Microservices have a limited and typically small scope</li>
					<ul>
						<li>Minimize friction when combining APIs and consider the <q>landscape DX</q></li>
					</ul>
					<li><em>Speed:</em> Services are supposed to change and get added/deleted often</li>
					<ul>
						<li>Focus on <em>landscape management</em> and discovery and monitoring</li>
					</ul>
					<li><em>Change:</em> Services can change frequently in capabilities and/or implementation</li>
					<ul>
						<li>Encourage extensible designs for services and resilient behavior for clients</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="kafka">
			<title>The Kafka Method</title>
			<slide id="castle">
				<title>The Castle</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="messaging">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction form</q> to be as succinct as possible</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>Service Surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
			<slide id="guidance">
				<title>Provide Guidance</title>
				<ul>
					<li>Small services mean interactions across a variety of them</li>
					<li>Reduce friction by providing means for seamless interactions</li>
					<ul>
						<li><em>Identifiers</em> robustly identify resources across all services</li>
						<li><em>Links</em> guide interactions to possible following next steps</li>
						<li><em>Link Templates</em> provide the equivalent of filling out forms</li>
						<li><em>Linkbases</em> are a (weak) equivalent of traditional orchestration</li>
					</ul>
					<li><em>Guidance</em> means just that: suggestions that clients might follow</li>
					<ul>
						<li>Clients might decide to redirect or abort at any point in the process</li>
						<li>Microservices need robust programming of services <em>and</em> clients</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
					</ul>
					<li>Microservice teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to sucess</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Microservice architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="tooling">
				<title>Tooling</title>
				<ul>
					<li>Microservices are all about speed-to-production</li>
					<ul>
						<li>There is a strong culture of using tooling to get things done</li>
						<li>Tools are not prescribed but instead picked based on utility</li>
					</ul>
					<li>API Design in itself may not be the greatest area for tooling</li>
					<ul>
						<li>But finding out about existing designs can be done by tooling</li>
						<li>Drilling down into frequently used patterns can be done by tooling</li>
						<li>Documenting and publishing designs can be done by tooling</li>
					</ul>
					<li>Track and document tool usage so that teams can learn from each other</li>
				</ul>
			</slide>
			<slide id="harvesting">
				<title>Harvesting</title>
				<ul>
					<li><link href="decentralization">Decentralization</link> needs balancing forces</li>
					<ul>
						<li><em>Discovery</em> allows users to find decentralized resources</li>
						<li>Discovery can be driven by blind or focused crawling</li>
						<li>Crawling can go beyond full-text if documents are tagged</li>
					</ul>
					<li>Find a good balance of autonomy and the need for information management</li>
					<li>Monitor API producer and consumer access to design documents</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/intesa-2016/api-design"><code>dret.net/lectures/intesa-2016/api-design</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/intesa-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="api-management">
		<title>API Management</title>
		<toc class="abstract">...</toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part>
			<title>Microservices and ... SOA!</title>
			<slide id="soapy-soa">
				<title>SOA as a Bad Word</title>
				<ul>
					<li><q>Web Services</q> have surprisingly little to do with the Web</li>
					<ul>
						<li>Using XML as the first Internet/Web-scale structured data format</li>
						<li>Ignoring everything else the <q>Web as a service ecosystem</q> could have taught</li>
					</ul>
					<li>SOAPy SOA has some fundamental design problems</li>
					<ul>
						<li>Using <em>system architecture</em> instead of <em>ecosystem architecture</em></li>
						<li>Sacrificing evolution for RPC and code generation</li>
						<li>Sacrificing decentralization for distribution</li>
					</ul>
					<li>The <a href="http://ws-rest.org/">REST community</a> set back and watched from a distance</li>
					<ul>
						<li><q>Let's wait and see if/when Web Architecture is needed</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-focus">
				<title>Microservice Architecture Focus</title>
				<ul>
					<li>Microservices are <q href="http://www.infoworld.com/article/3075880/application-development/microservice-architecture-is-agile-software-architecture.html">fine-granular SOA based on Agile CD in a DevOps culture</q></li>
					<li><q><em>Speed</em> and <em>Safety</em> at <em>Scale</em> in <em>Harmony</em></q></li>
					<ul>
						<li><em>Speed:</em> The Speed of change of which a solution can evolve</li>
						<li><em>Safety:</em> The Safety of changes so that Speed doesn't kill you</li>
						<li><em>Scale:</em> Scaling the number of services and the capacity of a solution</li>
						<li><em>Harmony:</em> Have the freedom to balance Speed and Safety</li>
					</ul>
					<li>Focusing on addressing the <link href="soapy-soa">SOAPy SOA</link> pain points</li>
					<li>De-focusing the question of how to manage the MSA landscape</li>
				</ul>
			</slide>
			<slide id="apim-landscape">
				<title>MS and the API Landscape</title>
				<img title="MS/API Landscape" src="apim-landscape.png" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="landscape-explained">
				<title>Explaining the MS API Landscape</title>
				<ul>
					<li>MS and exposed APIs can be different</li>
					<li>APIM should be able to handle internal and exposed APIs</li>
					<li>What's <em>internal</em> and <em>exposed</em> can be a contextual question</li>
					<li>External API users might want to consume more than one set of APIs</li>
					<li>Exposing the landscape or an API gateway are two possible choices</li>
					<ul>
						<li>Exposing the landscape exposes its diversity</li>
						<li>Gateways can be centralized or become part of the <em>MS fabric</em> (e.g., a container)</li>
					</ul>
				</ul>
			</slide>
			<slide id="internet-of-things">
				<title>Scenario: Internet of Things</title>
				<img title="Many things means many services" href="https://pixabay.com/static/uploads/photo/2015/05/25/05/27/network-782707_960_720.png" src="iot.png" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="ms-blind-spots">
				<title>Microservices Blind Spots</title>
				<ul>
					<li>The current focus has a few blind spots</li>
					<ul>
						<li>How to find MS if an ecosystem grows beyond <q>yell across cubicles</q> size</li>
						<li>How to manage the MS landscape once an MS ecosystem is developing</li>
						<li>How design/evolve MS so that the landscape is robust and flexible</li>
					</ul>
					<li>An understandable reaction to <link href="soapy-soa">SOAPy SOA's</link> top-down approach</li>
					<ul>
						<li>It's important to focus on the central question: How are services created and implemented?</li>
						<li>Not ignoring the questions of landscaping reduces the chances of <q>MS hangover</q></li>
					</ul>
					<li>The Web can teach us some lessons about how to do some of these things</li>
					<ul>
						<li>After all, the Web <em>is</em> the ultimate global-scale service landscape</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="Landscape">
			<title>Microservice Landscape</title>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from..." href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MS is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>Microservice Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>MSA emphasizes independence and autonomy of teams</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
						<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
			<slide id="MS-v">
				<title>The Three V's of MSA</title>
				<ul>
					<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
					<ul>
						<li>How big is the MS landscape and can I get an overview of what's around?</li>
					</ul>
					<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
					<ul>
						<li>As a creator or consumer, how do I deal with different service designs?</li>
					</ul>
					<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
					<ul>
						<li>As the landscape evolves, how stable are services and their designs?</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-scale">
				<title>Scale</title>
				<ul>
					<li>Different environments have different ideas of MS scale</li>
					<ul>
						<li>Small projects may have a handful of services</li>
						<li>Large MS adopters may have hundreds or thousands of services</li>
					</ul>
					<li>Exposed APIs and microservices combined mean a bigger API inventory</li>
					<li>Using any form of discovery may not be necessary from the start</li>
					<ul>
						<li>Consider the possibility when starting the MSA effort</li>
						<li>Having a plan helps teams to be aware of the need later on</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-diversity">
				<title>Diversity</title>
				<ul>
					<li>Not all services use the same technical foundations</li>
					<ul>
						<li>Different communications mechanisms</li>
						<li>Different metamodels for data structures</li>
						<li>Different models for representing application concepts</li>
						<li>In a Web context, these are concepts such as <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">HTTP headers</a>, <a href="https://github.com/dret/sedola/blob/master/MD/mediatypes.md">media types</a>, and <a href="https://github.com/dret/sedola/blob/master/MD/linkrels.md">link relations</a></li>
					</ul>
					<li>Handling diversity can be challenging because of different <q>design universes</q></li>
					<ul>
						<li>Depending on choice, similar concepts/models may be represented differently</li>
						<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
					</ul>
					<li><link href="ms-discovery">Discovering documentation</link> will allow you a better overview of your ecosystem</li>
					<ul>
						<li>A reality-based overview of the technologies used in your landscape</li>
						<li>A possible starting point or guideline for getting MSA teams started</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Decentralization means no single point of control</li>
					<li>Decentralization means no automatic top-down visibility</li>
					<ul>
						<li><em>API gateways</em> are one way of improving visibility (and control)</li>
						<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
						<li>But this already introduces constraints for MSA design</li>
					</ul>
					<li>Complete and uncontrolled decentralization is an ideal</li>
					<ul>
						<li><em>Observe</em> how the MSA landscape develops</li>
						<li><em>Identify pain points</em> from the design and operational point of view</li>
						<li><em>Identify popular patterns</em> so that teams have a starting point</li>
						<li><em>Convincing teams</em> instead of mandatory guidelines</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="learn-from-the-web">
				<title>Web Architecture Matters</title>
				<ul>
					<li>The line between system and ecosystem architecture is blurry</li>
					<ul>
						<li><em>Ecosystems</em> emphasize decentralization and loose coupling</li>
						<li><em>Systems</em> allow efficiencies by coupling things more tightly</li>
					</ul>
					<li>MSA is about the delicate balance of speed and safety</li>
					<ul>
						<li><q>Anything goes</q> may lead to a highly diverse ecosystem</li>
						<li>Teams are likely to try to do <em>the right thing</em></li>
						<li>Demonstrating utility is a great way to promote MS design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/intesa-2016/api-management"><code>dret.net/lectures/intesa-2016/api-management</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/intesa-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="api-security">
		<title>API Security</title>
		<toc class="abstract">...</toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
		</part>
	</presentation>
	<presentation id="api-evolution">
		<title>API Evolution</title>
		<toc class="abstract">...</toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
		</part>
	</presentation>
	<presentation id="api-product-management">
		<title>API Product Management</title>
		<toc class="abstract">...</toc>
		<toc class="resources"></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
		</part>
		<part id="product-focus">
			<title>Products not Projects</title>
			<slide id="msa-products">
				<title>MSA Focus: Products</title>
			</slide>
		</part>
		<part id="data-driven">
			<title>Measure Everything</title>
		</part>
	</presentation>
</hotspot>