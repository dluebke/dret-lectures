<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="microservices-and-beyond.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>BTA Immersion 2016, Irvine, CA</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2016-08-04">August 4, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<presentation id="index">
		<title>Microservices &amp; Beyond</title>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract">Microservice Architecture tells providers to "embrace the chaos" in order to increase the speed of service development, deployment, and availability. As an architecture the style does not define any concrete technologies, and in fact makes it clear that any prescription of technologies constrains a Microservice landscape in ways that are against the architectural style. Nourishing a thriving Microservice landscape is a balancing act between encouraging some best practices so that some common patterns emerge, and making sure that these best practices are not a relapse into the strict boundaries established in previous SOA approaches such as the SOAP/WSDL model.</p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH ZÃ¼rich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Design and Strategy</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="principles">
			<title>Principles</title>
			<slide id="ms-focus">
				<title>Main Focus on Development/Deployment</title>
				<ul>
					<li>Microservice Architecture focuses on culture/development/operational aspects</li>
					<li>In order to develop/deploy MS, <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">three things are needed</a></li>
					<ul>
						<li><em>Rapid Provisioning:</em> Automated infrastructure</li>
						<li><em>Basic Monitoring:</em> Keeping an watchful eye on the MS landscape</li>
						<li><em>Rapid Deployment:</em> Ability to deploy quickly to test/production</li>
					</ul>
					<li>Loose coupling of services allows an agile service landscape</li>
					<ul>
						<li>Avoid coupling through design/development/deployment/operations</li>
						<li>The only acceptable coupling is through the service API</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Microservice Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>Less Focus on API Design and Management</title>
				<ul>
					<li>Microservice Architecture focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping API designers to avoid re-inventing the wheel</li>
						<li>Helping API providers to be more usable for consumers</li>
						<li>Helping API consumers to depend on some consistency</li>
						<li>Helping with API discovery and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-and-the-web">
				<title>Microservices and the Web</title>
				<ul>
					<li>MSA replicates the most important success factors of the Web</li>
					<ul>
						<li>Encapsulation of code, allowing polyglot implementations</li>
						<li>Encapsulation of persistence, allowing polyglot storage</li>
						<li>Encapsulation of models, making the API the only available model</li>
					</ul>
					<li>The <em>only</em> service dependency is through APIs</li>
					<ul>
						<li>Works well on the Web because of the uniform interface and HTML</li>
						<li>Only works well if services expose APIs <q>as architecturally intended</q></li>
					</ul>
				</ul>
			</slide>
			<slide id="amazon-rules">
				<title><a href="https://gist.github.com/chitchcock/1281611">Jeff Bezos' Services Rant</a>: The Rules</title>
				<ul>
					<li>Famous small set of SOA design rules</li>
					<ul>
						<li>Teams must expose functionality through services</li>
						<li>Communication happens only through service interfaces</li>
						<li>There are no hard guidelines for service design</li>
						<li>Internal/external service is a matter of policy, not one of design</li>
					</ul>
					<li>Going against the <q>let's pick a platform</q> spirit of old-school SOA</li>
				</ul>
			</slide>
			<slide id="amazon-consequences">
				<title>Jeff Bezos' Services Rant: The Consequences</title>
				<ul>
					<li>With more freedom comes more responsibility</li>
					<ul>
						<li>Monitoring and metrics are necessary for finding root causes</li>
						<li>All APIs must be hardened against DoS attacks</li>
						<li>Automated QA is necessary to really understand service health</li>
						<li>Services must be documented and registered so that they can be discovered</li>
						<li>Debugging becomes harder because of service dependencies</li>
					</ul>
					<li>Much easier in today's technology landscape than 15 years ago</li>
				</ul>
			</slide>
		</part>
		<part id="practical-issues">
			<title>Practical Issues</title>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="Where you might be going..." href="https://hbr.org/resources/images/article_assets/2015/01/JAN15_22_AU1328-001.jpg" src="microservices-reality.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>Allowing only one specific kind of service design (WSDL)</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from uniformly described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The <em>one true model</em> approach</li>
					</ul>
					<li>What does a <q>Google of Service Discovery</q> look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Add format support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="no-platform">
				<title>No Single Platform</title>
				<ul>
					<li>MSA is a style that should survive technologies</li>
					<li><q><a href="https://www.youtube.com/watch?v=Wh4PpY0J9ZI" title="API360 Microservices Summit â Microservices Blind Spots â Irakli Nadareishvili, ReferWell">Containerization will drive MSA adoption</a></q></li>
					<ul>
						<li>A fully containerized service landscape needs MSA to function</li>
						<li>Polyglot containers mean that language does not matter</li>
						<li>Data encapsulation means isolated/opaque data management</li>
					</ul>
					<li>As persistence/languages/containers evolve, APIs remain the stable factor</li>
					<ul>
						<li>The external perspective of <em>MSA management</em> is <em>API management</em></li>
						<li>The tools/languages/platforms for MSA service implementation may/will evolve over time</li>
					</ul>
				</ul>
			</slide>
			<slide id="uniform-interface">
				<title>Focus on the Interface</title>
				<ul>
					<li>Respect the MSA goal of reducing coupling</li>
					<ul>
						<li>What happens in a Microservice stays in the Microservice</li>
						<li>The only visible part of a Microservice is its published API</li>
					</ul>
					<li>Not having <q>integrated everything tools/suites</q> is an advantage in MSA-land</li>
					<ul>
						<li>Teams should have the freedom to mix and match the tools that work for them</li>
					</ul>
					<li>The <q>Microservice surface</q> should be exposed in a consumable way</li>
					<ul>
						<li>Consumable for API tooling to improve documentation and management</li>
						<li>Consumable for API consumers once they have found the service</li>
					</ul>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/bta-immersion-2016/"><code>dret.net/lectures/bta-immersion-2016/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/bta-immersion-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>