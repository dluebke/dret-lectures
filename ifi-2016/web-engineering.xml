<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="web-engineering.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="http://www.uzh.ch/en/">University of Zurich</a>, <a href="http://www.ifi.uzh.ch/" title="Department of Informatics">IFI</a> <a href="http://www.ifi.uzh.ch/en/research/colloquium/" title="IFI Colloquium Series">Colloquium</a>, Z체rich</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2016-10-20">October 20, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<presentation id="index">
		<title>The Web Engineering Challenge</title>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract">The scale, dynamics, and robustness of the Web as a decentralized information system are unparalleled in history. Since the Web took off, Web engineering has tried to identify and reuse principles and patterns that were identified as the foundations for this success story. The latest development in this space are microservices, which take a refreshingly new approach by focusing on the organizational and cultural principles underlying the design and development of IT components. In this talk we take a closer look at how microservices compare to previous approaches of using the Web as inspiration for IT design and development. The result of this closer look is the identification of a few trends that are the drivers behind the current microservices adoption, and the identification of some areas where additional work is required to better fulfill the promise of Web-scale robustness and scalability.</p>
		</slide>
		<part id="intro">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li>Computer Science at <a href="http://www.tu-berlin.de/" title="Technische Universit채t of Berlin">TU Berlin</a>; <a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Z체rich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>While at EMC, working on transforming software products into service platforms</li>
					<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Design and Strategy</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="https://www.flickr.com/photos/dret/" title="dret">Flickr</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title>API Academy</title>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Z체rich)</li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices">
			<title>Microservices</title>
			<slide>
				<title>Microservice Characteristics</title>
				<ul>
					<li>Described/defined in <a href="http://martinfowler.com/articles/microservices.html">an article early in 2014</a></li>
					<ol>
						<li>Componentization via services</li>
						<li>Organized around business capabilities</li>
						<li>Products not projects</li>
						<li>Smart endpoints and dumb pipes</li>
						<li>Decentralized governance</li>
						<li>Decentralized data management</li>
						<li>Infrastructure automation</li>
						<li>Design for failure</li>
						<li>Evolutionary design</li>
					</ol>
				</ul>
			</slide>
			<slide id="ms-focus">
				<title>Main Focus on Development/Deployment</title>
				<ul>
					<li>Microservice Architecture focuses on culture/development/operational aspects</li>
					<li>In order to develop/deploy MS, <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">three things are needed</a></li>
					<ul>
						<li><em>Rapid Provisioning:</em> Automated infrastructure</li>
						<li><em>Basic Monitoring:</em> Keeping an watchful eye on the MS landscape</li>
						<li><em>Rapid Deployment:</em> Ability to deploy quickly to test/production</li>
					</ul>
					<li>Loose coupling of services allows an agile service landscape</li>
					<ul>
						<li>Avoid coupling through design/development/deployment/operations</li>
						<li>The only acceptable coupling is through the service API</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Microservice Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>Less Focus on API Design and Management</title>
				<ul>
					<li>Microservice Architecture focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping API designers to avoid re-inventing the wheel</li>
						<li>Helping API providers to be more usable for consumers</li>
						<li>Helping API consumers to depend on some consistency</li>
						<li>Helping with API discovery and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-and-the-web">
				<title>Microservices and the Web</title>
				<ul>
					<li>MSA replicates the most important success factors of the Web</li>
					<ul>
						<li>Encapsulation of code, allowing polyglot implementations</li>
						<li>Encapsulation of persistence, allowing polyglot storage</li>
						<li>Encapsulation of models, making the API the only available model</li>
					</ul>
					<li>The <em>only</em> service dependency is through APIs</li>
					<ul>
						<li>Works (mostly) well on the Web because of the uniform interface and HTML</li>
						<li>Works (mostly) well on the service Web for <q>well-designed</q> APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="amazon-rules">
				<title><a href="https://gist.github.com/chitchcock/1281611">Jeff Bezos' Services Rant</a>: The Rules</title>
				<ul>
					<li>Famous small set of SOA design rules</li>
					<ul>
						<li>Teams must expose functionality through services</li>
						<li>Communication happens only through service interfaces</li>
						<li>There are no hard guidelines for service design</li>
						<li>Internal/external service is a matter of policy, not one of design</li>
					</ul>
					<li>Going against the <q>let's pick a platform</q> spirit of old-school SOA</li>
				</ul>
			</slide>
			<slide id="amazon-consequences">
				<title>Jeff Bezos' Services Rant: The Consequences</title>
				<ul>
					<li>With more freedom comes more responsibility</li>
					<ul>
						<li>Monitoring and metrics are necessary for finding root causes</li>
						<li>All APIs must be hardened against DoS attacks</li>
						<li>Automated QA is necessary to really understand service health</li>
						<li>Services must be documented and registered so that they can be discovered</li>
						<li>Debugging becomes harder because of service dependencies</li>
					</ul>
					<li>Sophisticated tooling required to manage the new SOA landscape</li>
					<li>Much easier in today's technology landscape than 15 years ago</li>
				</ul>
			</slide>
		</part>
		<part id="practical-issues">
			<title>Practical Issues</title>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from..." href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="Where you might be going..." href="https://hbr.org/resources/images/article_assets/2015/01/JAN15_22_AU1328-001.jpg" src="microservices-reality.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>Allowing only one specific kind of service design (WSDL)</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from uniformly described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The <em>one true model</em> approach</li>
					</ul>
					<li>What does a <q>Google of Service Discovery</q> look like?</li>
					<ul>
						<li>Starting from services, <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="https://tools.ietf.org/html/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Add format support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation">
			<title>Digital Transformation</title>
			<slide id="process-agility">
				<title>Business Process Agility</title>
			</slide>
			<slide id="dx">
				<title>API Usability/Accessibility</title>
			</slide>
		</part>
		<part id="kafka">
			<title>The Kafka Method</title>
			<slide id="castle">
				<title>The Castle</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style="height : 65% ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of input and output of processing units</li>
						<li>Implementation issues of the processing units are hidden</li>
						<li>Processing units can scale because of encapsulation and statelessness</li>
						<li>Processing steps can be easily pipelined while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li>Messaging models instead of paper forms</li>
						<li>Message models are as shallow as possible</li>
						<li>Stateless interactions allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow seamless workflows</li>
					</ul>
				</ul>
			</slide>
			<slide id="big-bureaucracy">
				<title>Big Bureaucracy</title>
				<ul>
					<li>Re-imagine bureaucracy with all physical limitations removed</li>
					<ul>
						<li>Processing time in milliseconds or seconds rather than days or weeks</li>
						<li>No limit to the number of parallel workers</li>
						<li>Input/output <q>by value</q> and <q>by reference</q> always possible options</li>
						<li>Identification/authentication/authorization via 3rd party always possible option</li>
					</ul>
					<li>Capability-aligned <q>offices</q> that are driven by innovation and demand</li>
					<ul>
						<li>New services can plug in and will thrive based on utility and usability</li>
						<li>The main success factors of a service are <em>design</em> and <em>utility</em></li>
						<li>Every office is designed <q>forms first</q> and user desks are always form-based</li>
					</ul>
				</ul>
			</slide>
			<slide id="kafka-patterns">
				<title>Kafka Patterns</title>
				<ul>
					<li>Establish <q>Service Patterns</q> that cross the Business/IT divide</li>
					<ul>
						<li><em>REST</em> and <em>statelessness</em> are very technical concepts</li>
						<li>Use relatable concepts that create value and have well-known technical solutions</li>
					</ul>
					<li>Example: How to design <q>long-running</q> business processes</li>
					<ul>
						<li><em>Busy waiting</em> is a poor design and creates poor UX</li>
						<li><em>Asynchronous processing</em> need identifiers for the running process</li>
						<li><em>Push messages</em> can be used for process updates (SMS, email, web hooks)</li>
						<li><em>Pull methods</em> can be used for requesting process status</li>
						<li>Combining these patterns in a non-technical way creates business value</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="messaging">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction form</q> to be as succinct as possible</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>Service Surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
			<slide id="guidance">
				<title>Provide Guidance</title>
				<ul>
					<li>Small services mean interactions across a variety of them</li>
					<li>Reduce friction by providing means for seamless interactions</li>
					<ul>
						<li><em>Identifiers</em> robustly identify resources across all services</li>
						<li><em>Links</em> guide interactions to possible following next steps</li>
						<li><em>Link Templates</em> provide the equivalent of filling out forms</li>
						<li><em>Overlay services</em> are a (weak) equivalent of traditional orchestration</li>
					</ul>
					<li><em>Guidance</em> means just that: suggestions that clients might follow</li>
					<ul>
						<li>Clients might decide to redirect or abort at any point in the process</li>
						<li>Microservices need robust programming of services <em>and</em> clients</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/ifi-2016/"><code>dret.net/lectures/ifi-2016/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/ifi-2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>