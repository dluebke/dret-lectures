<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="otto-group.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Otto Group API Best Practice Club (BCP)</title>
	<date short="2018-02-07">February 7, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<presentation id="index">
		<title>APIs: The Big Picture</title>
		<toc class="abstract">APIs are a hot topic nowadays, but it helps to take a step back and reflect on the reasons. These reasons can inform necessary choices about how to design and manage individual APIs, and the resulting API landscapes that organizations create over time. The current move towards Microservices makes this picture even more complex, but on the other hand allows organizations to balance speed and safety when planning and executing their digital transformation journeys. This presentation looks at issues such as API design, management, and security, and puts them into the context of the big picture of how individual APIs go through maturity phases, and how the whole API landscape has to evolve alongside.</toc>
		<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
		<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="currywurst">
				<title>About Me: What Truly Counts…</title>
				<img title="Ich bin ein Berliner" href="https://pixabay.com/en/snack-currywurst-eat-fast-food-1135183/" src="currywurst.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="why">
			<title>Why APIs?</title>
			<slide id="api-cargo-cult">
				<title>The Wonders of APIs</title>
				<img title="API Cargo Cult" src="apis-make-things-happen.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="internal-external">
				<title>Two Perspectives of API Scope/Focus</title>
				<ul>
					<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
					<ul>
						<li>Focus on <em>systems/software engineering</em> and better modularization</li>
						<li><q>Turn a system into an ecosystem.</q></li>
					</ul>
					<li><em>External:</em> Using APIs to build up ecosystems</li>
					<ul>
						<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
						<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
					</ul>
					<li>Both views are complementary and mostly a difference in perspective</li>
					<ul>
						<li>The <em>internal perspective</em> tends to gravitate towards <q>building a system</q></li>
						<li>The <em>external perspective</em> tends to ignore the complexities of decentralization</li>
					</ul>
				</ul>
			</slide>
			<slide id="business-model">
				<title>APIs Serve a Purpose</title>
				<blockquote><q>Do not try to find the right business model for your APIs; instead, try to find the right APIs for your business model.</q></blockquote>
				<p class="quotenote"><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a>: <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></p>
			</slide>
		</part>
		<part id="api-language-landscapes">
			<title>API Language Landscapes</title>
			<slide id="what-is-an-api">
				<title>What is an API?</title>
				<ul>
					<li>An API is a (representation of a) <em>product</em></li>
					<ul>
						<li>APIs are created and designed and developed</li>
						<li>APIs have typical product lifecycles</li>
					</ul>
					<li>An API provides <em>access to a capability</em></li>
					<ul>
						<li>The API is not the interesting thing</li>
						<li>The value is in the functionality of the API</li>
					</ul>
					<li>An API is a <em>language</em></li>
					<ul>
						<li>API users utilize API functionality by accessing the API</li>
						<li>Using APIs is a conversation between providers and consumers</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-design">
				<title>API Design</title>
				<ul>
					<li>APIs need to be designed just like any other product</li>
					<ul>
						<li>Design starts with an architectural style and associated patterns</li>
						<li>The style determines the context but leaves a lot of freedom</li>
						<li>Some design elements can be reused from existing APIs</li>
						<li>Some design elements have to be created for the new API</li>
					</ul>
					<li>Design works best when it reuses familiar design elements</li>
					<ul>
						<li>For UI design this allows end users to make educated guesses for better UX</li>
						<li>For API design the same concept of <em>familiarity</em> is helpful for DX</li>
					</ul>
				</ul>
			</slide>
			<slide id="car-interior">
				<title>Interface Design</title>
				<img src="audi-rs6-plus-interior.jpg" title="Audi RS6 Plus Interior" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="continuous-architecture">
				<title>Continuous Architecture</title>
				<img src="model-t.jpg" title="Model T Speedster" href="https://commons.wikimedia.org/wiki/File:1913_Ford_Model_T_Speedster_dashboard.JPG" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="dark-age">
				<title>SOAP: The Dark Age</title>
				<ul>
					<li>API design was practiced relatively little</li>
					<ul>
						<li>Developers exposed implementation internals as <em>Web services</em></li>
						<li>Many APIs were exposed from a shared monolithic codebase</li>
					</ul>
					<li>SOAPy SOA promised webby nirvana without delivering</li>
					<ul>
						<li>The main failure was the lack of focus on <em>loosely coupled implementations</em></li>
						<li>Evolution needs <em>ecosystems</em> where individuals can flourish or wane</li>
					</ul>
				</ul>
			</slide>
			<slide id="enlightenment">
				<title>Microservices: Enlightenment</title>
				<ul>
					<li>The first time enterprise IT <q>gets the Web</q></li>
					<ul>
						<li>Decouple implementations for speed and agility at scale</li>
						<li>Embrace diversity so that teams can focus on solving problems</li>
					</ul>
					<li>What do microservices mean for scale and longevity?</li>
					<ul>
						<li>Design decisions need context for the best possible products</li>
						<li><q>Designing into the void</q> never is the best strategy</li>
					</ul>
				</ul>
			</slide>
			<slide id="design-culture">
				<title>Language and Design and Culture</title>
				<ul>
					<li>Culture <em>emerges</em> as a set of shared principles and patterns</li>
					<ul>
						<li>Culture cannot be <em>created</em> from the top-down</li>
						<li>Culture can be <em>observed</em> and <em>nudged</em> over time</li>
					</ul>
					<li><em>Design culture</em> for APIs uses shared language building blocks</li>
					<ul>
						<li>Documenting what APIs and teams are using</li>
						<li>Helping teams in the API design efforts</li>
					</ul>
					<li>Documenting <em>API design culture</em> is a continuous process</li>
					<ul>
						<li>Feedback cycle based on practice and design guidance</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-styles">
				<title>API Styles are Language Families</title>
				<ul>
					<li><em>API styles</em> are chosen based on needs and/or preferences</li>
					<ul>
						<li><em>RPC</em> is based on traditional distributed system design</li>
						<li><em>HTTP CRUD</em> uses HTTP but without going <q>all the way</q></li>
						<li><em>REST</em> truly reflects Web architecture by using hypermedia</li>
						<li><em>Query</em> assumes that clients know best what they want</li>
						<li><em>Event-based</em> is based on event messages and PubSub</li>
					</ul>
					<li>Each style leaves a lot of design freedom and responsibilities</li>
					<li>Each style has different design elements for API design</li>
				</ul>
			</slide>
		</part>
		<part id="landscaping">
			<title>API Landscaping</title>
			<slide id="design-guidelines">
				<title>The Middle Ground: Guide and Help</title>
				<ul>
					<li>Create <a href="http://apistylebook.com/design/guidelines/" title="API Stylebook: Design Guidelines">Design Guidelines</a> that teams can use</li>
					<ul>
						<li>Ideally based on existing practice</li>
						<li>Ideally continuously changed based on the evolving landscape</li>
					</ul>
					<li>Writing as a form of communication</li>
					<ul>
						<li>Maintaining guidelines encourages teams to talk about design practices</li>
						<li>Reading guidelines allows teams to understand the current practice</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-excellence">
				<title>API Excellence</title>
				<img title='Digital McKinsey: "What it really takes to capture the value of APIs" by Keerthi Iyengar, Somesh Khanna, Srinivas Ramadath, and Daniel Stephens; September 2017' href="http://www.mckinsey.com/business-functions/digital-mckinsey/our-insights/what-it-really-takes-to-capture-the-value-of-apis" src="mckinsey-api-coe.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="excellence">
				<title>Excellence as a Service</title>
				<ul>
					<li>What matters for an <em>API Center of Excellence (CoE)</em>?</li>
					<ul>
						<li>Should excellence sit in CoE and be created/managed/delivered from there?</li>
						<li>Should the CoE be a <em>service</em> to enable all teams achieving excellence?</li>
					</ul>
					<li>API landscapes are <em>ecosystems</em> that need <em>cultivation</em></li>
					<ul>
						<li><em>Ecosystems</em> value diversity to improve fitness over time</li>
						<li><em>Cultivation</em> is a continuous process of feedback and improvement</li>
					</ul>
					<li>Culture evolves over time as a set of shared practices</li>
					<ul>
						<li><em>Culture</em> is a set of shared <em>do</em> and <em>don't</em> rules</li>
					</ul>
				</ul>
			</slide>
			<slide id="webby-amazon">
				<title>Web Culture: Webby Service Design</title>
				<img title="Webby Amazon" src="webby-amazon.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-patterns">
				<title>Emerging Patterns</title>
				<ul>
					<li>Self-description for APIs is increasing</li>
					<li><a href="http://webconcepts.info/specs/IETF/RFC/7807">Problem details</a> as a way how APIs expose error information</li>
					<ul>
						<li>Enables generic error handling but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/nottingham-json-home">Home documents</a> as a way how APIs provide starting pages</li>
					<ul>
						<li>Enables harvesting of API start points but also allows additional information</li>
					</ul>
					<li><a href="http://webconcepts.info/specs/IETF/I-D/inadarei-api-health-check">Healthcheck reports</a> as a way how APIs expose status information</li>
					<ul>
						<li>Enables landscape-level status reports but also allows additional information</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-dx">
				<title>APIs and API Landscapes</title>
				<ul>
					<li><em>Design Patterns</em> make designing APIs easier</li>
					<li><em>Design Patterns</em> make navigating landscapes easier</li>
					<li><em>Design Patterns</em> are continually evolving vocabularies</li>
					<li><em>Design Patterns</em> should reflect product needs</li>
					<ul>
						<li><em>Why</em> a product should have certain properties/capabilities</li>
						<li><em>What</em> can be done to address these issues</li>
						<li><em>How</em> a team may choose to implement the resolution</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-stylebook">
				<title>API Stylebook: Error Format</title>
				<img title="API Stylebook: Error Format" href="http://apistylebook.com/design/topics/http-status-standard-error" src="apistylebook-http-status-standard-error.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="interface-implementation">
			<title>Microservices and APIs</title>
			<slide id="apis-interfaces">
				<title>Interface ≠ Implementation</title>
				<img title='There is no "Microservice API"' src="mugatu-microservice-api.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-culture">
				<title>Changing Culture</title>
				<ul>
					<li>Microservices are changing the way APIs are implemented and managed</li>
					<ul>
						<li>Velocity as the main goal</li>
						<li>More design freedom for product teams (APIs <em>and</em> implementation)</li>
						<li>More complex runtime needs (diversity requires operational excellence)</li>
					</ul>
					<li>Enterprise IT has discovered <em href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>loose coupling</em> and called it <q>Microservices</q></li>
					<ul>
						<li>Individuals and interactions over processes and tools</li>
						<li>Working software over comprehensive documentation</li>
						<li>Customer collaboration over contract negotiation</li>
						<li>Responding to change over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-landscape">
				<title>A Microservices Landscape</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-change-management">
				<title>API Change Management</title>
				<ul>
					<li>API change management becomes increasingly important</li>
					<ul>
						<li>Microservices optimize for quick design/deployment/development/decommissioning</li>
						<li>Even in MSA-land there are <em>Experience APIs</em> meant to deliver some API stability</li>
					</ul>
					<li>APIs can change in terms of features and will be decommissioned at some point</li>
					<ul>
						<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
						<li><em>Hypermedia</em> helps as a pattern to move extensibility beyond data models</li>
						<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
					</ul>
					<li>Always follow the <em>why/what/how</em> triad for API strategy</li>
					<ul>
						<li><em>Why:</em> Somebody (myself/consumers) is interested in how an API will change</li>
						<li><em>What:</em> Follow principles/patterns/protocols to manage/expose API changes</li>
						<li><em>How:</em> Support tooling/services to implement and test pattern behavior</li>
					</ul>
				</ul>
			</slide>
			<slide id="sunset-patterns">
				<title>HTTP <code>Sunset</code>: An Even Simpler Example</title>
				<ul>
					<li><em>API Documentation</em> guidelines may ask for change management documentation</li>
					<ul>
						<li>Requirement: Can be as simple as making documentation discoverable on deploy</li>
						<li>Resolution: Can be as simple as stating that there is no change management</li>
					</ul>
					<li><em>Discoverability</em> and <em>machine-readability</em> are different issues</li>
					<ul>
						<li>Making description resources <em>discoverable</em> can be validated during deployment</li>
						<li>Every API entering the landscape must make change management documentation discoverable</li>
						<li>For some classes of APIs/services additional requirements may be put in place</li>
					</ul>
					<li>One possible requirement is that <em>Public APIs</em> must support <code href="http://webconcepts.info/concepts/http-header/Sunset">Sunset</code></li>
					<ul>
						<li>Services must document/describe the support of <code>Sunset</code></li>
						<li>Services may implement <code>Sunset</code> any way they like</li>
						<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
					</ul>
				</ul>
			</slide>
			<slide id="capability-sedimentation">
				<title>Capability Sedimentation</title>
				<img title="Capability Sedimentation" src="capability-sedimentation.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="api-business-language">
				<title>APIs: The Language of Business</title>
				<ul>
					<li>APIs represent the actionable boundaries of the business</li>
					<li>The entirety of your organization's APIs <em>is</em> your EIM</li>
					<li><em>Digital Transformation</em> never stops, it's a mode of existence</li>
					<li>Always focus on APIs first, and then look at <em>how</em> to do things</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/otto-group-2018"><code>dret.net/lectures/otto-group-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/otto-group-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>