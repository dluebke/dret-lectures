<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="viessmann.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Viessmann API Bootcamp</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2017-10">October 4/5, 2017</date>
	<copyright>2017 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<part id="api-academy-intro">
			<title>API Academy</title>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Writing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation-introduction">
			<title>Digital Transformation: Why?</title>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation">
				<title>Digital Transformation</title>
				<img href="https://upload.wikimedia.org/wikipedia/commons/3/31/Great_white_shark_south_africa.jpg" src="digital-transformation-shark.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services talk to each other <em>only</em> through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="evolution">
			<title>Service Evolution</title>
			<slide id="autonomy-robustness">
				<title>Autonomy vs. Robustness</title>
				<ul>
					<li>APIs emphasize independence and autonomy of capabilities</li>
					<ul>
						<li>Allowing teams to design/implement/deploy autonomously increases speed</li>
						<li>With no oversight at all the cost may add up on the consumer side</li>
						<li>Finding a harmonious balance between autonomy and guidelines is key</li>
					</ul>
					<li>There are two critical sides to the evolution part</li>
					<ol>
						<li>When <link href="service-evolution">services change</link>, do consumers need to be aware of the changes?</li>
						<li>When <link href="landscape-evolution">the landscape changes</link>, do consumers need to discover the new services?</li>
					</ol>
				</ul>
			</slide>
			<slide id="service-evolution">
				<title>Design for Service Evolution</title>
				<ul>
					<li>Services are designed with a certain goal and certain options</li>
					<ul>
						<li>The <em>goal</em> is to satisfy the current requirements for a useful service</li>
						<li>The <em>options</em> are based on assumptions on how the service might change</li>
					</ul>
					<li>Service design is a balance between simplicity and flexibility</li>
					<li>Building <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">robust and extensible services</a> is based on three factors</li>
					<ul>
						<li><em>Meaningful and stable core</em>: The service core must remain stable over time</li>
						<li><em>Extension model</em>: There are well-defined ways how the service core may evolve</li>
						<li><em>Processing model</em>: It is well-defined how clients are processing extensions</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-evolution">
				<title>Design for Landscape Evolution</title>
				<ul>
					<li>Application flow should be guided by discovered controls</li>
					<ul>
						<li>A dynamic service landscape needs a dynamic way of discovering services</li>
						<li><em>Hypermedia</em> is a proven way how controls can be served dynamically</li>
					</ul>
					<li>Hypermedia is a good way for supporting <em>service choreography</em></li>
					<ul>
						<li>Microservice usage may change over time as the landscape evolves</li>
						<li>Choreography exposes ways in which various services are combined to achieve a goal</li>
					</ul>
					<li>If nobody links to some microservices, these will disappear over time</li>
					<ul>
						<li>Usage and linkage combined provide useful analysis data</li>
					</ul>
				</ul>
			</slide>
			<slide id="MSA-v">
				<title>The Three V's of Service Landscapes</title>
				<ul>
					<li>Volume of available services: <link href="landscape-scale">Scale</link></li>
					<ul>
						<li>How big is the service landscape and can I get an overview of what's around?</li>
					</ul>
					<li>Variety of service designs and interfaces: <link href="landscape-diversity">Diversity</link></li>
					<ul>
						<li>As a creator or consumer, how do I deal with different service designs?</li>
					</ul>
					<li>Velocity of service landscape evolution: <link href="landscape-decentralization">Decentralization</link></li>
					<ul>
						<li>As the landscape evolves, how stable are services and their designs?</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-scale">
				<title>Service Landscape Scale</title>
				<ul>
					<li>Different environments have different ideas of MS scale</li>
					<ul>
						<li>Small projects may have a handful of services</li>
						<li>Large MS adopters may have hundreds or thousands of services</li>
					</ul>
					<li>Public APIs and microservice APIs combined mean a bigger API inventory</li>
					<li>Using any form of discovery may not be necessary from the start</li>
					<ul>
						<li>Consider the possibility when starting the MSA effort</li>
						<li>Having a plan helps teams to be aware of the need later on</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-diversity">
				<title>Service Landscape Diversity</title>
				<ul>
					<li>Not all services use the same technical foundations</li>
					<ul>
						<li>Different communications mechanisms</li>
						<li>Different metamodels (XML/JSON/RDF) for data models</li>
						<li>Different models for representing application concepts</li>
						<li>In a Web context, these are concepts such as <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">HTTP headers</a>, <a href="https://github.com/dret/sedola/blob/master/MD/mediatypes.md">media types</a>, and <a href="https://github.com/dret/sedola/blob/master/MD/linkrels.md">link relations</a></li>
					</ul>
					<li>Handling diversity can be challenging because of different <q>design universes</q></li>
					<ul>
						<li>Depending on choice, similar concepts/models may be represented differently</li>
						<li>Introducing a generalized abstraction layer is unlikely to be helpful</li>
					</ul>
					<li><em>Discovering descriptions</em> provides a better overview of the ecosystem</li>
					<ul>
						<li>A reality-based overview of the technology landscape</li>
						<li>A possible starting point or guideline for getting MSA teams started</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralization">
				<title>Service Landscape Decentralization</title>
				<ul>
					<li>Decentralization means no single point of control</li>
					<li>Decentralization means no automatic top-down visibility</li>
					<ul>
						<li><em>API gateways</em> are one way of improving visibility (and control)</li>
						<li><em>Instrumenting the connective fabric</em> is another way out of this</li>
					</ul>
					<li>Complete and uncontrolled decentralization is an ideal</li>
					<ul>
						<li><em>Observe</em> how the MSA landscape develops</li>
						<li><em>Identify pain points</em> from the design and operational point of view</li>
						<li><em>Identify popular patterns</em> so that teams have a starting point</li>
						<li><em>Convincing teams</em> instead of mandatory guidelines</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="introduction-conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
				</ul>
			</slide>
			<slide id="introduction-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/viessmann-2017"><code>dret.net/lectures/viessmann-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/viessmann-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="design">
		<title>API Design</title>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/10/api-usability-matters.html" title='Erik Wilde, "API Usability Matters: UX and CX is like DX and …", October 2016'>API Usability</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a>&#160;· <a href="http://webconcepts.info/">Web Concepts</a>&#160;· <a href="https://www.mnot.net/blog/2012/06/25/http_api_complexity_model" title='Mark Nottingham, "HTTP API Complexity", June 2012'>API Complexity</a>&#160;· <a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a></toc>
		<part id="design-process">
			<title>Design as a Process</title>
			<slide id="design-eames">
				<title>Design and Constraints</title>
				<blockquote><q href="http://www.markwunsch.com/eames">Design depends largely on constraints.</q> (<a href="https://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles Eames</a>)</blockquote>
			</slide>
			<slide id="design-questions">
				<title>Design Questions</title>
				<ul>
					<li>Design is an iterative process to solve a given problem</li>
					<ol>
						<li>Identify a <em>problem</em> (provided externally or identified internally)</li>
						<li><em>Why</em> is the problem a problem?</li>
						<li>Identify the <em>constraints</em></li>
						<li><em>What</em> can be done to address the problem?</li>
						<li>Identify the possible solutions</li>
						<li><em>How</em> is the problem solved given the constraints?</li>
						<li>Assess design quality and repeat	</li>
					</ol>
				</ul>
			</slide>
			<slide id="api-lifecycle-design">
				<title>API Lifecycle and Design</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="api-complexity">
			<title>API Complexity</title>
			<slide id="one-server-one-client">
				<title>One Server and One Client</title>
				<ul>
					<li>Tight coupling between server and client teams possible</li>
					<ul>
						<li>Updates in the API can be negotiated and addressed</li>
					</ul>
					<li>Updates in the <em>deployed clients</em> can still pose a challenge</li>
					<ul>
						<li>Easier when deployment is through <em>code on demand</em> (Web clients)</li>
						<li>Harder when deployment is through <em>installed code</em> (non-Web clients)</li>
					</ul>
					<li>Openness and extensibility are not an explicit goal</li>
					<ul>
						<li>The only exception are version issues across the installed base</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-server-many-clients">
				<title>One Server and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams helpful</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
					</ul>
					<li>Updates in the <em>existing clients</em> can take a long time</li>
					<ul>
						<li>No control over installed client base other than hard API stops</li>
					</ul>
					<li>Openness and extensibility are getting more interesting</li>
					<ul>
						<li>Openness is necessary so that the API can evolve without breaking clients</li>
						<li>Extensibility is less of a concern because there is only one server</li>
					</ul>
				</ul>
			</slide>
			<slide id="one-servers-many-clients">
				<title>Many Servers and Many Clients</title>
				<ul>
					<li>Loose coupling between server and client teams essential</li>
					<ul>
						<li>Client teams should be guided how to expect the API to evolve</li>
						<li>Clients may experience a spectrum of server implementations</li>
					</ul>
					<li>Variety in the <em>service landscape</em> needs clients to be robust</li>
					<ul>
						<li>Services can implement variations of the original API</li>
						<li>Balancing consistency and flexibility is the main design challenge</li>
					</ul>
					<li>Openness and extensibility are essential components</li>
					<ul>
						<li>Openness is necessary so that services can use the API robustly</li>
						<li>Extensibility is necessary to that the landscape can evolve robustly</li>
						<li>The landscape is a graph of variations of the basic API</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="messages-models">
			<title>Messages vs. Models</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>Interfaces should hide domain complexity (<em>encapsulation</em>)</li>
					<ul>
						<li>Expose <em>as little as possible</em> of the domain complexity</li>
						<li>Resist the temptation to <em>expose your domain model</em></li>
					</ul>
					<li>Interfaces are languages for communication</li>
					<ul>
						<li>They establish a language between API provider and consumer</li>
						<li>Keeping the language simple keeps the API usable</li>
					</ul>
					<li><q>Model Creep</q> is an obstacle for API adoption</li>
					<ul>
						<li>There is no <q>one true model</q> for any domain</li>
						<li>Keeping the language simple minimizes conflict potential</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-messages">
				<title>APIs and Messages</title>
				<ul>
					<li>Messages are the sentences in API communications</li>
					<ul>
						<li>They transport meaning between collaborating peers</li>
						<li>They are independent of how peers implement their activities</li>
					</ul>
					<li>Messages can follow patterns that make APIs easier to use</li>
					<ul>
						<li><em>API styles</em> are focusing on specific communication styles</li>
						<li><em>Metamodels</em> help to provide structure (plain text, binary, XML, JSON, RDF, …)</li>
						<li><em>API models</em> add message models (SOAP, HAL, GraphQL, …)</li>
						<li><em>Vocabularies</em> help to describe specific APIs</li>
					</ul>
					<li>The usual balancing act of familiarity and avoiding <a href="https://en.wikipedia.org/wiki/Law_of_the_instrument">Maslow's hammer</a></li>
				</ul>
			</slide>
			<slide id="messaging-start">
				<title>Make Messaging the Start</title>
				<ul>
					<li>Make sure to identify relevant resources so that you can refer to them</li>
					<ul>
						<li>Resource refers to <em>anything</em> that <q>is worth exchanging messages about</q></li>
						<li>Unique and stable identity helps when assigning resource identifiers</li>
					</ul>
					<li>Any service resource must have a <em>representation</em> in messages</li>
					<ul>
						<li>Your <em>data model</em> is not your <em>object model</em></li>
						<li>Your <em>object model</em> is not your <em>resource model</em></li>
						<li>Your <em>resource model</em> is not your <em>message model</em></li>
					</ul>
					<li>Design <q>interaction forms</q> to be as succinct as possible</li>
				</ul>
			</slide>
		</part>
		<part id="api-scope">
			<title>API Scope</title>
			<slide id="api-tool">
				<title>APIs as Tools</title>
				<ul>
					<li>APIs exist to solve specific problems</li>
					<ul>
						<li>Think about the problem and not the solution</li>
						<li>Design a <em>capability</em> that hides solution details</li>
					</ul>
					<li>Collaborate with consumers and gather their feedback</li>
					<ul>
						<li><q>API first</q> is all about driving solutions from the API</li>
						<li>Use approaches the make incremental design easy</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-maslow">
				<title>Tools and Problems</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-design-simple">
				<title>KISS API Design</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<li>There is no single correct path to well-designed APIs</li>
					<ul>
						<li>What is the capability that the API is exposing?</li>
						<li>What are the assumptions about API consumers?</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api">
				<title>Microservice APIs</title>
				<ul>
					<li>A bigger landscape of APIs</li>
					<li>A more diverse landscape of APIs</li>
					<li>A landscape of faster evolving APIs</li>
				</ul>
			</slide>
		</part>
		<part id="design-dx">
			<title>Developer Experience (DX)</title>
			<slide id="design-thinking">
				<title>Design Thinking</title>
				<ul>
					<li>Design is driven by creating products/solutions</li>
					<ul>
						<li>How well does the product address a given problem?</li>
						<li>How easy is the designed product to use?</li>
					</ul>
					<li>APIs often are <em>part of a bigger picture</em></li>
					<ul>
						<li>Developers have to use APIs to <em>design their applications</em></li>
						<li>How easy is it for them to use APIs as <em>part of their solution</em>?</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-integration">
				<title>Client-Side API Integration</title>
				<img title="Client-Side API Integration" src="apis-application-layers-integration.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="experience-api">
				<title>Experience API</title>
				<img title="Experience API" src="apis-application-layers-experience.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="design-coherence">
				<title>Design Coherence</title>
				<ul>
					<li>Establish a <em>culture of API design</em></li>
					<ul>
						<li><q>This is how APIs are usually looking</q></li>
						<li>Here are some tools to help with design and documentation</li>
						<li>Here is a breakdown of what the API landscape looks like</li>
					</ul>
					<li>Observing reality helps to document <em>and</em> establish culture</li>
					<ul>
						<li>One way to think of establishing coherence is by writing <em>guidelines</em></li>
						<li>An alternative path is to document and disseminate <em>existing practices</em></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="diversity-decentralization-loose-coupling">
			<title>Diversity, Decentralization, and Loose Coupling</title>
			<slide id="diversity">
				<title>Diversity</title>
				<ul>
					<li>API designs should focus on the <em>API Quality</em></li>
					<ul>
						<li>Standardizing on technologies is no guarantee for quality</li>
					</ul>
					<li>Teams are incentivized to create good APIs</li>
					<ul>
						<li>Feedback from API consumers comes early and often</li>
						<li>Being a good citizen improves the chances to success</li>
						<li>Monitoring quickly reveals patterns of usage and popularity</li>
					</ul>
					<li>Standardize on <em>good practices</em> instead of <em>mandated patterns</em></li>
					<li>Consumers should have a <em>seamless experience</em> across APIs</li>
				</ul>
			</slide>
			<slide id="decentralization">
				<title>Decentralization</title>
				<ul>
					<li>Centralization has become an IT anti-pattern</li>
					<li>APIs should be easily composable by consumers</li>
					<ul>
						<li><em>Robust identity</em> allows resource discovery without out-of-band knowledge</li>
						<li><em>Interlinking</em> exposes control flows in a self-describing way</li>
					</ul>
					<li>Individual services own and document their service APIs</li>
					<li>Cross-service examples and use cases need to respect this autonomy</li>
				</ul>
			</slide>
			<slide id="loose-coupling">
				<title>Loose Coupling</title>
				<ul>
					<li>Apply well-known <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Patterns for Robust Extensibility</a></li>
					<li>Modern service architecture encourages service changes and replacements</li>
					<ul>
						<li>Design for <em>service changes:</em> Non-breaking changes as the goal</li>
						<li>Design for <em>landscape changes:</em> Self-describing interactions allow changing workflows</li>
					</ul>
					<li><em>Hypermedia</em> is a well-known pattern for service <em>and</em> landscape changes</li>
				</ul>
			</slide>
		</part>
		<part id="design-conclusions">
			<title>Design Conclusions</title>
			<slide id="design-culture">
				<title>Design Culture</title>
				<ul>
					<li>API design matters for making APIs successful</li>
					<li>API design should be established as shared best practices</li>
					<li>Culture is formed by practice and collaboration</li>
					<li>Steer culture with tooling for design and sharing</li>
				</ul>
			</slide>
			<slide id="design-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/viessmann-2017"><code>dret.net/lectures/viessmann-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/viessmann-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Introduction to Microservices</title>
		<toc class="abstract">APIs are interfaces to capabilities, which then must be implemented in some shape or form. As a less heavyweight alternative to more traditional integrated systems, microservices take an "ecosystem approach", encouraging organizations to make sure that adding, changing, or removing capabilities is something that they can do more easily.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-discovery">
				<title>Decentralize Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no <q>Microservices API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
			<slide id="microservices-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/viessmann-2017"><code>dret.net/lectures/viessmann-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/viessmann-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="protocols">
		<title>Protocols</title>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://webconcepts.info/specs/IETF/RFC/7230" title='RFC 7230, "Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing", June 2014'>HTTP</a>&#160;· <a href="https://www.mnot.net/blog/2017/05/11/status_codes" title='Mark Nottingham, "How to Think About HTTP Status Codes", May 2017'>HTTP Status Codes</a></toc>
		<part id="standards">
			<title>Protocols are Standards</title>
			<slide id="standard-types">
				<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
				<ul>
					<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
					<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
					<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
					<li><em>Open standards:</em> <q>Hello everybody! Let's solve this problem!</q></li>
				</ul>
			</slide>
			<slide id="xkcd-standards">
				<title>How Standards Proliferate</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
				<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
				<img title="World Wide Web Consortium (W3C)" href="http://w3c.org/" src="w3c.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="networks">
			<title>Computer Networks</title>
			<slide>
				<title>Network History</title>
				<ul>
					<li>First regarded as a convenient workaround for floppy disks</li>
					<ul>
						<li><q>Real computer scientists write compilers</q></li>
						<li>The value of computer networks depends on their size</li>
					</ul>
					<li>Early networking solutions were vendor-specific islands</li>
					<ul>
						<li>DECnet for <em>Digital Equipment Corporation (DEC)</em> customers</li>
						<li>XNS for <em>Xerox</em> customers</li>
						<li>SNA for <em>IBM</em> customers</li>
						<li>transmitting data between these networks was very cumbersome</li>
					</ul>
					<li>Bridging networks transparently became increasingly important</li>
					<ul>
						<li>More computers and networks increase the benefit of interconnections</li>
						<li>Layering being used for internetworks, not only for networks</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Networks vs. Internetworks</title>
				<ul>
					<li>Specific networks use specific abstractions</li>
					<ul>
						<li>How to address nodes (computers, phones, PDAs, RFID tags)</li>
						<li>How to address applications on these nodes</li>
						<li>How to transmit data to these applications</li>
					</ul>
					<li>Internetworks provide a network-independent abstraction</li>
					<ul>
						<li>Nodes are addressed uniformly (IP addresses)</li>
						<li>Applications are identified uniformly (ports)</li>
						<li>Data transmission uses one set of protocols (TCP/UDP)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet</title>
				<ul>
					<li>Very early start and a lot of experience</li>
					<ul>
						<li>Pragmatic and evolutionary approach</li>
						<li><q>If it's not broken, don't fix it</q></li>
					</ul>
					<li>Standardization by independent technical experts</li>
					<ul>
						<li>Avoids the <q>designed by committee</q> effect of consortiums</li>
						<li>Conservative and concentrating on stability</li>
						<li>Implementations are required to prove technical feasibility</li>
						<li>Simplicity whenever possible</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Internet Principles</title>
				<blockquote>Be liberal in what you accept, and conservative in what you send.</blockquote>
				<p class="quotenote"><a href="http://www.postel.org/postel.html">Jon Postel</a>, <a href="http://tools.ietf.org/html/rfc1122">IETF RFC 1122</a></p>
				<blockquote>Whenever possible, communications protocol operations should be defined to occur at the end-points of a communications system, or as close as possible to the resource being controlled.</blockquote>
				<p class="quotenote"><a href="http://dret.net/biblio/reference/sal84">J. Saltzer, D. Reed, D. Clark, <q>End-to-end Arguments in System Design</q></a></p>
			</slide>
			<slide>
				<title>Internet Protocols</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="internet-protocols.png" title="Internet Protocol Layers"/>
			</slide>
			<slide>
				<title>Network Convergence</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="network-convergence.png" title="Convergence in the Protocol Stack"/>
			</slide>
		</part>
		<part id="netlayers">
			<title>Networking Layers</title>
			<slide id="SoC">
				<title>Separation of Concerns (SoC)</title>
				<ul>
					<li>Solving different issues separately is a <em href="http://en.wikipedia.org/wiki/Separation_of_concerns#Origin">Good Idea</em></li>
					<ul>
						<li><q>...a program must be correct...</q></li>
						<li><q>...it should be efficient...</q></li>
						<li><q>...whether, and if so: why, the program is desirable...</q></li>
					</ul>
					<li>Complex solutions need a structured approach for solving them</li>
					<ul>
						<li>Solutions become easier to create</li>
						<li>Parts of solutions may become reusable</li>
						<li>Parts of solutions may become replaceable</li>
					</ul>
					<li>Software engineering hit complexity issues a bit earlier than networking did</li>
					<li>SoC is a good idea but not without costs</li>
					<ul>
						<li><q>Vertical integration</q> allows optimizations not possible in structured designs</li>
						<li><q>Design depends largely on constraints.</q> (<a href="http://en.wikipedia.org/wiki/Charles_and_Ray_Eames">Charles and Ray Eames</a>)</li>
					</ul>
				</ul>
			</slide>
			<slide id="osi-layers">
				<title>OSI Layers</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="osi-model.png" href="http://commons.wikimedia.org/wiki/File:Osi-model.png"/>
			</slide>
			<slide id="layer1">
				<title>Layer 1: Physical</title>
				<div style="height : 70%">
					<img style="height : 90% ; margin : 2% ; " src="antenna-tree.jpg" title="Cellular" href="https://www.flickr.com/photos/33954075@N07/5461958584/"/>
					<img style="height : 90% ; margin : 2% ; " src="public-wifi.jpg" title="Public Wi-Fi" href="https://www.flickr.com/photos/dret/3649149757"/>
					<img style="height : 90% ; margin : 2% ; " src="rj45.jpg" title="Cable Access" href="https://www.flickr.com/photos/30908884@N00/197503286"/>
				</div>
			</slide>
			<slide id="layer2">
				<title>Layer 2: Data Link</title>
				<ul>
					<li>Getting small units of data (frames) safely across layer 1</li>
					<li>Lost/damaged frames are repeated to ensure robustness</li>
					<li>Depending on layer 1, layer 2 frames can have very different sizes</li>
					<ul>
						<li><a href="http://en.wikipedia.org/wiki/Ethernet_frame">Ethernet frames</a> typically have 1500 bytes of payload (and some protocol fields)</li>
						<li>Other networks (such as GSM, CDMA, BLE) use different frame sizes</li>
					</ul>
				</ul>
				<img style="width : 90% ; margin : 2% ; " src="ethernet-frame.png" href="http://commons.wikimedia.org/wiki/File:Ethernet_frame.svg"/>
			</slide>
			<slide id="layer3">
				<title>Layer 3: Network</title>
				<ul>
					<li>Allows addressing at the network level</li>
					<li>For the Internet, this means IP addresses</li>
					<ul>
						<li><a href="http://en.wikipedia.org/wiki/IPv4">IPv4</a> is the version that has powered the Internet so far</li>
						<li><a href="http://en.wikipedia.org/wiki/IPv6">IPv6</a> is phased in to be able to handle <q>IoT-scale</q> growth</li>
					</ul>
				</ul>
				<img style="width : 90% ; margin : 2% ; " src="ipv4-packet.png" href="http://en.wikipedia.org/wiki/IPv4"/>
			</slide>
			<slide id="layer4">
				<title>Layer 4: Transport</title>
				<ul>
					<li>Layer 3 establishes connectivity on a <em>machine-to-machine</em> level</li>
					<ul>
						<li>Packets can be sent from one machine to another machine</li>
						<li>It is not clear yet what to do with the packet once it arrived</li>
					</ul>
					<li>TCP establishes <em>process-to-process</em> connectivity and reliable connections</li>
				</ul>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="tcp-structure.png" href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol"/>
			</slide>
			<slide id="layer5">
				<title>Layer 5: Session</title>
				<ul>
					<li>Sessions are meaningful for applications</li>
					<ul>
						<li>TCP connections may or may not terminate (see <a href="http://en.wikipedia.org/wiki/HTTP_persistent_connection">HTTP/1.1 persistent connections</a>)</li>
						<li>Applications should be able to start, pause, restart, and end sessions</li>
					</ul>
					<li>Sessions can be terrible for scalability</li>
					<ul>
						<li>Creating tight coupling between two processes</li>
						<li><a href="rest/">REST</a> tries really hard to build a session-free web (<q>stateless interactions</q>)</li>
					</ul>
					<li>The Internet does not really have a generic model for sessions</li>
					<ul>
						<li><em>HTTP Cookies</em> are one way to achieve the same goal (but with a lot of side-effects)</li>
					</ul>
				</ul>
			</slide>
			<slide id="layer6">
				<title>Layer 6: Presentation</title>
				<ul>
					<li>OSI has <em href="http://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One">Abstract Syntax Notation One (ASN.1)</em></li>
					<ul>
						<li>one abstract model and a variety of <q>encoding rules</q> (DER, XER, PER)</li>
						<li>mostly extinct nowadays but still used for <a href="http://en.wikipedia.org/wiki/Public_key_infrastructure">PKI information (certificates)</a></li>
					</ul>
					<li>The Internet has media types and some <q>generic</q> data representation languages</li>
					<ul>
						<li><em href="../xml">Extensible Markup Language (XML)</em> was the first successful Internet representation</li>
						<li><em href="">JavaScript Object Notation (JSON) replaced XML because most developers like it better</em></li>
						<li><em href="">Resource Description Framework (RDF)</em> is another possible generic data format</li>
					</ul>
				</ul>
			</slide>
			<slide id="layer7">
				<title>Layer 7: Application</title>
				<ul>
					<li>Anything that is built on top of a layered networking stack</li>
					<li>Applications can select (some of the) aspects of the stack</li>
					<ul>
						<li>TCP is often useful because it's reliable and flow-controlled</li>
						<li>UDP may be better for real-time and loss-tolerant data such as video/audio</li>
					</ul>
					<li>Lower layers are completely invisible to applications</li>
					<ul>
						<li>Unless some support and signaling is built into the networking stack</li>
						<li>For example, it can be very interesting to know what traffic costs</li>
					</ul>
					<li>Complete abstraction is a dream, complete control is a nightmare</li>
					<ul>
						<li>Or is it the other way around? It all depends on the scenarios...</li>
						<li>As the Internet and applications evolve, networking protocols and features evolve</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>(Some) Popular Internet Application Protocols</title>
				<ul>
					<li>Domain/Host Name Resolution: DNS</li>
					<li>The Web: <link href="HTTP"/></li>
					<li>Email: SMTP/IMAP</li>
					<li>Chatting: <link href="xmpp"/>XMPP</li>
					<li>File Transfer: FTP</li>
					<li>Multimedia Traffic: RTP</li>
					<li>Remote Login: Telnet</li>
				</ul>
			</slide>
			<slide>
				<title>Popular Networking Equipment</title>
				<ul>
					<li>Layer 1: Repeaters, Hubs (extending reach)</li>
					<li>Layer 2: Bridges, Switches (selectively <q>repeating</q> frames)</li>
					<li>Layer 3: Routers (using end-to-end addresses)</li>
					<li>Above Layer 4: Gateways</li>
				</ul>
			</slide>
		</part>
		<part id="TCP">
			<title>Transmission Control Protocol (TCP)</title>
			<slide>
				<title>TCP Features</title>
				<ul>
					<li>Flow-controlled (avoiding congestion)</li>
					<li>Reliable (no data lost or duplicated)</li>
					<li>Connection-oriented</li>
					<li>Application addressing</li>
				</ul>
			</slide>
			<slide>
				<title>Reliable Connections</title>
				<ul>
					<li>IP may drop or duplicate packets</li>
					<ul>
						<li>TCP adds serial numbers in data packets</li>
						<li>If problems are detected, TCP recovers automatically</li>
					</ul>
					<li>TCP avoids network congestion and system overload</li>
					<ul>
						<li><em>Slow start</em> avoids flooding receivers with data they cannot process</li>
						<li><em>Fast retransmit</em> for avoiding timeouts when losing data</li>
						<li>A <em>Sliding window</em> for controlling the amount of outstanding packets</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>TCP Window</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="tcp-window.png"/>
			</slide>
		</part>
		<part id="DNS">
			<title>Domain Name System (DNS)</title>
			<slide>
				<title>Naming vs. Addressing</title>
				<ul>
					<li>IP addresses depend on network topology and organization</li>
					<ul>
						<li>Reorganizing a network may change all IP addresses</li>
						<li>Identifying important hosts should not be address-based</li>
					</ul>
					<li>Names are supposed to be more stable than addresses</li>
					<ul>
						<li>A name is an abstract identification of something</li>
						<li>Names can be used to obtain more information</li>
					</ul>
					<li>Network services should use names instead of addresses</li>
					<ul>
						<li>Before using the service, a mapping has to be performed</li>
						<li>The <em>Domain Name System (DNS)</em> is providing this service</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>DNS Properties</title>
				<ul>
					<li>DNS has a bootstrap problem</li>
					<ul>
						<li>DNS provides a service and should thus be identified by a name</li>
						<li>For resolving names into addresses, the DNS service is required</li>
					</ul>
					<li>DNS configuration is part of basic Internet configuration</li>
					<ul>
						<li><em>Dynamic Host Configuration Protocol (DHCP)</em> provides IP address, netmask, gateway, and DNS server address</li>
					</ul>
					<li>DNS names are hierarchically structured</li>
					<ul>
						<li><code>ischool.berkeley.edu</code>, <code>edu</code> is the <em>Top-Level Domain (TLD)</em></li>
						<li>TLDs are either <em>generic (gTLD)</em> or <em>country code (ccTLD)</em></li>
						<li>Subdomains are federated (e.g., <code>edu</code>, <code>us</code>, <code>uk</code>, <code>tv</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Names Matter</title>
				<ul>
					<li>Names are not unique and namespaces are finite</li>
					<ul>
						<li>Name disputes arise which were irrelevant before the Web</li>
						<li><q>Cybersquatting</q> as a popular way to make money</li>
					</ul>
					<li>Names can be worth a lot of money</li>
					<ul>
						<li><code>business.com</code> was sold for $7.5M in 1999 and again for $345M in 2007</li>
					</ul>
					<li>Name inflation can be used to generate money</li>
					<ul>
						<li><code>aero</code>, <code>biz</code>, <code>coop</code>, <code>info</code>, <code>jobs</code>, <code>mobi</code>, <code>museum</code>, <code>name</code>, <code>pro</code>, <code>travel</code></li>
						<li>Starting 2014, <a href="http://dret.typepad.com/dretblog/2008/06/dret.html">user-defined top-level domains went on sale</a></li>
					</ul>
					<li>Names can have political significance</li>
					<ul>
						<li>ccTLDs are assigned based on the UNO's idea of what a country is</li>
					</ul>
					<li>Names can have symbolic significance</li>
					<ul>
						<li>Catalonia managed to get a domain of its own (<code>cat</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>DNS Namespace Organization</title>
				<ul>
					<li>Domain owners can organize the assignment of subdomains</li>
					<ul>
						<li><code href="http://www.berkeley.edu/">berkeley.edu</code> is an U.S. educational institution</li>
						<li><code href="http://www.ethz.ch/">ethz.ch</code> is a Swiss university</li>
						<li><code href="http://www.imperial.ac.uk/">imperial.ac.uk</code> is a British university</li>
						<li><code href="http://www.uts.edu.au/">uts.edu.au</code> is an Australian university</li>
						<li><code href="http://www.swiss.aero/">swiss.aero</code> makes money by selling <q>new land</q></li>
					</ul>
					<li>Special rules may apply (Germany does not assign car license plate names)</li>
					<li>Organizations may be countries or companies</li>
					<ul>
						<li>Countries have national organizations for assigning names</li>
						<li>Companies may create an internal multi-level namespace (<code href="http://www.ischool.berkeley.edu/">www.ischool.berkeley.edu</code>)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Using DNS</title>
				<ul>
					<li>DNS is used by virtually all Internet applications</li>
					<ul>
						<li>Names are more stable than addresses</li>
					</ul>
					<li>E-mail has some dedicated features built into DNS</li>
					<ul>
						<li>Special entries (<code>MX</code> records) identify the e-mail server for a domain</li>
						<li>Fallback entries help dealing with failing e-mail servers</li>
					</ul>
					<li>most URIs are based on DNS names</li>
					<ul>
						<li><code>http://ischool.berkeley.edu/</code> identifies the access protocol and the host</li>
						<li>The browser first performs a DNS lookup</li>
						<li>A TCP connection is then established to the IP address returned by the DNS</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="HTTP">
			<title>Hypertext Transfer Protocol (HTTP)</title>
			<slide>
				<title>DNS &amp; HTTP</title>
				<p>The two basic protocols which every Web browser must implement are <em>DNS</em> access and <em>HTTP</em>. However, most operating systems provide an API for DNS access, so the browser can use this service locally and only has to implement HTTP. <em>TCP</em> support (which is required as the foundation for HTTP) is usually provided by the operating system.</p>
				<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
			</slide>
			<slide>
				<title>HTTP Messages</title>
				<ul>
					<li>HTTP needs a reliable connection</li>
					<ul>
						<li>The foundation for HTTP is <em>TCP</em></li>
						<li>DNS resolution yields an IP address</li>
						<li>Open TCP connection to port 80 or port specified in URI (<code>http://rosetta.sims.berkeley.edu:8085/</code>)</li>
					</ul>
					<li>HTTP is a <em>text-based</em> protocol</li>
					<ul>
						<li>The connection is used to transmit <em>text messages</em></li>
						<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
						<li>Basic HTTP operations can be carried out by hand (e.g., per <code>telnet</code>)</li>
					</ul>
				</ul>
				<pre>start-line
message-header *

message-body ?</pre>
			</slide>
			<slide id="http-headers">
				<title>HTTP Header Fields</title>
				<ul>
					<li>Header fields contain information about the message</li>
					<ul>
						<li><em>General header:</em> <code>Date</code> as the message origination date</li>
						<li><em>Request header:</em> <code>Accept-Language</code> indicates language preferences</li>
						<li><em>Response header:</em> <code>Server</code> contains system information</li>
						<li><em>Entity header:</em> <code>Content-Type</code> specifies the media type of the entity</li>
					</ul>
					<li>HTTP (and others) define <a href="https://github.com/dret/sedola/blob/master/MD/headers.md">a number of header fields</a></li>
					<ul>
						<li>Unknown fields must be ignored (extensibility)</li>
					</ul>
					<li>HTTP is about acting on these fields</li>
					<ul>
						<li>HTTP defines what HTTP implementations must or should do</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-request">
				<title>HTTP Requests</title>
				<ul>
					<li>After opening a connection, the client sends a request</li>
					<ul>
						<li>The method indicates the action to be performed on the resource</li>
						<li>HTTP's most interesting methods are: <code>GET</code>, <code>POST</code>, <code>PUT</code>, and <code>DELETE</code></li>
					</ul>
					<li>The URI identifies the resource to which the request should be applied</li>
					<ul>
						<li>Absolute URIs are required when contacting <em>proxies</em></li>
						<li>Absolute paths are required when contacting a server directly</li>
						<li>The URI may contain <em>query information</em></li>
					</ul>
					<li>The <code>Host</code> header field must be included in every HTTP/1.1 request</li>
				</ul>
				<pre>Method Request-URI HTTP/Major.Minor
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-get">
				<title>HTTP GET</title>
				<ul>
					<li>Retrieval action based on the URI</li>
					<ul>
						<li>Maybe implemented by reading a file</li>
						<li>Maybe implemented by processing a file (PHP)</li>
						<li>Maybe implemented by running code</li>
					</ul>
					<li>Semantics may change based on header fields</li>
					<ul>
						<li><code>If-*:</code> only reply with the entity if necessary</li>
						<li><code>Range:</code> only reply with the requested part of the entity</li>
					</ul>
					<li>Cacheability depends on header fields of the response</li>
				</ul>
				<pre>GET / HTTP/1.1
Host: ischool.berkeley.edu</pre>
			</slide>
			<slide id="http-response">
				<title>HTTP Responses</title>
				<ul>
					<li>The server's response to acting on a request</li>
					<ul>
						<li>the status code is given numerically and as text</li>
						<li><code>2**</code> for variations of <q>ok</q></li>
						<li><code>3**</code> for redirections</li>
						<li><code>4**</code> are different client side problems (<code>404</code>: not found)</li>
						<li><code>5**</code> are different server side problems</li>
					</ul>
					<li>Header fields specify additional information</li>
					<ul>
						<li>Information about the server</li>
						<li>Information about the entity (media type, encoding, language)</li>
					</ul>
				</ul>
				<pre>HTTP/Major.Minor Status-Code Text
[Header]*

[Entity]?</pre>
			</slide>
			<slide id="http-performance">
				<title>HTTP Performance</title>
				<ul>
					<li>HTTP/1.0 allowed one transaction per connection</li>
					<ul>
						<li>TCP connection setup and teardown are expensive</li>
						<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
						<li>Typical Web pages use between 10-20 resources (HTML + images + CSS + scripts)</li>
						<li>Typically, these resources are stored on the same server</li>
					</ul>
					<li>HTTP/1.1 introduces <em>persistent connections</em></li>
					<ul>
						<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
						<li>Additional requests to the same server use the same TCP connection</li>
					</ul>
					<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
					<ul>
						<li>Instead of waiting for a response, requests can be queued</li>
						<li>The server responds as fast as possible</li>
						<li>The order may not be changed (there is no sequence number)</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Connection Handling</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-phttp-pipelining.png"/>
			</slide>
			<slide>
				<title>HTTP Access Control</title>
				<ul>
					<li>HTTP servers can <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error">deny access</a> because of access control</li>
					<ul>
						<li><code>401 Unauthorized</code> means the resource is access controlled</li>
						<li><code>403 Forbidden</code> means the resource is inaccessible</li>
						<li><code>405 Method Not Allowed</code> signals a request using the wrong <link href="http-request">request method</link></li>
					</ul>
					<li>Two different approaches to unauthorized access are possible</li>
					<ul>
						<li>Repeat the HTTP request with the proper authentication credentials</li>
						<li>Redirect to a <q>authentication resource</q> for authentication</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>HTTP Authentication</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-authentication.gif" title="HTTP Authentication" href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/Security5.html"/>
			</slide>
			<slide id="http-basic">
				<title>Basic HTTP Authentication</title>
				<ul>
					<li>Authentication is based on <em>authentication realms</em></li>
					<ul>
						<li>A set of resources for which the authentication is required</li>
						<li>An opaque name which is used to signal which login is required</li>
						<li>Username/password often is specific for a given realm</li>
					</ul>
					<li>Users supply username and password through the client</li>
					<ul>
						<li>Sent as <a href="http://en.wikipedia.org/wiki/Base64">Base64</a> encoded <q><code>username:password</code></q> string</li>
						<li>Username and password are <a href="http://www.google.com/search?hl=en&amp;q=base64+decoder"><em>not</em> transmitted securely</a></li>
						<li>Basic authentication should <em>always</em> use HTTPS</li>
					</ul>
					<li>Authorization is handled on the server side</li>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP/1.0 401 Unauthorized
WWW-Authenticate: Basic realm="SokEvo"</pre>
					<pre href="http://en.wikipedia.org/wiki/Basic_access_authentication">GET /private/index.html HTTP/1.0
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</pre>
				</ul>
			</slide>
			<slide>
				<title>Repeated Access</title>
				<ul>
					<li>Clients typically access more than one protected resource</li>
					<ul>
						<li>A perfectly stateless client would always request authentication from the user</li>
						<li>Using the <em>realm</em> clients can identify repeated accesses to sets of resources</li>
					</ul>
					<li>Web interactions by default are perfectly stateless</li>
					<ul>
						<li>Each request is completely independent from other requests</li>
						<li>Stateless interactions make the Web loosely coupled and scalable</li>
						<li>Concepts like the <em>realm</em> or cookies introduce <q>state</q></li>
					</ul>
					<li>Clients remember the authentication and replay it automatically</li>
					<ul>
						<li>Browsers provide little control over this feature</li>
						<li><q>Logging out</q> of HTTP authenticated sessions is hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="http2">
				<title>HTTP/2</title>
				<ul>
					<li>Started with the goal of <em>improving browser efficiency</em> (i.e., no API focus)</li>
					<ul>
						<li>Spearheaded by Google with its <a href="https://en.wikipedia.org/wiki/SPDY">SPDY</a> approach for Chrome/Google connectivity</li>
					</ul>
					<li>Maintaining compatibility with HTTP/1.1 as much as possible</li>
					<ul>
						<li>Reuse the existing set of <a href="http://webconcepts.info/concepts/http-method/">request methods</a>, <a href="http://webconcepts.info/concepts/http-status-code/">status codes</a>, and most <a href="http://webconcepts.info/concepts/http-header/">header fields</a></li>
						<li>Allow peers to negotiate use of HTTP/1.1 and HTTP/2.0</li>
					</ul>
					<li>Advanced features for more efficient transmission and communications</li>
					<ul>
						<li>Headers can be compressed and repeated efficiently (binary transmission)</li>
						<li>Fully multiplexed avoiding blocking and other inefficiencies from ordered pipelining</li>
						<li><em>Server push</em> allows servers to send resources prior to getting requests</li>
					</ul>
					<li>Quick uptake through <a href="https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Protocol_support">support in all major browsers</a> and <a href="https://github.com/http2/http2-spec/wiki/Implementations">many servers</a></li>
				</ul>
			</slide>
		</part>
		<part id="messaging-protocols">
			<title>Messaging Protocols</title>
			<slide id="mqtt">
				<title>MQTT: An <q>IoT Funnel Protocol</q></title>
				<img src="mqtt-logo.png" href="https://mqtt.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Initiated by IBM and similar in scope to <link href="amqp">AMQP</link></li>
					<ul>
						<li>Instead of AMQP's exchanges/queues, MQTT uses the concept of a <em>message broker</em></li>
						<li>Message brokers handle subscriptions and distribution to interested clients</li>
					</ul>
					<li>MQTT specifically targets constrained environments</li>
					<ul>
						<li><em>Small code foot print</em> in order to fit onto embedded devices</li>
						<li><em>Limited network bandwidth</em> to work in constrained networks</li>
					</ul>
					<li>Various <em>Quality of Service (QoS)</em> levels allow support for different networks</li>
					<ul>
						<li><em>At most once delivery</em> sends once and does not retry</li>
						<li><em>At least once delivery</em> resends until a confirmation has been received</li>
						<li><em>Exactly once delivery</em> suppresses duplicates on the receiver side</li>
					</ul>
					<li>Mostly, MQTT is used to funnel sensor readings into a collection point</li>
				</ul>
			</slide>
			<slide id="amqp">
				<title>Advanced Message Queueing Protocol (AMQP)</title>
				<img src="amqp-logo.jpg" href="https://www.amqp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Originating in the world of financial institutions</li>
					<ul>
						<li>Typical scenarios are stock trading and other high-volume applications</li>
						<li>Protocols need to be optimized for speed and efficiency</li>
						<li>The goal is to efficiently route message from <em>producers</em> to <em>consumers</em></li>
						<li>An attempt to get out of lock-in of proprietary IBM protocols</li>
					</ul>
					<li>The basic AMQP model has four entities</li>
					<ul>
						<li><em>Producers</em> create messages and then publish them to exchanges</li>
						<li><em>Exchanges</em> receive messages and then distribute them to queue(s) using bindings</li>
						<li><em>Queues</em> store messages so that consumers can receive them</li>
						<li><em>Consumers</em> fetch messages from queues or get them by subscription</li>
					</ul>
					<li>AMQP is intended for large-scale but coordinated environments</li>
					<ul>
						<li>A good fit for settings where application development is centrally controlled</li>
						<li>A bad fit for an open and decentralized setting with management of exchanges/queues</li>
					</ul>
				</ul>
			</slide>
			<slide id="xmpp">
				<title>Extensible Messaging Protocol (XMPP)</title>
				<img src="xmpp-logo.png" href="http://xmpp.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Originally named <q>Jabber</q> and intended as an <em>open chat protocol</em></li>
					<ul>
						<li>Most chat systems are using closed and proprietary protocols</li>
						<li>XMPP allows an open ecosystem of chat services and clients to evolve</li>
					</ul>
					<li>Main development within IETF from 2002-2004</li>
					<li>XML was en vogue back then so the protocol is XML-based</li>
					<ul>
						<li>The entire client/server session is one XML document (a <a href="http://tools.ietf.org/html/rfc6120#section-4">stream</a>)</li>
						<li><q>Stream children</q> are XMPP's protocol data units (a <a href="http://tools.ietf.org/html/rfc6120#section-8">stanza</a>)</li>
						<li>XMPP <a href="http://tools.ietf.org/html/rfc6120#section-11">restricts XML</a> so that parsing is a bit simpler</li>
					</ul>
					<li>XMPP is specified as a generic core and an IM protocol</li>
					<ul>
						<li><a href="http://tools.ietf.org/html/rfc6120">XMPP Core (IETF RFC 6120)</a></li>
						<li><a href="http://tools.ietf.org/html/rfc6121">XMPP Instant Messaging and Presence (IETF RFC 6121)</a></li>
						<li><a href="http://tools.ietf.org/html/rfc6122">XMPP Address Format (IETF RFC 6122)</a></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="websocket">
			<title>WebSocket</title>
			<slide id="websocket-history">
				<title>Non-HTTP Connectivity for Browsers</title>
				<img src="websocket-logo.png" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li><code href="https://www.w3.org/TR/XMLHttpRequest2/">XMLHttpRequest</code> kicked off <em>Web 2.0</em> but is limited</li>
					<ul>
						<li>The first time Web apps can access the network to request information</li>
						<li>Allows non-XML content but is limited to HTTP request/response pattern</li>
					</ul>
					<li>WebSocket was initially part of HTML5 but then was spun off</li>
					<li>WebSocket is both an API and a protocol</li>
					<ul>
						<li>W3C publishes the <a href="http://www.w3.org/TR/websockets/">WebSocket API</a></li>
						<li>IETF publishes the <a href="http://webconcepts.info/specs/IETF/RFC/6455">WebSocket Protocol</a></li>
					</ul>
					<li>The WebSocket API allows web apps to open and use WebSocket connections</li>
					<ul>
						<li>Intended for any communications beyond HTTP's request/response pattern</li>
						<li>The most popular pattern are long-lasting connections for live updates</li>
					</ul>
				</ul>
			</slide>
			<slide id="websocket-upgrade">
				<title>HTTP to WebSocket Upgrade</title>
				<listing src="websocket-upgrade-request.txt" href="https://www.websocket.org/aboutwebsocket.html"/>
				<listing src="websocket-upgrade-response.txt" href="https://www.websocket.org/aboutwebsocket.html"/>
			</slide>
			<slide id="websocket-protocol">
				<title>WebSocket Protocol</title>
				<ul>
					<li>WebSocket sends data in <em>frames</em></li>
					<ul>
						<li>Frames are created when WebSocket peers exchange data</li>
						<li>Frames can carry either <em>binary data</em> or <em>text</em></li>
						<li><code href="https://www.w3.org/TR/websockets/#dom-websocket-send">send(data)</code> API automatically decides which frame type to use</li>
					</ul>
					<li><em>Fragmentation</em> allows frames to be of unknown size when started</li>
					<ul>
						<li>Frames can be followed by <em>continuation frames</em> when fragmented</li>
						<li>Fragments have no semantics and are simply a frame transfer mechanism</li>
					</ul>
					<li><em>Control frames</em> are used to communicate WebSocket state</li>
					<ul>
						<li><em>Close</em> frames are used to tear down WebSocket connections</li>
						<li><em>Ping/Pong</em> frames are used as a way to exchange heartbeat information</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="protocols-conclusions">
			<title>Conclusions</title>
			<slide id="api-foundations">
				<title>Protocols as Language Foundations</title>
				<ul>
					<li>Lower-level protocols can be safely ignored in the API space</li>
					<li>Application protocols become the foundation of the <q>API language</q></li>
					<li>Each protocol has a <em>style</em> and a <em>specific design</em></li>
					<li>Picking the <q>right</q> protocol makes a difference in API design</li>
				</ul>
			</slide>
			<slide id="protocols-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/viessmann-2017"><code>dret.net/lectures/viessmann-2017</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/viessmann-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>