<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="nie.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="http://www.nie.edu.sg/" title="Singapore National Institute for Education">Singapore NIE</a> API Workshop 2017</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> (<a href="mailto:dret@ca.com"><code>dret@ca.com</code></a>)</author>
	<affiliation><a href="http://www.ca.com/">CA Technologies</a>, <a href="http://www.apiacademy.co/">API Academy</a></affiliation>
	<date short="2017-03-29">March 29, 2017</date>
	<copyright>2017 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Time</th>
					<th valign="bottom">Title</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td align="right"><hotspot:toc class="time"/></td>
						<td valign="top"><b><hotspot:title/></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>API Workshop Introduction</title>
		<toc class="time">9.00-9.15</toc>
		<toc class="resources"><a href="https://www.ca.com/us/collateral/ebook/building-software-into-your-business-dna" title="Otto Berkes, 'Digitally Remastered: Building Software into Your Business DNA', John Wiley &amp; Sons, 2016">Digitally Remastered</a>&#160;· <a href="https://cio.gov/new-cio-council-report-on-developer-platforms-and-common-apis-and-services/" title="CIO Council Report, 'Developer Platforms: Shared Services for Common  Developer-Focused APIs and Services', March 2017">Developer Platforms</a></toc>
		<slide id="dret">
			<title>About Me</title>
			<ul>
				<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
				<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
				<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
				<li>While at EMC, working on transforming software products into service platforms</li>
				<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
				<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in May 2016 and now all about API Strategy and Design</li>
				<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
			</ul>
		</slide>
		<slide id="api-academy">
			<title>API Academy</title>
			<ul>
				<li>Global Team working on <em>API Strategy and Design</em> topics</li>
				<ul>
					<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver)</li>
					<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati)</li>
					<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London)</li>
					<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich)</li>
				</ul>
				<li>Evangelizing ideas and technologies</li>
				<ul>
					<li>Speaking (conferences, events)</li>
					<li>Teaching (workshops, bootcamps)</li>
					<li>Writing (blogs, articles, books)</li>
					<li>Doing (side projects on API-related topics)</li>
					<li>Standardizing (participating in specification work)</li>
				</ul>
			</ul>
		</slide>
		<slide id="msa-book">
			<title>Microservice Architecture Book</title>
			<img src="MSA-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
			<ul>
				<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
				<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
				<ul>
					<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">electronic version for free courtesy of CA Technologies</a></li>
					<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
				</ul>
			</ul>
		</slide>
		<slide id="agenda">
			<title>Agenda</title>
			<table cellspacing="10" style="font-size : 100%">
				<tr><td align="right">9.00-9.15</td><td><b>Introduction</b></td></tr>
				<tr><td align="right">9.15-10.00</td><td><b><a href="foundations">Foundations</a></b></td></tr>
				<tr><td align="right">10.00-10.30</td><td><b><a href="operations">Operations</a></b></td></tr>
				<tr><td align="right">10.45-11.45</td><td><b><a href="microservices">Microservices</a></b></td></tr>
				<tr><td align="right">11.45-12.30</td><td><b><a href="styles">API Styles</a></b></td></tr>
				<tr><td align="right">13.30-14.15</td><td><b><a href="technology">Technical Foundations</a></b></td></tr>
				<tr><td align="right">14.15-15.15</td><td><b><a href="design">Representation Design</a></b></td></tr>
				<tr><td align="right">15.30-16.00</td><td><b><a href="hypermedia">Hypermedia</a></b></td></tr>
				<tr><td align="right">16.00-16.30</td><td><b><a href="documentation">Documentation</a></b></td></tr>
				<tr><td align="right">16.30-17.00</td><td><b><a href="conclusions">Conclusions</a></b></td></tr>
			</table>
		</slide>
	</presentation>
	<presentation id="foundations">
		<title>Foundations</title>
		<toc class="time">9.15-10.00</toc>
		<toc class="resources"><a href="http://www.hbs.edu/faculty/Pages/item.aspx?num=193" title="Michael Porter, 'The Competitive Advantage: Creating and Sustaining Superior Performance', Free Press, New York, 1985">Competitive Advantage</a>&#160;· <a href="https://hbr.org/1999/03/unbundling-the-corporation" title="John Hagel and Marc Singer, 'Unbundling the Corporation', Harvard Business Review, March/April 1999">Unbundling the Corporation</a>&#160;· <a href="https://leanpub.com/software-architecture-for-developers" title="Simon Brown, 'Software Architecture for Developers', Leanpub, September 2016">Software Architecture</a></toc>
		<part id="three-drivers">
			<title>Three API Drivers</title>
			<slide id="rate-of-change">
				<title>The World Changes Quickly</title>
				<ul>
					<li>Technology evolves fast and drives market changes</li>
					<ul>
						<li><a href="http://www.apple.com/pr/library/2007/01/09Apple-Reinvents-the-Phone-with-iPhone.html">The smartphone appeared in 2007</a> and changed the world</li>
						<li>Few organizations can count on their markets being stable long-term</li>
					</ul>
					<li>Setting yourself up for changeability is critical</li>
					<ul>
						<li>Having the ability to change is risk mitigation</li>
						<li>Change can be <em>proactive</em> (innovation) or <em>reactive</em> (adaptation)</li>
					</ul>
					<li>Change frequently is not a choice</li>
					<ul>
						<li>Customers demand better products and expect changes</li>
						<li>Competition means that changing is a critical success factor</li>
					</ul>
				</ul>
			</slide>
			<slide id="examples">
				<title>Examples and Patterns and Practices</title>
				<ul>
					<li>Enough <em>examples</em> exist that show the value of APIs</li>
					<ul>
						<li>Being API-focused increases an organization's agility and adaptability</li>
						<li>Badly structured IT can be an existential threat to an organization</li>
					</ul>
					<li><em>Patterns</em> can be extracted from looking at success stories</li>
					<ul>
						<li>API strategy and success are carefully planned and executed</li>
						<li>API strategy is an investment and needs monitoring</li>
					</ul>
					<li><em>Practices</em> are visible and shared across organizations</li>
					<ul>
						<li>Technologies and tools are a quickly evolving space</li>
						<li>The difficult part is to mix and match based on context</li>
					</ul>
				</ul>
			</slide>
			<slide id="network-effect">
				<title>Network Effect</title>
				<ul>
					<li>Using APIs gains value with the number of available APIs</li>
					<ul>
						<li>This works best if APIs are easy to use</li>
						<li>API providers add value by <em>being easily accessible</em></li>
						<li>API consumers add value by <em>using available APIs</em></li>
					</ul>
					<li>Available and realizable gains grow with the size of the ecosystem</li>
					<li>The <em>network effect</em> also is known as <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">Metcalfe's Law</a></li>
				</ul>
				<blockquote>
					<p>The value of a telecommunications network is proportional to the square of the number of connected users of the system (n<sup>2</sup>).</p>
				</blockquote>
			</slide>
		</part>
		<part id="why">
			<title>APIs: Why?</title>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em></li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="castle-context">
				<title>Castles and Context</title>
				<ul>
					<li><em>The Castle</em> is not going anywhere anytime soon</li>
					<ul>
						<li>Managing interactions with one or more castles is a standard problem</li>
						<li>Merchants should focus on their business instead of the foundation</li>
					</ul>
					<li>Some castles may disappear because people move on to elsewhere</li>
					<li><em>Markets/Merchants</em> are more dynamic than <em>Castles</em></li>
					<ul>
						<li>Developing and offering a product is easier on a market</li>
					</ul>
					<li>APIs are <em>connective tissue</em> and <em>protective insulation layers</em></li>
					<ul>
						<li>Merchants should focus on <em>optimizing their differential in the value chain</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="digital-transformation">
				<title>Digital Transformation</title>
				<img href="https://upload.wikimedia.org/wikipedia/commons/3/31/Great_white_shark_south_africa.jpg" src="digital-transformation-shark.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="bimodal-it">
				<title>Bimodal IT</title>
				<img title="Bimodal IT office workers" href="https://en.wikipedia.org/wiki/Minions_(film)" src="minions.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="what">
			<title>APIs: What?</title>
			<slide id="organize-code">
				<title>Organize Code: Cohesion and Coupling</title>
				<ul>
					<li>Focusing on <em>high cohesion</em> and <em>low coupling</em></li>
					<ul>
						<li><em>High Cohesion</em> means that related functions remain together</li>
						<li><em>Low Coupling</em> means that unrelated functions are kept separate</li>
					</ul>
					<li>APIs use good software and system engineering practices</li>
					<ul>
						<li><em>Software Engineering</em> is concerned with how to program components</li>
						<li><em>System Engineering</em> is concerned with how to assemble components</li>
					</ul>
					<li>APIs introduce additional constraints</li>
					<ul>
						<li><em>Polyglot</em> designs have no bias towards programming languages</li>
						<li><em>Web APIs</em> mean that all interfaces are for network access</li>
						<li><em>Evolvability</em> allows components to evolve independently</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services <em>only</em> talk to each other through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>run-time linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="how">
			<title>APIs: How?</title>
			<slide id="public-partner-api">
				<title>Public/Partner APIs: Play in the API Economy</title>
				<ul>
					<li>Expose and use business capabilities through APIs</li>
					<ul>
						<li>APIs are a technical means to connect business processes</li>
						<li>APIs must be accompanied by strategy and policy</li>
					</ul>
					<li>Providing APIs: Reacting to market needs and movements</li>
					<li>Consuming APIs: Outsourcing capabilities to external partners</li>
				</ul>
			</slide>
			<slide id="private-api">
				<title>Private APIs: Align Capabilities and Solutions</title>
				<ul>
					<li>Avoid getting slowed down by IT dependencies</li>
					<ul>
						<li>Bigger solutions mean bigger costs of change</li>
						<li>Smaller solutions mean better business agility</li>
					</ul>
					<li><em>API First</em> means that capabilities <em>only</em> have APIs</li>
					<ul>
						<li>The only way to interact with a capability is through its API</li>
						<li>IT strategy must support effective <em>API-focused development</em></li>
						<li>IT strategy must enable effective <em>API-based operations</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<ul>
					<li>Getting rid of monoliths can be very expensive</li>
					<ul>
						<li>They have evolved over a long period of time</li>
						<li>Not all parts are well understood or frequently used</li>
					</ul>
					<li>Replacing monoliths with API-based infrastructure can be costly</li>
					<ul>
						<li>Often not a reasonable investment</li>
					</ul>
					<li>Replace as needed on an ongoing basis</li>
					<ul>
						<li>New capabilities get developed and take over responsibilities</li>
						<li>Less monolith capabilities get used over time</li>
						<li>Old capabilities are getting <em>strangled</em> by newer ones</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>They combine some essential IT trends of the past decade</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process and can take several years</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/foundations"><code>dret.net/lectures/nie-2017/foundations</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="operations">
		<title>Operations</title>
		<toc class="time">10.00-10.30</toc>
		<toc class="resources"><a href="https://plus.google.com/110981030061712822816/posts/bwJ7kAELRnf" title='Steve Yegge, "Steve&apos;s Google Platform Rant", 2011'>Platform Rant</a></toc>
		<part id="landscaping">
			<title>Running API Ecosystems</title>
			<slide id="api-price">
				<title>The API Price</title>
				<ul>
					<li>Operations in API ecosystems are harder than for monoliths</li>
					<ul>
						<li>Monitoring and debugging one system needs fewer and less flexible tooling</li>
						<li>API limit visibility to the <em>API surface</em> of services</li>
					</ul>
					<li>Is the API price worth it?</li>
					<ul>
						<li><em>APIs</em> trade ecosystem agility/flexibility for operational complexity</li>
						<li><em>Microservices</em> trade ease/speed of development for operational complexity</li>
					</ul>
				</ul>
			</slide>
			<slide id="gateways">
				<title>API Gateways</title>
				<ul>
					<li>API gateways are components put in front of APIs</li>
					<li>Sometimes only public/partner APIs are managed through a gateway</li>
					<li>The gateway is the secure/secured access point for all services</li>
					<li>General guidelines for gateway-based API operations</li>
					<ul>
						<li>All APIs are accessed only through the gateway (<a href="https://en.wikipedia.org/wiki/Facade_pattern">façade pattern</a>)</li>
						<li>Private APIs use the gateway for identity-based access control</li>
						<li>Public/Partner APIs uses the gateway for policy-based access control</li>
						<li>Oftentimes private and public/partner gateways are different instances/clusters</li>
						<li>Minimize roundtrip time between gateway and APIs</li>
						<li>Cloud-based gateways may need tight policy synchronization control</li>
						<li>Keep an eye on traffic between cloud and on-premise services</li>
					</ul>
				</ul>
			</slide>
			<slide id="monitoring-qa">
				<title>Monitoring is QA</title>
				<ul>
					<li>Less dependencies mean more complex failure scenarios</li>
					<ul>
						<li>Monoliths are either working well or they have a problem</li>
						<li>API ecosystems have many independent components that can fail</li>
					</ul>
					<li>Fewer/decentralized SE processes mean less QA potential</li>
					<ul>
						<li>Structured and homogeneous SE is easier to control through QA</li>
						<li>Decentralized and heterogeneous SE means quality is tested later</li>
					</ul>
					<li>API ecosystems work best when embracing decentralization and diversity</li>
					<ul>
						<li>Classical QA is replaced by automation and monitoring</li>
						<li><a href="https://en.wikipedia.org/wiki/Mean_time_between_failures" title="Mean Time Between Failures">MTBF</a> is replaced by <a href="https://en.wikipedia.org/wiki/Mean_time_to_repair" title="Mean Time To Repair">MTTR</a>: Design for failure</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="cd">
			<title>Continuous Delivery</title>
			<slide>
				<title></title>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/operations"><code>dret.net/lectures/nie-2017/operations</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="time">10.45-11.45</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="http://www.martinfowler.com/articles/microservices.html" title="Martin Fowler on Microservices">Fowler on Microservices</a></toc>
		<part id="why">
			<title>Microservices: Why?</title>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from..." href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going..." href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="MS-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Microservices: What?</title>
			<slide id="characteristics">
				<title><a href="http://martinfowler.com/articles/microservices.html">Microservice Characteristics</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="ms-focus">
				<title>Main Focus on Development/Deployment</title>
				<ul>
					<li>Microservice Architecture focuses on culture/development/operational aspects</li>
					<li>In order to develop/deploy MS, <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">three things are needed</a></li>
					<ul>
						<li><em>Rapid Provisioning:</em> Automated infrastructure</li>
						<li><em>Basic Monitoring:</em> Keeping a watchful eye on the MS landscape</li>
						<li><em>Rapid Deployment:</em> Ability to deploy quickly to test/production</li>
					</ul>
					<li>Loose coupling of services allows an agile service landscape</li>
					<ul>
						<li>Avoid coupling through design/development/deployment/operations</li>
						<li>The only acceptable coupling is through the service API</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Microservice Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: Less Focus on API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-and-the-web">
				<title>Microservices and the Web</title>
				<ul>
					<li>MSA replicates the most important success factors of the Web</li>
					<ul>
						<li>Encapsulation of code, allowing polyglot implementations</li>
						<li>Encapsulation of persistence, allowing polyglot storage</li>
						<li>Encapsulation of models, making the API the only available model</li>
					</ul>
					<li>The <em>only</em> service dependency is through APIs</li>
					<ul>
						<li>Works (mostly) well on the Web because of the uniform interface and HTML</li>
						<li>Works (mostly) well on the service Web for <q>well-designed</q> APIs</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="how">
			<title>Microservices: How?</title>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="containers">
				<title>Containerization!</title>
				<ul>
					<li><q href="http://www.apiacademy.co/resources/api360-microservices-summit-microservices-blind-spots/">Containerization is the gateway drug for microservices.</q></li>
					<li>Containers exist because of CI/CD (rapid deployment)</li>
					<li>Containers allow agility <em>on the development and deployment level</em></li>
					<li>MSA allows agility <em>on the service ecosystem level</em></li>
					<li>MSA without (some form of) containerization is hard to imagine</li>
				</ul>
			</slide>
			<slide id="ms-size">
				<title>How Micro?</title>
				<ul>
					<li>There is no hard limit on the size of a Microservice</li>
					<li>Domain limits (DDD) are a good starting point</li>
					<li>Team size (<a href="https://en.wikipedia.org/wiki/Conway's_law">Conway's Law</a>) is a good starting point</li>
				</ul>
			</slide>
			<slide id="ms-size-upside">
				<title>How Micro? The Good News!</title>
				<ul>
					<li>MSA tells you to keep services independent and agile</li>
					<li>MSA is a continuous process of reassessing services and their utility</li>
					<ul>
						<li>If a service is too big, split service and team and relaunch the new services</li>
						<li>If granularity is too small, join teams and services and relaunch the new service</li>
					</ul>
					<li>...but still not a simple answer to the <q>how big?</q> question</li>
				</ul>
			</slide>
			<slide id="services-or-code">
				<title>Why the Code Focus?</title>
				<ul>
					<li>Loose coupling is essential and not an easy thing to get right</li>
					<li>Microservice teams have complete authority over technology choices</li>
					<ul>
						<li>But they have to develop and deploy according to MSA</li>
					</ul>
					<li>Apart from <q>being agile</q>, the only visible part is the API</li>
					<li>MSA critically depends on API strategy, design, and tooling</li>
					<ul>
						<li><em>API quality</em> is a critical factor for MSA landscape fitness</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>Service Surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/microservices"><code>dret.net/lectures/nie-2017/microservices</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title>API Styles</title>
		<toc class="time">11.45-12.30</toc>
		<toc class="resources"><a href="https://martinfowler.com/articles/richardsonMaturityModel.html" title="Martin Fowler, 'Richardson Maturity Model', March 2010">RMM</a>&#160;· <a href="http://apistylebook.com/" title="Arnaud Lauret, 'API Stylebook', 2016">API Stylebook</a>&#160;· <a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://webconcepts.info/" title="Collection of Web Concepts">Web Concepts</a></toc>
		<part id="style-matters">
			<title>API Style Matters</title>
			<slide id="architectural-style">
				<title>Architectural Styles</title>
				<ul>
					<li>Architectural Style vs. Architecture</li>
					<ul>
						<li>Architectural Style: General principles informing the creation of an architecture</li>
						<li>Architecture: Designing a solution to a problem according to given constraints</li>
						<li>Architectural styles <em>inform</em> and <em>guide</em> the creation of architectures</li>
					</ul>
				</ul>
				<table width="95%">
					<tr>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="louvre.jpg" title="Louvre Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Louvre">Louvre</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/Baroque_architecture">Baroque</a></li>
							</ul>
						</td>
						<td>
							<img style="width : 90% ; margin : 2% ; " src="savoye.jpg" title="Villa Savoye Interior"/>
							<ul>
								<li>Architecture: <a href="http://en.wikipedia.org/wiki/Villa_Savoye">Villa Savoye</a></li>
								<li>Architectural Style: <a href="http://en.wikipedia.org/wiki/International_Style_(architecture)">International Style</a></li>
							</ul>
						</td>
					</tr>
				</table>
			</slide>
		</part>
		<part id="RPC">
			<title>Remote Procedure Call (RPC)</title>
			<slide id="RPC-capabilities">
				<title>Capabilities as Procedures</title>
				<ul>
					<li>Derived from traditional SE approaches</li>
					<ul>
						<li>Consumers know when to call which functions</li>
						<li>Control flow is left to the consumer</li>
					</ul>
					<li><q>Function libraries</q> are exposed as a collection of <q>API endpoints</q></li>
					<ul>
						<li>There are no constraints on the capabilities exposed</li>
						<li>Capabilities are primarily structured by <em>functions</em> and not by <em>resources</em></li>
					</ul>
					<li>There are many ways of mapping RPC onto a Web API</li>
					<ul>
						<li>Classical approaches are XML-RPC and SOAP</li>
						<li>More contemporary ones are JSON-based</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="REST">
			<title>Representational State Transfer (REST)</title>
		</part>
		<part id="more-style">
			<title>More API Styles</title>
			<slide id="event-sourcing">
				<title>Event Sourcing</title>
			</slide>
			<slide id="cqrs">
				<title>Command Query Responsibility Segregation (CQRS)</title>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/styles"><code>dret.net/lectures/nie-2017/styles</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="technology">
		<title>Technical Foundations</title>
		<toc class="time">13.30-14.15</toc>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc3986" title="RFC 3986: Uniform Resource Identifier (URI): Generic Syntax, January 2005">URI RFC</a>&#160;· <a href="https://tools.ietf.org/html/rfc7231" title="RFC 7231: Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, June 2014">HTTP RFC</a>&#160;· <a href="https://tools.ietf.org/html/rfc7159" title="RFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format, March 2014">JSON RFC</a>&#160;· <a href="https://tools.ietf.org/html/rfc6749" title="RFC 6749: The OAuth 2.0 Authorization Framework, August 2008">OAuth 2.0</a>&#160;· <a href="https://alexbilbie.com/guide-to-oauth-2-grants/" title='Alex Bilbie, "A Guide To OAuth 2.0 Grants"'>OAuth 2.0 Guide</a></toc>
		<part id="uri">
			<title>Uniform Resource Identifier (URI)</title>
			<slide id="resource-identification">
				<title>Resource Identification</title>
				<ul>
					<li>Early hypertext systems identified documents within the scope of a single system</li>
					<li>The Web uses URIs (Uniform Resource Identifers) as global identifiers</li>
					<ul>
						<li><code>http://www.ca.com/</code></li>
						<li><code>mailto:erik.wilde@ca.com</code></li>
						<li><code>tel:+1-510-684-2179</code></li>
						<li><code>urn:isbn:0451450523</code></li>
					</ul>
				</ul>
				<blockquote cite="http://www.w3.org/TR/2004/REC-webarch-20041215/#identification">Global naming leads to global network effects … the value of an identifier increases the more it is used consistently</blockquote>
				<p class="quotenote"><a href="http://www.w3.org/TR/webarch/">Architecture of the World Wide Web, Volume One</a></p> 
			</slide>
			<slide id="URI-resources">
				<title>URIs &amp; Resources</title>
				<ul>
					<li>A URI identifies a <em>resource</em></li>
					<li>But what is a resource? A resource is anything identified by a URI!</li>
					<li>Resources are a way of conceptually dividing up an information space</li>
					<li>URIs do not merely identify; they are often used for access and interaction</li>
					<li>Interaction mechanics are determined by the URI's scheme (<code><b>http</b>://www.ca.com/</code>)</li>
					<li>A popular method of interacting with a resource is by <em>dereferencing</em> the URI</li>
				</ul>
			</slide>
			<slide id="uri-schemes">
				<title>URI Schemes</title>
				<pre>URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]</pre>
				<pre>http://dret.net/lectures/nie-2017/technology#uri-schemes</pre>
				<ul>
					<li>URIs in their general case are very simple</li>
					<ul>
						<li>The scheme determines how resources are identified</li>
						<li>The identification may be hierarchical or non-hierarchical</li>
					</ul>
					<li>Many URI schemes are hierarchical</li>
					<ul>
						<li>It is then possible to use relative URIs such as in <code>&lt;a href=".."></code></li>
						<li>The slash character is not just a character, in URIs it has semantics</li>
					</ul>
					<li>Query components specify additional information</li>
					<ul>
						<li>It is non-hierarchical information further identifying the resource</li>
						<li>In many cases, it can be regarded as <q>input</q> for resource interactions</li>
					</ul>
				</ul>
			</slide>
			<slide id="representation-resource">
				<title>Resources &amp; Representations</title>
				<ul>
					<li>When a URI is dereferenced by a client, it receives some data</li>
					<li>That data is called a <em>representation</em> of the resource identified by the URI</li>
					<li>Resources are abstract, representations are concrete</li>
					<li>Resources may have various representations, and they may vary with time</li>
				</ul>
			</slide>
			<slide id="resource-representation-1">
				<title>1 Resource, 2 Representations</title>
				<center>
					<img src="google-representations-1.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</center>
			</slide>
			<slide id="resource-representation-2">
				<title>2 Resources, 1 Representation</title>
				<center>
					<img src="google-representations-2.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</center>
			</slide>
		</part>
		<part id="http">
			<title>Hypertext Transfer Protocol (HTTP)</title>
			<slide id="DNS-and-HTTP">
				<title>DNS &amp; HTTP</title>
				<p>The two fundamental protocols which every Web client must use are DNS access and HTTP. Most operating systems provide an API for DNS access. TCP (which is required as the foundation for HTTP) also is usually provided by the operating system. Most modern operating systems provide support for handling HTTP as well.</p>
				<img style="width : 90% ; margin : 2% ; " src="browser-dns-http.png"/>
			</slide>
			<slide id="HTTP-messages">
				<title>HTTP Messages</title>
				<ul>
					<li>HTTP needs a reliable connection</li>
					<ul>
						<li>The foundation for HTTP is the Internet's TCP</li>
						<li>DNS resolution yields an IP address</li>
						<li>Open TCP connection to default port 80 (or explicit port specified in URI)</li>
					</ul>
					<li>HTTP is a <em>text-based</em> protocol</li>
					<ul>
						<li>The connection is used to transmit <em>text messages</em></li>
						<li>All HTTP messages are human-readable (not all <em>entities</em>, though)</li>
						<li>Basic HTTP operations can be carried out by hand or simple tooling</li>
					</ul>
				</ul>
				<pre>start-line
*( header-field CRLF )
CRLF
[ message-body ]</pre>
			</slide>
			<slide id="http-headers">
				<title>HTTP Header Fields</title>
				<ul>
					<li>Header fields contain information about the message</li>
					<ul>
						<li><em>General header:</em> <code href="http://webconcepts.info/concepts/http-header/Date">Date</code> as the message origination date</li>
						<li><em>Request header:</em> <code href="http://webconcepts.info/concepts/http-header/Accept-Language">Accept-Language</code> indicates language preferences</li>
						<li><em>Response header:</em> <code href="http://webconcepts.info/concepts/http-header/Server">Server</code> contains system information</li>
						<li><em>Entity header:</em> <code href="http://webconcepts.info/concepts/http-header/Content-Type">Content-Type</code> specifies the media type of the entity</li>
					</ul>
					<li>HTTP defines <a href="http://webconcepts.info/concepts/http-header/">a number of header fields</a></li>
					<ul>
						<li>Unknown fields must be ignored (extensibility)</li>
					</ul>
					<li>HTTP is about acting on these fields</li>
					<ul>
						<li>HTTP defines what HTTP implementations must or should do</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-request">
				<title>HTTP Requests</title>
				<ul>
					<li>After opening a connection, the client sends a request</li>
					<ul>
						<li>The <a href="http://webconcepts.info/concepts/http-method/">method</a> indicates the action to be performed on the resource</li>
						<li>HTTP's most widely used methods are: <code href="http://webconcepts.info/concepts/http-method/GET">GET</code>, <code href="http://webconcepts.info/concepts/http-method/HEAD">HEAD</code>, <code href="http://webconcepts.info/concepts/http-method/POST">POST</code></li>
						<li>Other interesting methods are: <code href="http://webconcepts.info/concepts/http-method/PUT">PUT</code>, <code href="http://webconcepts.info/concepts/http-method/DELETE">DELETE</code></li>
					</ul>
					<li>The URI identifies the resource to which the request should be applied</li>
					<ul>
						<li>Absolute URIs are required when contacting <em>proxies</em></li>
						<li>Absolute paths are required when contacting a server directly</li>
						<li>The URI may contain <em>query information</em></li>
					</ul>
					<li>The <code href="http://webconcepts.info/concepts/http-header/Host">Host</code> header field must be included in every request</li>
				</ul>
				<pre>method SP request-target SP HTTP-version CRLF
*( header-field CRLF )
CRLF
[ message-body ]</pre>
			</slide>
			<slide id="http-get">
				<title>HTTP <code  href="http://webconcepts.info/concepts/http-method/GET">GET</code></title>
				<ul>
					<li>Retrieval action based on the URI</li>
					<ul>
						<li>Maybe implemented by reading a file</li>
						<li>Maybe implemented by processing a file</li>
						<li>Maybe implemented by querying a database</li>
						<li>Maybe implemented by invoking a process</li>
					</ul>
					<li>Semantics may change based on header fields</li>
					<ul>
						<li><code>If-*:</code> only reply with the entity if necessary</li>
						<li><code href="http://webconcepts.info/concepts/http-header/Range">Range:</code> only reply with the requested part of the entity</li>
					</ul>
					<li>Cacheability depends on header fields of the response</li>
				</ul>
				<pre>GET / HTTP/1.1
Host: www.ca.com</pre>
				<pre>HTTP/1.1 200 OK
Access-Control-Allow-Origin: *
Content-Type: text/html; charset=UTF-8
ETag: "1635c-54b703861183b-gzip"
Last-Modified: Fri, 24 Mar 2017 01:50:37 GMT
Server: Apache/2.4.6 (Red Hat Enterprise Linux) Communique/4.1.12
Cache-Control: no-cache
Date: Fri, 24 Mar 2017 10:06:04 GMT
Transfer-Encoding: chunked
Connection: keep-alive</pre>
			</slide>
			<slide id="http-response">
				<title>HTTP Responses</title>
				<ul>
					<li>The server's response to interpreting a request</li>
					<ul>
						<li>The <em  href="http://webconcepts.info/concepts/http-status-code">HTTP status code</em> is given numerically and as text</li>
						<li><code>2**</code> for variations of <q>ok</q></li>
						<li><code>3**</code> for redirections</li>
						<li><code>4**</code> are various client side problems (<code href="http://webconcepts.info/concepts/http-status-code/404">404</code>: not found)</li>
						<li><code>5**</code> are various server side problems</li>
					</ul>
					<li>Header fields specify additional information</li>
					<ul>
						<li>Information about the server</li>
						<li>Information about the entity (media type, encoding, language)</li>
					</ul>
				</ul>
				<pre>HTTP-version SP status-code SP reason-phrase CRLF
*( header-field CRLF )
CRLF
[ message-body ]</pre>
			</slide>
			<slide id="http-performance">
				<title>HTTP Performance</title>
				<ul>
					<li>HTTP/1.0 allows one transaction per connection</li>
					<ul>
						<li>TCP connection setup and teardown are expensive</li>
						<li>TCP's <em>slow start</em> slows down the initial phase of data transfer</li>
					</ul>
					<li>HTTP/1.1 introduces <em>persistent connections</em></li>
					<ul>
						<li>The TCP connection stays open for some time (10 sec is a popular choice)</li>
						<li>Additional requests to the same server use the same TCP connection</li>
					</ul>
					<li>HTTP/1.1 introduces <em>pipelined connections</em></li>
					<ul>
						<li>Instead of waiting for a response, requests can be queued</li>
						<li>The order may not be changed (there is no sequence number)</li>
					</ul>
					<li>HTTP/2 introduces <em>multiplexing</em>, <em>server push</em>, and <em>header compression</em></li>
					<ul>
						<li><em>Multiplexing</em> allows requests to be served in parallel</li>
						<li><em>Server push</em> allows servers to proactively push resources</li>
						<li><em>Header compression</em> greatly reduces the volume needed for header fields</li>
					</ul>
				</ul>
			</slide>
			<slide id="http-connection-handling">
				<title>HTTP Connection Handling</title>
				<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="http-phttp-pipelining.png"/>
			</slide>
		</part>
		<part id="representations">
			<title>Representations</title>
			<slide id="model">
				<title>What is a Model?</title>
				<ul>
					<li><q>Simplification</q> of the real world</li>
					<ul>
						<li>Only consider relevant/interesting traits, neglecting details and unneeded properties</li>
					</ul>
					<li><q>Abstraction</q> of the real world</li>
					<ul>
						<li>A generalization/concept/idealization</li>
						<li>Determine/distinguish common/defining/characteristic attributes</li>
					</ul>
					<li><q>Template</q> for the real world</li>
					<ul>
						<li>A mold/blueprint/reference/example</li>
						<li>Prescribe relevant/defining attributes</li>
					</ul>
					<li>Some models have physical embodiments, others do not</li>
					<li>Usually there is a one-to-many relationship between <em>models</em> and <em>instances</em></li>
				</ul>
			</slide>
			<slide id="metamodel">
				<title>What is a Metamodel?</title>
				<ul>
					<li>Models often are built on some underlying framework</li>
					<ul>
						<li>Metamodels provide frameworks and experience and tooling</li>
						<li>Metamodels have bias and picking an appropriate one is essential</li>
					</ul>
					<li>Metamodel frameworks help developers with model development</li>
					<ul>
						<li>A <em>structural framework</em> for defining and possibly relating models</li>
						<li>A <em>supportive framework</em> for defining schemas and validation</li>
						<li>A <em>infrastructure universe</em> for developers to work with models and instances</li>
					</ul>
					<li>The Web currently has three major metamodels</li>
					<ul>
						<li><link href="XML">Extensible Markup Language (XML)</link> with an <q>ordered tree bias</q></li>
						<li><link href="JSON">JavaScript Object Notation (JSON)</link> with an <q>object bias</q></li>
						<li><link href="RDF">Resource Description Framework (RDF)</link> with an <q>unordered graph bias</q></li>
					</ul>
				</ul>
			</slide>
			<part id="XML">
				<title>Extensible Markup Language (XML)</title>
				<slide id="XML-example">
					<title>XML Example</title>
					<ul>
						<li>Language identification</li>
						<li>Content/attribute separation</li>
						<li>Ordering and nesting of elements</li>
					</ul>
					<listing src="example-xml.xml" href="https://www.w3.org/TR/REC-xml/#sec-lang-tag"/>
				</slide>
			</part>
			<part id="JSON">
				<title>JavaScript Object Notation (JSON)</title>
				<slide>
					<title>JSON Origins</title>
					<ul>
						<li>JavaScript's native data structure as a separate format</li>
						<li>Popularized Web services when it replaced XML</li>
						<ul>
							<li>Most Web services are about <em>objects</em> and not about <em>documents</em></li>
							<li>XML requires developers to map between trees and objects</li>
							<li>JSON is a good match for native structures in many languages</li>
						</ul>
						<li>JSON lacks some of the tooling around XML</li>
						<ul>
							<li>No popular and widely supported schema languages</li>
							<li>No popular and widely supported path/query languages</li>
						</ul>
						<li>Many <q>NoSQL databases</q> effectively are JSON document databases</li>
					</ul>
				</slide>
				<slide id="JSON-example">
					<title>JSON Example</title>
					<ul>
						<li>Structured values can be objects and arrays</li>
						<ul>
							<li>Objects consist of members (which are key/value pairs)</li>
							<li>Arrays consist of values (possibly mixing types)</li>
						</ul>
						<li>Simple values can be string, number, boolean, or null</li>
						<li>Nesting of structured values</li>
					</ul>
					<listing src="example-json.json" href="https://tools.ietf.org/html/rfc7159#section-13"/>
				</slide>
			</part>
			<part id="RDF">
				<title>Resource Description Framework (RDF)</title>
				<slide id="RDF-example">
					<title>RDF Example</title>
					<img style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; " src="example-rdf.jpg" href="https://www.w3.org/TR/rdf11-primer/#section-triple"/>
				</slide>
			</part>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/technology"><code>dret.net/lectures/nie-2017/technology</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="design">
		<title>Representation Design</title>
		<toc class="time">14.15-15.15</toc>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title="Cesare Pautasso and Erik Wilde, 'Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design', Proceedings of the 18th International World Wide Web Conference, ACM Press, Madrid, Spain, April 2009">Loose Coupling</a></toc>
		<part id="loose-coupling">
			<title>Loose Coupling</title>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/design"><code>dret.net/lectures/nie-2017/design</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="hypermedia">
		<title>Hypermedia</title>
		<toc class="time">15.30-16.00</toc>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title="Erik Wilde, 'Patterns for Robust Extensibility'">Robust Extensibility</a></toc>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/hypermedia"><code>dret.net/lectures/nie-2017/hypermedia</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="documentation">
		<title>Documentation</title>
		<toc class="time">16.00-16.30</toc>
		<toc class="resources"></toc>
		<part id="documentation">
			<title>Documentation</title>
		</part>
		<part id="discovery">
			<title>Discovery</title>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/documentation"><code>dret.net/lectures/nie-2017/documentation</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="conclusions">
		<title>Conclusions</title>
		<toc class="time">16.30-17.00</toc>
		<toc class="resources"></toc>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/nie-2017/conclusions"><code>dret.net/lectures/nie-2017/conclusions</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/nie-2017"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>