<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="malmoe" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="dataservices.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/ischool/ischool/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title><a href="http://businessinnovation.berkeley.edu/data-science-strategy/lecture-series/">Data Science &amp; Strategy Lecture Series</a></title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a></author>
	<affiliation><a href="http://twitter.com/dret" title="Twitter">@dret</a></affiliation>
	<date short="2016-04-28">April 28, 2016</date>
	<copyright>2016 Erik Wilde</copyright>
	<presentation id="index">
		<title>From Data to Services</title>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract">This talk highlights how the current focus on "Big Data" mirrors a development in software engineering. Big enterprise software is still in use today, but the last decade has seen a major trend to move from large monoliths to decoupled smaller software units. Software development practices have followed suit, moving from large waterfall processes to incremental agile models. A similar development is likely to happen for data, where an increasing usage and dependency on data-driven processes will make it increasingly important to decouple processes, so that the data-driven landscape can evolve more quickly and in a decentralized way.</p>
		</slide>
		<slide id="dret">
			<title>About Me</title>
			<ul>
				<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH ZÃ¼rich</a></li>
				<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
				<li>While at UC Berkeley, working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
				<li>While at EMC, working on transforming software products into service platforms</li>
				<li>While at Siemens, working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em></li>
				<li>Active at the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, and <a href="http://dret.typepad.com/dretblog/">my blog</a></li>
			</ul>
		</slide>
		<part id="data-warehouse">
			<title>Data Warehouses</title>
			<slide id="waterfall">
				<title>The Waterfall</title>
				<ul>
					<li>Traditional software engineering worked well in a static world</li>
					<ul>
						<li>Long initial phases of data and process analyses</li>
						<li>Followed by long phases of data modeling and functionality specification</li>
						<li>Followed by long phases of database and functionality implementation</li>
						<li>Followed by the realization that the world had changed in the meantime</li>
					</ul>
					<li>Working towards <q>the perfect stable IT</q> is not a reasonable goal</li>
					<ul>
						<li>Companies are being restructured and reoriented faster than ever</li>
						<li>IT as something done in isolation in one company is a thing of the past</li>
					</ul>
					<li>Design for change and see the IT infrastructure as an <em>ecosystem</em></li>
					<ul>
						<li>In order to be <em>agile</em>, software components must be decoupled</li>
						<li>Granularity continues to shrink, for example in case of <em>microservices</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="beyond-waterfall">
				<title>Beyond the Waterfall</title>
				<ul>
					<li>Waterfall models are causing trouble on a variety of fronts</li>
					<ol>
						<li>All logic works directly on the <q>one true model</q> of the database</li>
						<li>Making changes to the overall data and functionality model is complex</li>
						<li>The overall model/implementation assumes a homogenous environment</li>
						<li>Dependencies between software modules make it hard to isolate changes</li>
					</ol>
					<li>Newer approaches try to avoid these problems with new methods and technologies</li>
					<ol>
						<li>Move from direct database access to a <a href="https://en.wikipedia.org/wiki/Multitier_architecture">multitier architecture</a></li>
						<li>Use <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain-Driven Design</a> for establishing and separating <em>bounded contexts</em></li>
						<li>Services/APIs hide implementation technologies/details from consumers</li>
					</ol>
					<li><a href="http://dret.net/netdret/publications#pau09a">Loosely coupled</a> Web Technologies are replacing traditional <a href="https://en.wikipedia.org/wiki/Enterprise_application_integration" title="Enterprise Application Integration">EAI</a> approaches</li>
				</ul>
			</slide>
			<slide id="EAI-datalake">
				<title>Data Lakes are EAI-ish</title>
				<ul>
					<li>Data Lakes are better than Data Warehouses</li>
					<ul>
						<li>Retaining as much of the original model/structure as possible</li>
						<li>Schemaless and thus allowing everything to be poured into it</li>
						<li>Better at enabling exploration than the more goal-driven warehouses</li>
					</ul>
					<li>Data Lakes are the EAI of Data Science</li>
					<ul>
						<li>They assume that there is one data source for all applications</li>
						<li>Changes in the data source thus potentially affect many applications</li>
						<li>Very centralized and heavyweight approach</li>
					</ul>
					<li>Expect decentralized architectures to replace/augment Big Data Lakes</li>
				</ul>
			</slide>
		</part>
		<part id="datalake">
			<title>Data Lakes</title>
			<slide id="datalake-today">
				<title>Data Lake Today</title>
				<img src="crater-lake.jpg" title="Crater Lake" href="https://www.flickr.com/photos/dret/3533839805" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide id="datalake-problems">
				<title>Data Lake Problems</title>
				<ul>
					<li>Volume: It may be impractical/impossible to capture all data</li>
					<ul>
						<li><em title="Internet of Things">IoT</em> scenarios have high volume/rates of raw sensor data</li>
					</ul>
					<li>Velocity: Data may only be needed for local and immediate decision-making</li>
					<ul>
						<li>Connected cars provide some data services but most data remains onboard for operations</li>
					</ul>
					<li>Variety: Integration scenarios require the harmonization of data models</li>
					<ul>
						<li>Decision-making needs integrated data instead of vendor-specific models</li>
					</ul>
					<li>Variability: Data cleansing often is needed to improve data quality</li>
					<ul>
						<li>Raw data can be low quality and should remain isolated from good data</li>
					</ul>
					<li>Regulation: Certain data sources or aspects may be regulated</li>
					<ul>
						<li>Depending on regulation, the physical location of data may be important</li>
					</ul>
					<li>Experimentation: Data sources and models are constantly evolving</li>
					<ul>
						<li>How to make sure that the lake and lake users are not tightly coupled</li>
					</ul>
				</ul>
			</slide>
			<slide id="datalake-future">
				<title>Data Lake Future</title>
				<img src="yuanyang-terraces.jpg" title="Photo: Peter Liu" href="https://www.flickr.com/photos/peteropaliu/12815918504" style="height : 65% ; margin : 4% ; "/>
			</slide>
			<slide id="fish-focus">
				<title>Focus on the Fish!</title>
				<ul>
					<li>Data Lakes are yet another tool to identify and harvest value</li>
					<ul>
						<li>You can only find what's in the lake</li>
					</ul>
					<li>The lake is only a tool; what you want is just the fish!</li>
					<ul>
						<li>Data Lakes now are <q>a thing</q> because for the first time, they are cost-effective</li>
					</ul>
					<li>Centralization is a common pattern for simplification</li>
					<ul>
						<li>Big centralized services are successful and thriving</li>
						<li>Internally, they often are less centralized than they look from outside</li>
					</ul>
					<li>There is no such thing as <q>just data</q> without a defining context</li>
					<ul>
						<li>Every Data Lake has a purpose and is shaped by the motivation behind it</li>
						<li>Keep things open and flexible but don't expect it to work for everything</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="lakes-and-fish">
			<title>Better Lakes and Bigger Fish</title>
			<slide>
				<title>Schemaless and Open</title>
				<ul>
					<li>Traditional databases/warehouses are focused around models/schemas</li>
					<li>Data Lakes tend to be schemaless to allow greater flexibility</li>
					<li>There still is some underlying metamodel implicit in storage and processing</li>
					<li>Being schemaless and open is a big plus for adding data easily</li>
					<li>But there is more to data science than just having a lot of data</li>
				</ul>
			</slide>
			<slide>
				<title>Cascading Lakes</title>
				<ul>
					<li><a href="https://en.wikipedia.org/wiki/Data_cleansing">Data cleansing</a> often is a useful first step to isolate bad data</li>
					<ul>
						<li>Keeping the bad data may still be useful or required by law/regulation</li>
					</ul>
					<li>Regulation/legislation may require certain data to be <q>hidden</q></li>
					<ul>
						<li>There even may be requirements about physical data locations</li>
					</ul>
					<li>Isolating data by stability and permanence can help</li>
					<ul>
						<li>Different properties of data sources can require different management regimes</li>
					</ul>
					<li>Creating, changing, and combining value chains should be easy</li>
					<ul>
						<li>Allow for experimentation and for easily adding new sources/consumers</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Open Lake Landscape</title>
				<ul>
					<li>Different lakes support different kinds of fishery</li>
					<ul>
						<li><em>Structured Lakes</em> support traditional structured queries</li>
						<li><em>Semi-structured Lakes</em> support more document-oriented query types</li>
						<li><em>Logical Lakes</em> support inference and allow logic-based queries</li>
						<li><em>Statistical Lakes</em> are good for teaching machines how to fish</li>
					</ul>
					<li>Be wary of anybody selling you <em>the best lake for any kind of fishery</em></li>
					<ul>
						<li>Data Scientists should focus on solution architecture and patterns</li>
						<li>Having a plan for how to create, connect, and re-connect lakes is important</li>
					</ul>
				</ul>
			</slide>
			<slide>
				<title>Open and Flexible</title>
				<ul>
					<li>There are many ways to catch big fish</li>
					<li>Plan for an evolving landscape that can change and adapt</li>
					<li></li>
				</ul>
			</slide>
		</part>
		<part id="next">
			<title>Conclusions</title>
			<slide id="from-data-to-services">
				<title>From Data to Services</title>
				<ul>
					<li>Data Lakes are better than Data Warehouses</li>
					<li>Individual <em>Big Data Lakes</em> are just one possibility</li>
					<li>Data Scientists should know about <em>lake ecosystems</em></li>
					<li>Expect APIs to become the <em>plumbing</em> connecting the lakes</li>
					<li>Data Scientists should be <em>fish farmers</em>, not just fishermen</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.jpg" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Slides online: <a href="http://dret.net/lectures/haas2016/"><code>dret.net/lectures/haas2016/</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/haas2016"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>