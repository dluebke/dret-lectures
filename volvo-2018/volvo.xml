<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="volvo.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Volvo 2018</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-03">March 20/21, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction to APIs</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="apiacademy-red-black.png" href="http://www.apiacademy.co/" title="API Acacdemy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
		</part>
		<part id="schedule">
			<title>Workshop Schedule</title>
			<slide id="day-1">
				<title>Schedule Day 1 (Tuesday, March 20)</title>
				<ul>
					<li>8.00-8.45: <a href="./introduction">Introduction to APIs</a></li>
					<li>8.45-10.00: <a href="./digital-transformation">Digital Transformation and API Strategy</a></li>
					<li>10.30-11.30: API Styles</li>
					<li>11.30-12.30: API and API Landscape Management</li>
					<li>13.30-14.45: Organizational Issues around APIs</li>
					<li>14.45-16.00: Q&amp;A and Clinics</li>
				</ul>
			</slide>
			<slide id="day-2">
				<title>Schedule Day 2 (Wednesday, March 21)</title>
				<ul>
					<li>8.00-9.00: Representations for APIs</li>
					<li>9.00-10.00: Hypermedia and REST</li>
					<li>10.30-11.30: Change Management for APIs</li>
					<li>11.30-12.30: <a href="./microservices">Microservices</a></li>
					<li>13.30-14.45: API Lifecycle Management</li>
					<li>14.45-16.00: Q&amp;A and Clinics</li>
				</ul>
			</slide>
		</part>
		<part id="high-level-view">
			<title>APIs from 50,000 feet</title>
			<slide id="api-language">
				<title>APIs are Languages</title>
				<ul>
					<li>APIs in their current sense evolved from the <em>original API</em></li>
					<ul>
						<li><em>Local APIs</em> originated as a way to build systems (i.e., one big thing)</li>
						<li><em>Network APIs</em> were invented decades ago but nobody found the silver bullet</li>
						<li><em>Web APIs</em> are a loose and evolving collection of principles and patterns</li>
					</ul>
					<li>Languages become necessary when coordination is required</li>
					<ul>
						<li><em>Human language</em> is a result of improving ecological fitness</li>
						<li><em>Human written language</em> is a result of new organizational challenges</li>
					</ul>
					<li>Same problems/approaches/answers like other language problems</li>
					<ul>
						<li><em>Domain-only:</em> Domains figure out their problems and their languages</li>
						<li><em>Universal:</em> Find the <em>universal grammar</em> and use it everywhere</li>
						<li><em>Hybrid:</em> Establish principles and patterns but avoid überformats</li>
					</ul>
				</ul>
			</slide>
			<slide id="who-is-talking">
				<title>APIs: Who's Talking?</title>
				<ul>
					<li>Languages both establish and cross domain boundaries</li>
					<li>System/ecosystem boundaries are blurry</li>
					<ul>
						<li>System/ecosystem perspective is a question of perspective</li>
					</ul>
					<li>APIs provide a foundation for communications in an ecosystem</li>
					<ul>
						<li><em>Internal:</em> Value is in system changeability</li>
						<li><em>External:</em> Value is in system interoperability</li>
					</ul>
					<li>API discussions should always be aware of both perspectives</li>
					<ul>
						<li>Separate internal/external API strategies are counter-productive</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-pattern">
				<title>APIs are a Pattern</title>
				<div style="height: 70%">
					<img style="float: left; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Uniform interface" src="pneumatic-tubes.jpg" href="https://twitter.com/NotableHistory/status/529966375125544960"/>
					<img style="float: right; object-fit : contain ; margin : 0% 4% 0% 4% ; height: 100% ; " title="Self-describing representations and stateless interactions" src="nj-gun-permit.png"/>
				</div>
			</slide>
		</part>
		<part id="api-aspects">
			<title>APIs: 3 Drivers, 2 Perspectives, 1 Lifecycle</title>
			<slide id="api-driver-push">
				<title>API Driver #1: Push</title>
				<ul>
					<li>Many environments change at increasing velocities</li>
					<ul>
						<li>Economics change</li>
						<li>Incentives change</li>
						<li>Technologies change</li>
					</ul>
					<li>Organizations are <em>pushed</em> to better handle change</li>
					<ul>
						<li>They have to become better at <em>reacting to external changes</em></li>
						<li>They have to become better at <em>executing internal changes</em></li>
						<li>They have to become better at <em>embracing changing</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-pull">
				<title>API Driver #2: Pull</title>
				<ul>
					<li>External: Participating in the <em>API economy</em> becomes increasingly beneficial</li>
					<ul>
						<li>Interfacing with customers/partners becomes easier</li>
						<li>The number of API-ready customers/partners keeps increasing</li>
						<li>The <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</a> guarantees for the trend to continue</li>
					</ul>
					<li>Internal: Being able to plan and execute changing quickly improves fitness</li>
					<ul>
						<li>Traditionally, IT is perceived as a sluggish and heavyweight</li>
						<li>Increasingly, IT becomes the <q>lube</q> for the organizational machinery</li>
						<li>Additionally, IT can allow completely new classes of business models</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-driver-follow">
				<title>API Driver #3: Follow</title>
				<ul>
					<li>Having an <em>API strategy</em> becomes increasingly important</li>
					<ul>
						<li>Organizations have executed on this for a long time (Amazon API memo: 2002)</li>
						<li>Organizations share experiences and tooling around API strategies</li>
					</ul>
					<li>Using APIs becomes less of an <q>if</q> and more of a <q>how</q></li>
					<ul>
						<li>Business pushes IT to make sure strategy can be executed quickly</li>
						<li>IT can leverage others as justification and leaders</li>
					</ul>
				</ul>
			</slide>
			<slide id="two-views">
				<title>Two Views of API Scope/Focus</title>
				<ul>
					<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
					<ul>
						<li>Focus on <em>systems/software engineering</em> and better modularization</li>
						<li><q>Turn a system into an ecosystem.</q></li>
						<li>Use <em>Private APIs</em> as a way to reduce tight coupling</li>
					</ul>
					<li><em>External:</em> Using APIs to build up ecosystems</li>
					<ul>
						<li>Focus on <em>distributed/decentralized systems</em> and better connectivity</li>
						<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
						<li>Use <em>Public APIs</em> as a way to (better) interface with partners/public</li>
					</ul>
					<li>Both views are complementary and mostly a difference in perspective</li>
				</ul>
			</slide>
			<slide id="one-management-cycle">
				<title>One Management Lifecycle</title>
				<img title="API Lifecycle" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volvo-2018"><code>dret.net/lectures/volvo-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volvo-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="digital-transformation">
		<title>Digital Transformation</title>
		<toc class="resources"><a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<part id="why">
			<title>Why Digital Transformation?</title>
			<slide id="changing-it">
				<title>Why Change IT?</title>
				<ul>
					<li>More changes, more opportunities, more threats → <link href="why-digital-transformation">Digital Transformation</link></li>
					<li>Modular designs are easier to change → <link href="why-apis">APIs</link></li>
					<li>Modular implementations are faster to change → <link href="why-microservices">Microservices</link></li>
				</ul>
			</slide>
			<part id="why-digital-transformation">
				<title>Why Digital Transformation?</title>
				<slide id="it-today">
					<title>From Cost Center to Enabler</title>
					<ul>
						<li>IT used to be mostly a cost center (electrified bookkeeping)</li>
						<ul>
							<li>Best case scenario: IT never gets in the way and just works</li>
							<li>Worst case scenario: IT is expensive, and extremely hard to change</li>
						</ul>
						<li>IT has become a competitive advantage (out-innovating competitors)</li>
						<ul>
							<li>Best case scenario: IT enables fast, cheap, and constant innovation</li>
							<li>Worst case scenario: IT changes do not result in improved competitiveness</li>
						</ul>
					</ul>
				</slide>
				<slide id="api-product">
					<title>API as a Product? Products as APIs!</title>
					<ul>
						<li>Financing API programs can be a challenge</li>
						<ul>
							<li><em>API products</em> can help to generate or drive revenue</li>
							<li><em>API readiness</em> is a strategic investment in organization fitness</li>
						</ul>
						<li>API products can be used as internal or external building blocks</li>
						<ul>
							<li>Start exposing internal APIs as they are needed for building products</li>
							<li><q>Product thinking</q> helps with autonomy and velocity</li>
						</ul>
						<li>Build for change and growth and evolution</li>
					</ul>
				</slide>
				<slide id="api-landscape">
					<title>API Landscape</title>
					<img title="API Landscape" href="http://theapilandscape.pagedemo.co/" src="api-landscape-v2-march-2017.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
			</part>
			<part id="why-apis">
				<title>Why APIs?</title>
				<slide id="api-cargo-cult">
					<title>The Wonders of APIs</title>
					<img title="API Cargo Cult" src="apis-make-things-happen.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="internal-external">
					<title>Two Perspectives of API Scope/Focus</title>
					<ul>
						<li><em>Internal:</em> Using APIs to break up monolithic systems</li>
						<ul>
							<li>Focus on <em>systems/software engineering</em> and better modularization</li>
							<li><q>Turn a system into an ecosystem.</q></li>
						</ul>
						<li><em>External:</em> Using APIs to build up ecosystems</li>
						<ul>
							<li>Focus on <em>decentralized systems</em> and better connectivity</li>
							<li><q>Enable an ecosystem by loosely coupling systems.</q></li>
						</ul>
						<li>Both views are complementary and mostly a difference in perspective</li>
						<ul>
							<li>The <em>internal perspective</em> tends to gravitate towards <q>building a system</q></li>
							<li>The <em>external perspective</em> tends to ignore the complexities of decentralization</li>
						</ul>
					</ul>
				</slide>
				<slide id="business-model">
					<title>APIs Serve a Purpose</title>
					<blockquote><q>Do not try to find the right business model for your APIs; instead, try to find the right APIs for your business model.</q></blockquote>
					<p class="quotenote"><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a>: <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></p>
				</slide>
			</part>
			<part id="why-microservices">
				<title>Why Microservices?</title>
				<slide id="web-works">
					<title>The Web Works</title>
					<ul>
						<li>MSA is about service autonomy in service-oriented landscapes</li>
						<ul>
							<li><em>Developer autonomy</em> is the freedom to choose the best tools for the job</li>
							<li><em>Operations autonomy</em> means that every service is operated standalone</li>
						</ul>
						<li>MSA is also about effectiveness in autonomy-focused service-oriented landscapes</li>
						<ul>
							<li><em>Rapid provisioning</em> means that getting started is an easy task</li>
							<li><em>Basic monitoring</em> establishes visibility into service operations</li>
							<li><em>Rapid deployment</em> increases the velocity of service landscape evolution</li>
						</ul>
					</ul>
				</slide>
				<slide id="web-industrialized">
					<title>The Web, Industrialized</title>
					<ul>
						<li>MSA applies Web Architecture's <em href="http://dret.net/netdret/publications#pau09a">loose coupling</em> to the API space</li>
						<ul>
							<li>Build services with no hidden dependencies</li>
							<li>Choose the best tool for the job</li>
							<li>Decouple service provisioning from delivery architecture</li>
							<li>Monitor service state and usage</li>
							<li>React quickly when customers or market demand change</li>
							<li>Experiment ruthlessly and keep experimentation cost low</li>
						</ul>
						<li>MSA is all about being webby while minimizing the cost</li>
					</ul>
				</slide>
				<slide id="microservices-cargo-cult">
					<title>Microservices Cargo Cult</title>
					<img title="Microservices Cargo Cult" src="microservices-cargo-cult.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
				</slide>
				<slide id="what-how">
					<title>Separating the <q>What</q> from the <q>How</q></title>
					<ul>
						<li><em>Why</em> do organizations use MSA and <em>what</em> are their goals?</li>
						<li>Microservices are a <em>pattern</em> for achieving API agility/velocity</li>
						<ul>
							<li><em>Loosely coupled services</em> to allow services to evolve independently</li>
							<li><em>DevOps</em> to allow services to emerge/evolve faster</li>
							<li><em>Infrastructure augmentation</em> for management and visibility of services</li>
						</ul>
						<li>Focus on the <q>what</q> instead of simply choosing a <q>how</q></li>
						<ul>
							<li>Many MSA advantages can be realized in non-MSA architectures</li>
							<li>More architectural discipline may be required to realize long-term gains</li>
						</ul>
					</ul>
				</slide>
			</part>
		</part>
		<part id="platforms">
			<title>What? Platforms!</title>
			<slide id="platform-dilemma">
				<title>The Platform Dilemma</title>
				<ul>
					<li>Platforms provide <em>support</em> but also create <em>constraints</em></li>
					<ul>
						<li><em>Support</em> in the form of a foundation and shared services/infrastructure</li>
						<li><em>Constraints</em> in the form of removing certain design options</li>
					</ul>
					<li>Balancing support and constraints is not always done explicitly</li>
					<ul>
						<li><em>Adding features</em> is more immediately visible than <em>removing options</em></li>
						<li><em>Unavailable design options</em> may constrain the design space dramatically</li>
					</ul>
					<li><em>Microservices</em> for the first time in enterprise IT take a step <q>back</q></li>
					<ul>
						<li><em>Remove constraints</em> to foster innovation and give teams more solution options</li>
						<li><em>Add support</em> mostly in an attempt to make the platform economically viable</li>
					</ul>
				</ul>
			</slide>
			<slide id="esb-platform">
				<title>Shared Runtime for Services: ESB</title>
				<ul>
					<li>Platforms often are conceived as <em>being actual infrastructure</em></li>
					<ul>
						<li><em>Centralized components</em> that provide capabilities and host services</li>
						<li>They become convenient components where every infrastructure problem is solved</li>
					</ul>
					<li>Is the <em>ESB platform pattern</em> an inescapable vicious cycle?</li>
					<ul>
						<li>What if <em>every capability had to be an API-driven service itself?</em></li>
						<li>What if the platform would focus on <em>defining/providing APIs?</em></li>
						<li>What if the platform is a set of shared ideas instead of shared artifacts?</li>
					</ul>
				</ul>
			</slide>
			<slide id="web-platform">
				<title>Principles/Protocols/Practices (P<sup>3</sup>): The Web Platform</title>
				<ul>
					<li>A set of shared <em>principles</em>, <em>protocols</em>, and <em>practices</em></li>
					<ul>
						<li><em>Principles</em> govern the general architectural style (REST)</li>
						<li><em>Protocols</em> define the way in which components interact</li>
						<li><em>Practices</em> are design patterns for when/how to use certain protocols</li>
					</ul>
					<li>The Web is and always has been about microservices</li>
					<ul>
						<li><em>Encapsulation</em> and strict API-only interactions</li>
						<li><em>Services</em> can start/evolve/succeed/fail/disappear entirely on their own</li>
						<li><em>Discovery</em> is just another service</li>
						<li><em>Description</em> is part of a service itself</li>
					</ul>
					<li><em>Shared nothing</em> architecture with no single point of contention</li>
				</ul>
			</slide>
			<slide id="platform-monolith">
				<title>ESB Platforms are <q>Monoliths by Design</q></title>
				<ul>
					<li>Designed to provide shared tooling</li>
					<li>Tooling becomes the backdoor for <q>coupling creep</q></li>
					<li>Resist the urge to provide an <q>API platform</q></li>
					<li>Ignoring one of the two major API value propositions</li>
					<ul>
						<li>APIs are valuable because they decouple service users and providers</li>
						<li>APIs are valuable because they decouple service implementations</li>
					</ul>
				</ul>
			</slide>
			<slide id="landscape-decentralized">
				<title>Landscapes are <q>Decentralized by Design</q></title>
				<ul>
					<li>Designed to use shared languages</li>
					<li>Communications/coupling can only happen through APIs</li>
					<li>Anything that needs to be shared must be openly communicated</li>
					<li>Satisfying the two major API value propositions</li>
					<ul>
						<li>APIs are valuable because they decouple service users and providers</li>
						<li>APIs are valuable because they decouple service implementations</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="how">
			<title>How? MSA!</title>
			<slide id="ms-and-the-web">
				<title>Microservices and the Web</title>
				<ul>
					<li>MSA replicates the most important success factors of the Web</li>
					<ul>
						<li>Encapsulation of code, allowing polyglot implementations</li>
						<li>Encapsulation of persistence, allowing polyglot storage</li>
						<li>Encapsulation of models, making the API the only available model</li>
					</ul>
					<li>The <em>only</em> service dependency is through APIs</li>
					<ul>
						<li>Works (mostly) well on the Web because of the uniform interface and HTML</li>
						<li>Works (mostly) well on the service Web for <q>well-designed</q> APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="amazon-rules">
				<title><a href="https://gist.github.com/chitchcock/1281611">Jeff Bezos' Services Rant</a>: The Rules</title>
				<ul>
					<li>Famous small set of SOA design rules</li>
					<ul>
						<li>Teams must expose functionality through services</li>
						<li>Communication happens only through service interfaces</li>
						<li>There are no hard guidelines for service design</li>
						<li>Internal/external service is a matter of policy, not one of design</li>
					</ul>
					<li>Going against the <q>let's pick a platform</q> spirit of old-school SOA</li>
				</ul>
			</slide>
			<slide id="amazon-consequences">
				<title>Jeff Bezos' Services Rant: <a href="https://plus.google.com/+RipRowan/posts/eVeouesvaVX">The Consequences</a></title>
				<ul>
					<li>With more freedom comes more responsibility</li>
					<ul>
						<li>Monitoring and metrics are necessary for finding root causes</li>
						<li>All APIs must be hardened against DoS attacks</li>
						<li>Automated QA is necessary to really understand service health</li>
						<li>Services must be documented and registered so that they can be discovered</li>
						<li>Debugging becomes harder because of service dependencies</li>
					</ul>
					<li>Sophisticated tooling required to manage the new SOA landscape</li>
					<li>Much easier in today's technology landscape than 15 years ago</li>
				</ul>
			</slide>
			<slide id="never-stop-evolving">
				<title>Never Stop Evolving</title>
				<ul>
					<li>MSA is a style that should survive technologies</li>
					<li><q><a href="https://www.youtube.com/watch?v=Wh4PpY0J9ZI" title="API360 Microservices Summit – Microservices Blind Spots – Irakli Nadareishvili, ReferWell">Containerization will drive MSA adoption</a></q></li>
					<ul>
						<li>A fully containerized service landscape needs MSA to function</li>
						<li>Polyglot containers mean that language does not matter</li>
						<li>Data encapsulation means isolated/opaque data management</li>
					</ul>
					<li>As persistence/languages/containers evolve, APIs remain the stable factor</li>
					<ul>
						<li>The external perspective of <em>MSA management</em> is <em>API management</em></li>
						<li>The tools/languages/platforms for MSA service implementation evolve over time</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation-conclusions">
			<title>Conclusions</title>
			<slide id="transformation-process">
				<title>Transformation is a Process</title>
				<ul>
					<li>Always keep in mind <em>why</em> you are transforming</li>
					<li>Pick <em>what</em> to transform based on current/strategic needs</li>
					<li>Learn <em>how</em> to transform based on experience and feedback</li>
					<li><em>Never stop evolving!</em></li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volvo-2018"><code>dret.net/lectures/volvo-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volvo-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="abstract">Microservices are a way how to improve the speed of software delivery, result in more scalable architectures, and make sure that these goals do not compromise the robustness of the overall landscape. The concept of microservices has been distilled from a set of practices that have been adopted in bigger organizations that need to make sure that service development and delivery is as fast as possible. Microservices have a close architectural parallel in the Web, which is built around the same general principles of strictly separate implementations, easily usable interfaces, and an ecosystem model where the measure of success and fitness is that of the overall resulting system, and not that of the individual components.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-description-discovery">
				<title>Decentralize Description and Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="bimodal-it">
				<title>Bimodal IT</title>
				<img title="Bimodal IT office workers" href="https://en.wikipedia.org/wiki/Minions_(film)" src="minions.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no <q>Microservices API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/volvo-2018"><code>dret.net/lectures/volvo-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/volvo-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>