<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="apiacademy-new" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="herman-miller.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>Herman Miller API Workshop</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2018-04">April 16/17, 2018</date>
	<copyright>2018 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="introduction">
		<title>Introduction</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a></toc>
		<part id="academy-introduction">
			<title>Introduction</title>
			<slide id="dret">
				<title><code>@dret</code> on Twitter/GitHub</title>
				<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-academy">
				<title><a href="http://www.apiacademy.co/">API Academy</a></title>
				<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Global Team working on <em>API Strategy and Design</em> topics</li>
					<ul>
						<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
						<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					</ul>
					<li>Evangelizing ideas and technologies</li>
					<ul>
						<li>Speaking (conferences, events)</li>
						<li>Teaching (workshops, bootcamps)</li>
						<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
						<li>Doing (side projects on API-related topics)</li>
						<li>Standardizing (participating in specification work)</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-book">
				<title>Microservice Architecture</title>
				<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
				<ul>
					<li><q>Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
					<li><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/">Authored by</a> <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
					<ul>
						<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
						<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
					</ul>
				</ul>
			</slide>
			<slide id="dret">
				<title>About Me</title>
				<ul>
					<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
					<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
					<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
					<li>EMC (2011-2014), working on transforming software products into service platforms</li>
					<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
					<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
					<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
				</ul>
			</slide>
		</part>
		<part id="schedule">
			<title>Workshop Schedule</title>
			<slide id="day-1">
				<title>Schedule Day 1 (Monday, April 16)</title>
				<ul>
					<li>9.00-9.15: <link href="introduction">Introduction</link></li>
					<li>9.15-12.15: API Business Value and Case Studies</li>
					<li>13.00-13.30: <link href="design"/></li>
					<li>13.30-14.00: <link href="styles"/></li>
					<li>14.00-14.30: <link href="standards"/></li>
					<li>14.45-15.30: <link href="representations"/></li>
					<li>15.30-16.30: <link href="hypermedia"/></li>
					<li>16.00-16.30: <link href="change-management"/></li>
				</ul>
			</slide>
			<slide id="day-2">
				<title>Schedule Day 2 (Tuesday, April 17)</title>
				<ul>
					<li>9.00-12.15: Managing APIs</li>
					<li>13.00-13.45: <link href="microservices"/></li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/herman-miller-2018"><code>dret.net/lectures/herman-miller-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/herman-miller-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title>API Styles</title>
		<toc class="abstract">APIs can follow a variety of styles, each with their own specifics and advantages and drawbacks. No style by definition is better than other styles, it all depends on the capabilities that should be exposed by an API, as well as on the context. API styles have an impact on the coherence of an API landscape, and on the tooling that is required or available for building, consuming, and managing APIs. Choosing an API style is an important part of API design, and any specifics of API design only start to matter after a style has been chosen.</toc>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="api-language">
			<title>APIs are Languages</title>
			<slide id="problem-solving">
				<title>Distributed Problem Solving</title>
				<ul>
					<li>APIs are part of distributed problem solving</li>
					<li>Ideal APIs can be used for a range of problems</li>
					<li>Problem-solving often requires combining APIs</li>
					<li><q>Language families</q> make it easier to learn and use new APIs</li>
				</ul>
			</slide>
			<slide id="api-conversation">
				<title>APIs Interactions are Conversations</title>
				<ul>
					<li>APIs support conversations between interacting peers</li>
					<ul>
						<li>Some conversations are point-to-point (how to find the peer?)</li>
						<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
						<li>Some conversations are point-to-ether (what does the ether do?)</li>
					</ul>
					<li>API technology does not determine the API conversation style</li>
					<ul>
						<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHooks</q> pattern)</li>
						<li>Synchronous conversations can be layered on top of asynchronous foundations</li>
					</ul>
					<li>Conversation goals should determine the conversation style</li>
				</ul>
			</slide>
			<slide id="style-metaphors">
				<title>API Style Metaphors</title>
				<ul>
					<li><link href="tunnel-style"/>: Function calls in procedural programming</li>
					<li><link href="uri-style"/>: Data access objects</li>
					<li><link href="hypermedia-style"/>: Browsing the Web</li>
					<li><link href="query-style"/>: Databases and database queries</li>
					<li><link href="event-style"/>: Event-based programming</li>
				</ul>
			</slide>
		</part>
		<part id="tunnel-style">
			<title>Tunnel Style</title>
			<slide id="tunnel-style-image">
				<title>One Tunnel to Call them All</title>
				<img title="Tunnel Style" src="api-styles-tunnel.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="rpc-over-http">
				<title>Distributed Programming</title>
				<ul>
					<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
					<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
					<li>Resource identifiers typically are context-dependent</li>
					<li>Suffers from the typical RPC problems at bigger scale</li>
					<ul>
						<li>Failure is hard to deal with (function calls always succeed)</li>
						<li>Scoped identifiers result in naming challenges and compromised network effect</li>
					</ul>
					<li>Convenient for developers looking to <q>code like a local program</q></li>
				</ul>
			</slide>
		</part>
		<part id="uri-style">
			<title>URI Style</title>
			<slide id="uri-style-image">
				<title>Listing All Resources</title>
				<img title="URI Style" src="api-styles-uri.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-identifiers">
				<title>Identifiers for Resources</title>
				<ul>
					<li>Makes a major step towards a more webby service design</li>
					<ul>
						<li>Resources are identified by URIs and thus globally unique</li>
						<li>Data context may be established by using URI identifiers for resources</li>
						<li>Navigational context is missing because of a lack of links</li>
					</ul>
					<li>One necessary step in the evolution of designing decentralized systems</li>
					<ul>
						<li><em>Web of Data</em> is a good starting point</li>
						<li><em>Web of Services</em> is what makes the Web what it is</li>
					</ul>
					<li>Developers are tempted/required to hardcode control flows</li>
					<ul>
						<li>No navigational guidance provided by the API</li>
						<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-style">
			<title>Hypermedia Style</title>
			<slide id="hypermedia-style-image">
				<title>Linking All Resources</title>
				<img title="Hypermedia Style" src="api-styles-hypermedia.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-style">
				<title>Webby APIs</title>
				<ul>
					<li>Based on mixing data and controls in representations</li>
					<ul>
						<li><em>Data</em> represents the current resource state</li>
						<li><em>Controls</em> represent the advertised next options for clients</li>
					</ul>
					<li>Controls allow clients to work across individual APIs</li>
					<ul>
						<li>APIs expose sets of resources and provide links</li>
						<li>Clients follow links without being aware of API boundaries</li>
					</ul>
					<li>Developers must code differently from usual programming flows</li>
					<ul>
						<li>Applications are driven by the responses that client code receives</li>
						<li>Imperative programming is not the best fit for this kind of flow</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="query-style">
			<title>Query Style</title>
			<slide id="query-style-image">
				<title>Querying into Server-Side Models</title>
				<img title="Query Style" src="api-styles-query.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="database-style">
				<title>Querying Structured Data</title>
				<ul>
					<li>The API provides access to a rich interconnected data structure</li>
					<ul>
						<li>Clients know the data model and understand how to query it</li>
						<li>Clients want a small subset of the available data</li>
					</ul>
					<li>Querying into structure data needs an agreement on data and querying</li>
					<ul>
						<li>Query-style APIs define a <em>metamodel</em> that all data models must use</li>
						<li>Query-style APIs define a <em>query language</em> for querying data</li>
					</ul>
					<li><em>Loose coupling</em> depends on if and how clients adjust to schema changes</li>
					<ul>
						<li>Is it possible for clients to find out about schema changes?</li>
						<li>Do clients have to worry about schema changes?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="event-style">
			<title>Event-Based Style</title>
			<slide id="event-style-image">
				<title>Event Listening</title>
				<img title="Event-based Style" src="api-styles-event.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="fire-and-forget">
				<title>Fire and Forget</title>
				<ul>
					<li>Synchronous communications result in tighter coupling between peers</li>
					<li>Asynchronous communications can make data provision easier</li>
					<ul>
						<li>Data is tagged and submitted into some <em>messaging fabric</em></li>
						<li>The fabric takes care of notifying and delivering data to consumers</li>
					</ul>
					<li>The fabric is beyond the <em>smart endpoints and dumb pipes</em> idea</li>
					<ul>
						<li><em>Smart pipes</em> are not bad by itself but often have problems scaling</li>
					</ul>
					<li>Managing the fabric becomes an essential part of making code work</li>
					<ul>
						<li>Who is producing data?</li>
						<li>Who is consuming data?</li>
						<li>What are the ways in which data can or must be tagged?</li>
						<li>How is the namespace of data tagging managed?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="choosing-style">
			<title>Choosing an API Style</title>
			<slide id="api-style-maslow">
				<title>API Styles are Tools</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-style-properties">
				<title>API Style Properties</title>
				<ul>
					<li>API styles influence important API properties</li>
					<ul>
						<li><em>Scalability:</em> Number of APIs, API teams, API consumers, and API interactions</li>
						<li><em>Usability:</em> Problem domain, established styles, available tooling</li>
						<li><em>Changeability:</em> BFF, known/unknown group of consumers</li>
						<li><em>Performance:</em> What are critical issues in known scenarios</li>
						<li><em>Reliability:</em> Operational concerns and centralization/decentralization</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-style-context">
				<title>Context Considerations</title>
				<ul>
					<li><em>Backend for Frontend (BFF)</em> implies tight coupling producer/consumer</li>
					<ul>
						<li>API style and API design can be coordinated with the consumer</li>
					</ul>
					<li><em>Private APIs</em> implies a smaller group of potential consumers</li>
					<ul>
						<li>Style and design can be guided by internal guidelines/practices</li>
					</ul>
					<li><em>Partner APIs</em> implies a well-known group of consumers</li>
					<ul>
						<li>Broader appeal to consumers necessary</li>
					</ul>
					<li><em>Public APIs</em> is the most loosely couple group of consumers</li>
					<ul>
						<li>No control over consumers and their preferences/tools and development cycles</li>
					</ul>
				</ul>
			</slide>
			<slide id="style-implementations">
				<title>API Styles in the Wild</title>
				<ul>
					<li><link href="tunnel-style"/>: XML-RPC, SOAP, gRPC</li>
					<li><link href="uri-style"/>: Swagger/OpenAPI</li>
					<li><link href="hypermedia-style"/>: HAL, Siren, Atom</li>
					<li><link href="query-style"/>: GraphQL, OData, SPARQL</li>
					<li><link href="event-style"/>: MQ, WebSub, MQTT, XMPP, AMQP</li>
				</ul>
			</slide>
		</part>
		<part id="style-conclusions">
			<title>Conclusions</title>
			<slide id="no-style-hammer">
				<title>There is no Style Hammer</title>
				<ul>
					<li>API styles can be combined</li>
					<li>Style coherence makes a API landscape more usable</li>
					<li>Style fundamentalism may pick the wrong tool for a problem</li>
					<li>Be aware of styles and pick the one that works best</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/herman-miller-2018"><code>dret.net/lectures/herman-miller-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/herman-miller-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="abstract">Microservices are a way how to improve the speed of software delivery, result in more scalable architectures, and make sure that these goals do not compromise the robustness of the overall landscape. The concept of microservices has been distilled from a set of practices that have been adopted in bigger organizations that need to make sure that service development and delivery is as fast as possible. Microservices have a close architectural parallel in the Web, which is built around the same general principles of strictly separate implementations, easily usable interfaces, and an ecosystem model where the measure of success and fitness is that of the overall resulting system, and not that of the individual components.</toc>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<slide id="summary">
			<title>Summary</title>
			<p class="abstract"><toc class="abstract"/></p>
		</slide>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/start/scale services</li>
					</ul>
					<li>Microservice implementations are more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-description-discovery">
				<title>Decentralize Description and Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no <q>Microservices API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="msa-matters">
				<title>Microservice Architecture Matters</title>
				<ul>
					<li>MSA promotes agility (API designs should evolve)</li>
					<li>MSA promotes diversity (in design and implementation)</li>
					<li>MSA means more services (and the need for good DX across them)</li>
					<li>With MSA comes the need for a mature API strategy</li>
				</ul>
			</slide>
			<slide id="q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/herman-miller-2018"><code>dret.net/lectures/herman-miller-2018</code></a></li>
					<li>Slide sources: <a href="http://github.com/dret/lectures/tree/master/herman-miller-2018"><code>dret/lectures</code></a> on <a href="http://github.com/">GitHub</a></li>
					<li>Me: <a href="http://dret.net/netdret/"><code>http://dret.net/netdret/</code></a></li>
					<li>Twitter: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>