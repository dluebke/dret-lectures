<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="hotspot/hotspot/hotspot.xsl"?>
<?hotspot layout-path="hotspot/hotspot/layout" ?>
<?hotspot kilauea-path="hotspot/kilauea" ?>
<?hotspot layout="goodapi" ?>
<hotspot xmlns="http://dret.net/xmlns/hotspot/1" xmlns:hotspot="http://dret.net/xmlns/hotspot/1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://dret.net/xmlns/hotspot/1 hotspot/hotspot/schemas/hotspot.xsd">
	<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script>
	<configuration>
		<link subsections="yes" bookmarks="yes" versions="ericsson.xml" home="./" help="quick" contents="./" author="http://dret.net/netdret/"/>
		<paths img="img" listing="src"/>
		<outline count-text=" [*]" count-depth="all"/>
		<hyperlink extra=""/>
		<extension file="html" link=""/>
		<counter separator=":&#160;"/>
		<kilauea xmlns="http://xmlns.sharpeleven.net/kilauea">
			<plugins>
				<touch/>
			</plugins>
		</kilauea>
	</configuration>
	<license uri="http://creativecommons.org/licenses/by/3.0/" short="CC 3.0">
		<div class="license">
			<p><a rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/"><img alt="Creative Commons License" src="hotspot/hotspot/layout/apiacademy/apiacademy/somerights20.png" border="0" height="31" width="88"/></a></p>
			<p><a class="outlink" rel="license" title="view full text of license" href="http://creativecommons.org/licenses/by/3.0/">This work is licensed under a CC<br/>Attribution 3.0 Unported License</a></p>
		</div>
	</license>
	<title>API Academy Ericsson, Gurgaon, India</title>
	<author><a href="http://dret.net/netdret/">Erik Wilde</a> <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret">(<code>@dret</code>)</a></author>
	<affiliation><a href="http://www.apiacademy.co/">API Academy</a>, <a href="http://www.ca.com/">CA Technologies</a></affiliation>
	<date short="2019-01-25">January 25, 2019</date>
	<copyright>2019 Erik Wilde</copyright>
	<toc name="toc.html">
		<table rules="all" cellspacing="0" cellpadding="5" width="100%">
			<thead>
				<tr>
					<th valign="bottom">Subject</th>
					<th valign="bottom">Slides</th>
					<th valign="bottom">Additional Resources</th>
				</tr>
			</thead>
			<tbody>
				<hotspot:for-each-presentation>
					<tr class="vevent">
						<td valign="top"><b><span class="summary"><hotspot:title/></span></b></td>
						<td align="center"><hotspot:presentation-link title="Presentation Slides"><hotspot:title form="short"/></hotspot:presentation-link> <span class="toggle"><hotspot:slides>(*&#160;Slides)</hotspot:slides></span></td>
						<td align="center"><hotspot:toc class="resources"/></td>
					</tr>
				</hotspot:for-each-presentation>
			</tbody>
		</table>
	</toc>
	<presentation id="intro">
		<title>Introduction</title>
		<toc class="resources"><a href="http://www.apiacademy.co/">API Academy</a>&#160;· <a href="https://www.apiacademy.co/resources/books/continuous-api-management" title='Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen, "Continuous API Management: Making the Right Decisions in an Evolving Landscape", O&apos;Reilly Media, December 2018'>CAM Book (2018)</a>&#160;· <a href="https://www.apiacademy.co/resources/books/microservice-architecture-aligning-principles-practices-culture" title='Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, "Microservice Architecture: Aligning Principles, Practices, and Culture", O&apos;Reilly Media, June 2016'>MSA Book (2016)</a></toc>
		<slide id="dretwitter">
			<title><code>@dret</code> on Twitter/GitHub</title>
			<img src="dret.png" title="dret" href="http://twitter.com/dret" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
		</slide>
		<slide id="api-academy">
			<title><a href="http://www.apiacademy.co/">API Academy</a></title>
			<img src="academy-logo.png" href="http://www.apiacademy.co/" title="API Academy" style="float: right ; width : 30% ; margin : 4% ; "/>
			<ul>
				<li>Global Team working on <em>API Strategy and Design</em> topics</li>
				<ul>
					<li><a href="http://www.apiacademy.co/team_member/matt-mclarty/">Matt McLarty</a> (Vancouver): <a href="http://twitter.com/MattMcLartyBC" class="twitter-follow-button" title="Matt McLarty on Twitter: @MattMcLartyBC"><code>@MattMcLartyBC</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					<li><a href="http://www.apiacademy.co/team_member/mike-amundsen/">Mike Amundsen</a> (Cincinnati): <a href="http://twitter.com/mamund" class="twitter-follow-button" title="Mike Amundsen on Twitter: @mamund"><code>@mamund</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					<li><a href="http://www.apiacademy.co/team_member/mehdi-medjaoui/">Mehdi Medjaoui</a> (San Francisco): <a href="http://twitter.com/medjawii" class="twitter-follow-button" title="Mehdi Medjaoui on Twitter: @medjawii"><code>@medjawii</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					<li><a href="http://www.apiacademy.co/team_member/ronnie-mitra/">Ronnie Mitra</a> (London): <a href="http://twitter.com/mitraman" class="twitter-follow-button" title="Ronnie Mitra on Twitter: @mitraman"><code>@mitraman</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
					<li><a href="http://www.apiacademy.co/team_member/erik-wilde/">Erik Wilde</a> (Zürich): <a href="http://twitter.com/dret" class="twitter-follow-button" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a><script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></li>
				</ul>
				<li>Evangelizing ideas and technologies</li>
				<ul>
					<li>Speaking (conferences, events)</li>
					<li>Teaching (workshops, bootcamps)</li>
					<li>Publishing (blogs, articles, books, <a href="https://soundcloud.com/user-426834320">podcasts</a>)</li>
					<li>Doing (side projects on API-related topics)</li>
					<li>Standardizing (participating in specification work)</li>
				</ul>
			</ul>
		</slide>
		<slide id="msa-book">
			<title>Microservice Architecture (2016)</title>
			<img src="msa-cover.jpg" href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html" title="Microservice Architecture: Aligning Principles, Practices, and Culture" style="float: right ; height : 55% ; margin : 4% ; "/>
			<ul>
				<li><q href="https://www.apiacademy.co/resources/books/microservice-architecture-aligning-principles-practices-culture">Microservice Architecture: Aligning Principles, Practices, and Culture</q></li>
				<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Irakli Nadareishvili, Ronnie Mitra, Matt McLarty, and Mike Amundsen</li>
				<ul>
					<li>Get <a href="http://transform.ca.com/API-microservice-architecture-oreilly-book.html">free electronic version courtesy of CA Technologies</a></li>
					<li>Get <a href="http://shop.oreilly.com/product/0636920050308.do">a hardcopy version</a></li>
				</ul>
			</ul>
		</slide>
		<slide id="cam-book">
			<title>Continuous API Management (2018)</title>
			<img src="CAM-cover-2048px.jpg" href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559" title="Continuous API Management: Making the Right Decisions in an Evolving Landscape" style="float: right ; height : 55% ; margin : 4% ; "/>
			<ul>
				<li><q href="https://www.apiacademy.co/resources/books/continuous-api-management">Continuous API Management: Making the Right Decisions in an Evolving Landscape</q></li>
				<ul>
					<li><a href="http://shop.oreilly.com/product/0636920201755.do">O'Reilly book page</a></li>
					<li><a href="https://www.amazon.com/Continuous-Api-Management-Decisions-Landscape/dp/1492043559">Amazon book page</a></li>
				</ul>
				<li>Authored by <a href="http://www.apiacademy.co/">API Academy</a> members Mehdi Medjaoui, Erik Wilde, Ronnie Mitra, and Mike Amundsen</li>
			</ul>
		</slide>
		<slide id="dret">
			<title>About Me</title>
			<ul>
				<li><a href="http://dret.net/netdret/publications#wil97b">Ph.D. in Communications Systems</a> from <a href="http://www.ethz.ch/">ETH Zürich</a></li>
				<li>Working on Web Architecture after writing <a href="http://dret.net/netdret/publications#wil98">the first Web Technology book</a></li>
				<li>UC Berkeley (2006-2011), working on <a href="http://dret.net/netdret/publications#wil09g">Service Models for Open Government</a></li>
				<li>EMC (2011-2014), working on transforming software products into service platforms</li>
				<li>Siemens (2014-2015), working on using <em title="Internet of Things">IoT</em> to build <em title="Web of Things">WoT</em> (<q>APIs for Things</q>)</li>
				<li>Joined <a href="http://www.ca.com/" title="CA Technologies">CA</a>'s <a href="http://www.apiacademy.co/">API Academy</a> in 2016 and now all about API Strategy and Design</li>
				<li>Active in the usual places such as <a href="http://twitter.com/dret" title="@dret">Twitter</a>, <a href="http://github.com/dret" title="dret">GitHub</a>, <a href="http://dret.typepad.com/dretblog/">my blog</a>, <a href="http://www.linkedin.com/in/netdret">LinkedIn</a>, and <a href="https://www.flickr.com/photos/dret/" title="dret">flickr</a></li>
			</ul>
		</slide>
		<slide id="q-and-a">
			<title>Thanks! Q&amp;A</title>
			<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
			<ul>
				<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
				<li>More information about myself:</li>
				<ul>
					<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
					<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
				</ul>
				<li>Twitter handles:</li>
				<ul>
					<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
					<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
				</ul>
			</ul>
		</slide>
	</presentation>
	<presentation id="foundations">
		<title>Foundations</title>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/08/api-maps-hypermedia-api-design.html" title="API Maps: Hypermedia API Design">API Maps</a></toc>
		<part id="ui-api">
			<title>UIs and APIs</title>
			<slide id="distributed-systems">
				<title>Distributed Systems</title>
				<ul>
					<li>Any system that is not one integrated system has <em>components</em></li>
					<ul>
						<li>Components help to <em>separate</em> parts of the system</li>
						<li>Components must be able to <em>cooperate</em> for the system to work</li>
					</ul>
					<li>Distributed systems are always based on some model of component <em>interaction</em></li>
					<ul>
						<li><em>Tight coupling</em> means that it is harder to change or rearrange components</li>
						<li><em>Loose coupling</em> makes it easier for the system to be changed</li>
					</ul>
					<li>Interactions happen at well defined <em>interfaces</em> within the system</li>
				</ul>
			</slide>
			<slide id="interfaces">
				<title>Interfaces</title>
				<ul>
					<li>Interfaces are well-defined ways how components interact</li>
					<li>Interfaces allow <em>decoupling</em> by separating components</li>
					<li>Interfaces allow <em>cooperation</em> by defining <q>contracts</q> for interaction</li>
					<li><em>User Interfaces (UIs)</em> are a way how machines and humans communicate</li>
					<ul>
						<li><em>Command Line Interfaces (CLIs)</em> define text-based interactions through consoles</li>
						<li><em>Graphical User Interfaces (GUIs)</em> are based on visual metaphors and interactions</li>
					</ul>
					<li><em>Application Programming Interfaces (APIs)</em> are a way how machines communicate</li>
				</ul>
			</slide>
			<slide id="interfaces-and-coupling">
				<title>Interfaces and Coupling</title>
				<ul>
					<li>Interfaces allow to separate service production and consumption</li>
					<ul>
						<li><em>Web apps</em> allow users spontaneous access from any Web-enabled client</li>
						<li><em>Native apps</em> only work for supported platforms and after app download</li>
					</ul>
					<li><em>Loose coupling</em> improves scalability and agility</li>
					<ul>
						<li>Producers provide services and interfaces</li>
						<li>Consumers can use services without prior interaction or installation</li>
						<li>Both sides can make changes without the other side having to know</li>
					</ul>
				</ul>
			</slide>
			<slide id="browser-request">
				<title>Browsers speak HTTP</title>
				<ul>
					<li>Browser request Web pages (and required resources) via HTTP requests</li>
					<li>HTTP requests have a <em>request line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-request-minimal.txt"/>
				<listing src="http-get-request-chrome.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTTP</title>
				<ul>
					<li>Browser receive Web pages (and required resources) via <em>HTTP responses</em></li>
					<li>HTTP responses have a <em>status line</em> followed by a number of <em>header fields</em></li>
				</ul>
				<listing src="http-get-response.txt"/>
			</slide>
			<slide id="http-response">
				<title>Browsers understand HTML</title>
				<listing src="http-get-response.html"/>
			</slide>
			<slide id="html-layout">
				<title>HTML Structures are Layout Structures</title>
				<ul>
					<li>HTML is designed to help <em>browsers created a formatted page</em></li>
					<ul>
						<li>Formatting is based on elements for paragraphs, lists, tables, …</li>
						<li>HTML and browsers are not concerned with content or meaning</li>
					</ul>
					<li>HTML has a rather simple formatting model</li>
					<ul>
						<li>HTML is supposed to represent the fundamental layout structures</li>
						<li>Fine-tuning the layout can be done with <em>Cascading Style Sheets (CSS)</em></li>
					</ul>
					<li><em>HTML+CSS</em> are the foundation for statically formatted Web pages</li>
					<li>Dynamic pages also use <em>DOM+JavaScript</em> for creating a dynamic browser-based GUI</li>
				</ul>
			</slide>
			<slide id="screen-scraping">
				<title>Screen Scraping</title>
				<ul>
					<li>Screen scraping uses GUIs as APIs</li>
					<li>Layout and keywords and markup allow to <q>understand</q> the content</li>
					<li>Screen scraping is always brittle and requires sophisticated monitoring</li>
					<li>Sophisticated screen scraping is hard but can be relatively robust</li>
					<ul>
						<li>It is <em>much more robust</em> when client and server cooperate (i.e., update coordination)</li>
					</ul>
					<li><em>Always</em> prefer APIs over screen scraping when they are an option</li>
				</ul>
			</slide>
			<slide id="server-response-api-xml">
				<title>Machine-Readable Data (XML)</title>
				<listing src="http-get-response.xml"/>
			</slide>
			<slide id="server-response-api-json">
				<title>Machine-Readable Data (JSON)</title>
				<listing src="http-get-response.json"/>
			</slide>
			<slide id="gui-to-api">
				<title>From GUI to API</title>
				<ul>
					<li>Applications provide a variety of services for users</li>
					<ul>
						<li>In Web-style GUIs, these are available at various pages</li>
						<li>In SPA GUIs, these are available through various interaction paths</li>
						<li>In APIs, these are available according to the <em>API style</em></li>
					</ul>
					<li>APIs can use various style and two of them are inspired by the Web</li>
					<ul>
						<li><link href="uri-style"/> lists all <q>pages</q> based on their URIs or URI patterns</li>
						<li><link href="hypermedia-style"/> designs APIs as starting points and interaction paths</li>
					</ul>
					<li>API design follows a similar pattern to GUI design</li>
					<ul>
						<li>Start from use cases and design APIs that satisfy those use cases</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="api-product">
			<title>APIs are Products</title>
			<slide id="product-thinking">
				<title>Product Thinking</title>
				<ul>
					<li>Products are solutions for solving the problems of users</li>
					<ul>
						<li>Most users do not want to use a product, they want to solve a problem</li>
						<li>Understanding user problems leads to better product design and management</li>
						<li>Improving products should be focused on better solving user problems</li>
					</ul>
					<li>Products need to be managed throughout their full lifecycle</li>
					<ul>
						<li>Inception and design based on user stories</li>
						<li>Development and testing gathering feedback as early as possible</li>
						<li>Observing product usage and continuous improvement</li>
						<li>Retiring/replacing product as part of the overall lifecycle</li>
					</ul>
					<li>APIs are the visible/actionable part of problem-solving capabilities</li>
				</ul>
			</slide>
			<slide id="kaizen">
				<title>Kaizen: Continuous Improvement</title>
				<img title="Kaizen: Continuous Improvement" href="https://commons.wikimedia.org/wiki/File:Kaizen-1.svg" src="kaizen.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="product-evolution">
				<title>Product Consumers and Evolution</title>
				<ul>
					<li>APIs are <q>consumed</q> as a subscription-based activity</li>
					<ul>
						<li>APIs may change even if the consumers did not change anything</li>
						<li>Not breaking consumers is essential for scalable API management</li>
					</ul>
					<li>API consumers might use API products in unconventional ways</li>
					<ul>
						<li><em>Test servers</em> can help consumers to validate their implementations</li>
						<li><em>Production servers</em> should focus on maximizing operational stability</li>
						<li><em>Version freezes</em> allow consumers to never worry about possible updates</li>
					</ul>
					<li>Change management and versioning must be managed and communicated</li>
				</ul>
			</slide>
			<slide id="hyrums-law">
				<title>Hyrum's Law</title>
				<blockquote><q href="http://www.hyrumslaw.com/">With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.</q> (Hyrum Wright)</blockquote>
			</slide>
			<slide id="food-labels">
				<title>Food Labels</title>
				<img title="Food Labels" href="https://www.google.ch/search?q=food+labels&amp;tbm=isch" src="food-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="safety-labels">
				<title>Safety Labels</title>
				<img title="Product Safety Labels" href="https://www.google.ch/search?q=product+safety+labels&amp;tbm=isch" src="safety-labels.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-product-maturity">
				<title>API Product Maturity</title>
				<ul>
					<li>Organizations must have safe and scalable API product management practices</li>
					<ul>
						<li>For internal APIs, this determines how quickly and safely the organization can change</li>
						<li>For external APIs, this determines how quickly and safely the organization can change course</li>
					</ul>
					<li><em>API Archaeology</em> can help to uncover existing APIs that nobody manages</li>
					<ul>
						<li>Integration projects between systems for specific interaction scenarios</li>
						<li><em>Accidental APIs</em> should be replaced by designed and managed ones</li>
					</ul>
					<li><em>API Management</em> has to be practiced by anybody producing/consuming APIs</li>
				</ul>
			</slide>
		</part>
		<part id="conclusions">
			<title>Conclusions</title>
			<slide id="foundations-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="digital-transformation">
		<title>Digital Transformation</title>
		<toc class="resources"><a href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" title='Gregor Hohpe, "Reverse Engineering the Organization", May 2018'>Reverse Engineering the Organization</a>&#160;· <a href="http://dret.typepad.com/dretblog/2017/04/the-three-drivers-of-the-api-economy.html" title='Erik Wilde, "The Three Drivers of the API Economy", April 2017'>Three API Drivers</a></toc>
		<part id="digital-transformation-introduction">
			<title>Digital Transformation: Why?</title>
			<slide id="why-now">
				<title>APIs! But Why Now?</title>
				<ol>
					<li><em>Push:</em> Not moving becomes an increasingly risky strategy</li>
					<ul>
						<li>Markets move faster than ever before</li>
						<li>Technology-driven changes require readiness on the IT level</li>
					</ul>
					<li><em>Pull:</em> Participating in the API economy is increasingly beneficial (a.k.a. the <em href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">network effect</em>)</li>
					<ul>
						<li>Re-imagining organizations becomes a way of being</li>
						<li>Not being API-ready means missing increasingly more opportunities</li>
					</ul>
					<li><em>Follow the Leaders:</em> Moving towards APIs is not difficult anymore</li>
					<ul>
						<li>Examples of organizations allow insights into potential and risk</li>
						<li>The technology landscape is rich enough to get started</li>
					</ul>
				</ol>
			</slide>
			<slide id="castle">
				<title>Traditional IT</title>
				<img title="The Perfect Machine" href="https://commons.wikimedia.org/wiki/File:Burg_Hohenzollern_ak.jpg" src="hohenzollern-castle.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="bureaucracy">
				<title>Bureaucracy</title>
				<ul>
					<li>Bureaucracy evolved for a reason</li>
					<ul>
						<li>Clearly defined model of <em>input</em> and <em>output</em> of processing units</li>
						<li>Implementation issues of the processing units are <em>hidden</em></li>
						<li><em>Processing units can scale</em> because of encapsulation and statelessness</li>
						<li>Processing steps can be <em>easily pipelined</em> while keeping steps separate</li>
					</ul>
					<li>Well-designed service landscapes have the exact same properties</li>
					<ul>
						<li><em>Messaging models</em> instead of paper forms</li>
						<li>Message models are <em>as shallow as possible</em> (hide implementation model)</li>
						<li><em>Stateless interactions</em> allow for easy load balancing</li>
						<li>Resource identifiers and hypermedia allow <em>seamless workflows</em></li>
					</ul>
				</ul>
			</slide>
			<slide id="api-economy">
				<title>API Economy</title>
				<img title="Farmers' Market Sacramento" href="https://commons.wikimedia.org/wiki/File:Farmers'_market_Sacramento.jpg" src="farmers-market-sacramento.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation-meme">
				<title>Digital Transformation</title>
				<img src="digital-transformation-cobra.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="digital-transformation-status">
				<title>Digital Transformation Status</title>
				<img href="https://www.linkedin.com/pulse/reverse-engineering-organization-gregor-hohpe/" src="cio-reporting-line.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="what">
			<title>Digital Transformation: What?</title>
			<slide id="digitalization-dividends">
				<title><a href="http://queue.acm.org/detail.cfm?id=2956643">Digitalization Dividends</a></title>
				<ol>
					<li>Permissionless Innovation</li>
					<li>Enable Failure</li>
					<li>Disrupt Trust (replaced by autonomy and accountability)</li>
					<li>You Build It, You Own It</li>
					<li>Accelerate Deprecations</li>
					<li>End Centralized Metadata</li>
					<li>Concentrate the Pain</li>
					<li>Test Differently</li>
				</ol>
			</slide>
			<slide id="ms-blind-spots">
				<title>MSA Blind Spot: API Design/Management</title>
				<ul>
					<li>MSA focuses on culture/development/operational aspects</li>
					<ul>
						<li>Isolating services through all phases of the lifecycle</li>
						<li>But of course services still need to interact</li>
					</ul>
					<li>API consistency will help to make the landscape more productive</li>
					<ul>
						<li>Helping <em>API designers</em> to avoid re-inventing the wheel</li>
						<li>Helping <em>API providers</em> to be more usable for consumers</li>
						<li>Helping <em>API consumers</em> to depend on some consistency</li>
						<li>Helping with <em>API discovery</em> and managing the landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="organize-services">
				<title>Organize Services: Operate Smaller Components</title>
				<ul>
					<li>Services talk to each other <em>only</em> through APIs</li>
					<ul>
						<li>Each service runs as a standalone component</li>
						<li>Service dependencies are only through API invocations</li>
					</ul>
					<li>APIs trade flexibility for operational complexity</li>
					<ul>
						<li>Monitoring and debugging are easier in a <em>compile-time linked system</em></li>
						<li>Flexibility and scalability are better in a <em>runtime linked ecosystem</em></li>
					</ul>
					<li>APIs need <em>lifecycle management</em> to reach full potential</li>
					<ul>
						<li><em>Design</em> APIs so that they fit into the ecosystem</li>
						<li><em>Publish</em> APIs so that they can be discovered</li>
						<li><em>Deploy</em> APIs so that they can be used safely/securely</li>
						<li><em>Manage</em> APIs so that the ecosystem can be monitored</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-lifecycle">
				<title>API Lifecycle</title>
				<img title="Where API management is headed in 2017" href="http://blogs.ca.com/2017/01/23/api-management-headed-2017/" src="lifecycle-api.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="how">
			<title>Digital Transformation: How?</title>
			<slide id="digital-transformation-path">
				<title><a href="http://martinfowler.com/articles/microservices.html">The Path to Digital Transformation</a></title>
				<ol>
					<li>Componentization via services</li>
					<li>Organized around business capabilities</li>
					<li>Products not projects</li>
					<li>Smart endpoints and dumb pipes</li>
					<li>Decentralized governance</li>
					<li>Decentralized data management</li>
					<li>Infrastructure automation</li>
					<li>Design for failure</li>
					<li>Evolutionary design</li>
				</ol>
			</slide>
			<slide id="who">
				<title>Microservices for the Masses?</title>
				<ul>
					<li>Microservices are an investment and not a default choice</li>
					<ul>
						<li>The cost is the need for advanced infrastructure and teams</li>
						<li>The return is increased flexibility and agility</li>
						<li>Cost/benefit for microservices is targeted at long term capabilities</li>
					</ul>
					<li>What are the <a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html">prerequisites for considering microservices?</a></li>
					<ol>
						<li><em>Rapid Provisioning:</em> Automated process to quickly create server infrastructure</li>
						<li><em>Monitoring:</em> Multi-level monitoring from service health to business-level logic</li>
						<li><em>Rapid Deployment:</em> Automated ways to quickly move from code to running services</li>
					</ol>
					<li>Moving to MSA is a transition process and not one <em>Big Bang</em></li>
					<ul>
						<li>Just like the Web is never complete/final, neither is a microservices landscape</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-focus">
				<title>APIs are Front and Center</title>
				<ul>
					<li>The only visibility into a service is its API</li>
					<li>APIs should avoid letting their <q>implementation shine through</q></li>
					<li>The two main goals of an API are <em>interaction</em> and <em>encapsulation</em></li>
					<ul>
						<li><em>Interaction</em> should be as simple/easy as possible through the API</li>
						<li><em>Encapsulation</em> ensures that the implementation is invisible</li>
					</ul>
					<li>Help developers to navigate the evolving landscape of interlinked APIs</li>
				</ul>
			</slide>
			<slide id="surface">
				<title>Be Superficial</title>
				<ul>
					<li>The only thing that matters is the <em>service surface</em></li>
					<ul>
						<li>Make the surface <em>as shallow as possible</em> to reduce coupling</li>
						<li>Resist the temptation to <em>expose your model</em> just because you can</li>
					</ul>
					<li>Concepts must be well-defined but not necessarily deeply modeled</li>
					<ul><em>Domain Driven Design (DDD)</em> provides a framework for <em>bounded contexts</em></ul>
				</ul>
			</slide>
		</part>
		<part id="digital-transformation-conclusions">
			<title>Conclusions</title>
			<slide id="api-conclusions">
				<title>APIs Matter</title>
				<ul>
					<li>APIs combine essential IT trends of the past decades</li>
					<li>APIs result in service landscapes that can evolve and adapt</li>
					<li>API ecosystems have many tunable knobs and not <em>one correct setting</em> for them</li>
					<li>Transitioning to APIs is a gradual process</li>
				</ul>
			</slide>
			<slide id="digital-transformation-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="security">
		<title>Security</title>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc6749" title='RFC 6749: "The OAuth 2.0 Authorization Framework", October 2012'>OAuth 2.0 (RFC 6749)</a></toc>
		<part id="security-intro">
			<title>APIs and Security</title>
		</part>
		<part id="security-conclusions">
			<title>Conclusions</title>
			<slide id="security-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="styles">
		<title>Styles</title>
		<toc class="resources"><a href="http://dret.net/netdret/publications#pau09a" title='Cesare Pautasso and Erik Wilde, "Why is the Web Loosely Coupled? A Multi-Faceted Metric for Service Design", 18th International World Wide Web Conference (WWW2009), Madrid, Spain, April 2009'>Loose Coupling</a>&#160;· <a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<part id="api-language">
			<title>APIs are Languages</title>
			<slide id="problem-solving">
				<title>Distributed Problem Solving</title>
				<ul>
					<li>APIs are part of distributed problem solving</li>
					<li>Ideal APIs can be used for a range of problems</li>
					<li>Problem-solving often requires combining APIs</li>
					<li><q>Language families</q> make it easier to learn and use new APIs</li>
				</ul>
			</slide>
			<slide id="api-conversation">
				<title>APIs Interactions are Conversations</title>
				<ul>
					<li>APIs support conversations between interacting peers</li>
					<ul>
						<li>Some conversations are point-to-point (how to find the peer?)</li>
						<li>Some conversations are point-to-multipoint (how are groups managed?)</li>
						<li>Some conversations are point-to-ether (what does the ether do?)</li>
					</ul>
					<li>API technology does not determine the API conversation style</li>
					<ul>
						<li>HTTP can be used for asynchronous conversations (<q href="http://www.webhooks.org/">WebHooks</q> pattern)</li>
						<li>Synchronous conversations can be layered on top of asynchronous foundations</li>
					</ul>
					<li>Conversation goals should determine the conversation style</li>
				</ul>
			</slide>
			<slide id="style-metaphors">
				<title>API Style Metaphors</title>
				<ul>
					<li><link href="tunnel-style"/>: Function calls in procedural programming</li>
					<li><link href="uri-style"/>: Data access objects</li>
					<li><link href="hypermedia-style"/>: Browsing the Web</li>
					<li><link href="query-style"/>: Databases and database queries</li>
					<li><link href="event-style"/>: Event-based programming</li>
				</ul>
			</slide>
		</part>
		<part id="tunnel-style">
			<title>Tunnel Style</title>
			<slide id="tunnel-style-image">
				<title>One Tunnel to Call them All</title>
				<img title="Tunnel Style" src="api-styles-tunnel.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="rpc-over-http">
				<title>Distributed Programming</title>
				<ul>
					<li>Rooted in <em>Remote Procedure Call (RPC)</em> patterns</li>
					<li>Functions are the main abstraction and invoked at known <em>endpoints</em></li>
					<li>Resource identifiers typically are context-dependent</li>
					<li>Suffers from the typical RPC problems at bigger scale</li>
					<ul>
						<li>Failure is hard to deal with (function calls always succeed)</li>
						<li>Scoped identifiers result in naming challenges and compromised network effect</li>
					</ul>
					<li>Convenient for developers looking to <q>code like a local program</q></li>
				</ul>
			</slide>
		</part>
		<part id="uri-style">
			<title>URI Style</title>
			<slide id="uri-style-image">
				<title>Listing All Resources</title>
				<img title="URI Style" src="api-styles-uri.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-identifiers">
				<title>Identifiers for Resources</title>
				<ul>
					<li>Makes a major step towards a more webby service design</li>
					<ul>
						<li>Resources are identified by URIs and thus globally unique</li>
						<li>Data context may be established by using URI identifiers for resources</li>
						<li>Navigational context is missing because of a lack of links</li>
					</ul>
					<li>One necessary step in the evolution of designing decentralized systems</li>
					<ul>
						<li><em>Web of Data</em> is a good starting point</li>
						<li><em>Web of Services</em> is what makes the Web what it is</li>
					</ul>
					<li>Developers are tempted/required to hardcode control flows</li>
					<ul>
						<li>No navigational guidance provided by the API</li>
						<li>Guidance must be hand-crafted or clients are forced to do trial-and-error</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="hypermedia-style">
			<title>Hypermedia Style</title>
			<slide id="hypermedia-style-image">
				<title>Linking All Resources</title>
				<img title="Hypermedia Style" src="api-styles-hypermedia.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="webby-style">
				<title>Webby APIs</title>
				<ul>
					<li>Based on mixing data and controls in representations</li>
					<ul>
						<li><em>Data</em> represents the current resource state</li>
						<li><em>Controls</em> represent the advertised next options for clients</li>
					</ul>
					<li>Controls allow clients to work across individual APIs</li>
					<ul>
						<li>APIs expose sets of resources and provide links</li>
						<li>Clients follow links without being aware of API boundaries</li>
					</ul>
					<li>Developers must code differently from usual programming flows</li>
					<ul>
						<li>Applications are driven by the responses that client code receives</li>
						<li>Imperative programming is not the best fit for this kind of flow</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="query-style">
			<title>Query Style</title>
			<slide id="query-style-image">
				<title>Querying into Server-Side Models</title>
				<img title="Query Style" src="api-styles-query.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="database-style">
				<title>Querying Structured Data</title>
				<ul>
					<li>The API provides access to a rich interconnected data structure</li>
					<ul>
						<li>Clients know the data model and understand how to query it</li>
						<li>Clients want a small subset of the available data</li>
					</ul>
					<li>Querying into structure data needs an agreement on data and querying</li>
					<ul>
						<li>Query-style APIs define a <em>metamodel</em> that all data models must use</li>
						<li>Query-style APIs define a <em>query language</em> for querying data</li>
					</ul>
					<li><em>Loose coupling</em> depends on if and how clients adjust to schema changes</li>
					<ul>
						<li>Is it possible for clients to find out about schema changes?</li>
						<li>Do clients have to worry about schema changes?</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="event-style">
			<title>Event-Based Style</title>
			<slide id="event-style-image">
				<title>Event Listening</title>
				<img title="Event-based Style" src="api-styles-event.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="fire-and-forget">
				<title>Fire and Forget</title>
				<ul>
					<li>Synchronous communications result in tighter coupling between peers</li>
					<li>Asynchronous communications can make data provision easier</li>
					<ul>
						<li>Data is tagged and submitted into some <em>messaging fabric</em></li>
						<li>The fabric takes care of notifying and delivering data to consumers</li>
					</ul>
					<li>The fabric is beyond the <em>smart endpoints and dumb pipes</em> idea</li>
					<ul>
						<li><em>Smart pipes</em> are not bad by itself but often have problems scaling</li>
					</ul>
					<li>Managing the fabric becomes an essential part of making code work</li>
					<ul>
						<li>Who is producing data?</li>
						<li>Who is consuming data?</li>
						<li>What are the ways in which data can or must be tagged?</li>
						<li>How is the namespace of data tagging managed?</li>
					</ul>
				</ul>
			</slide>
			<slide id="event-sourcing">
				<title>Event Sourcing: Durable Event Logs</title>
				<ul>
					<li>Application state is determined by events that have happened</li>
					<ul>
						<li>Application state can be re-created by replaying the sequence of events</li>
						<li>Persisting events becomes essential for representing application state</li>
					</ul>
					<li>Useful pattern for designs where auditing/accounting is a key component</li>
					<ul>
						<li>Application state is determined <em>as a function of the audit trail</em></li>
						<li>Auditing/Accounting by definition is in sync with application state</li>
						<li>Temporal reasoning becomes easier</li>
					</ul>
					<li><q>Isolation</q> from external events (input/output) becomes essential</li>
					<ul>
						<li><em>Event replay</em> may be needed to recreate application state</li>
						<li><em>Event replay</em> must be prevented from replaying external effects</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="choosing-style">
			<title>Choosing an API Style</title>
			<slide id="api-style-maslow">
				<title>API Styles are Tools</title>
				<img title="Hammer and Screw" href="https://www.flickr.com/photos/justinbaeder/5317820857" src="maslow-hammer-nail.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="api-style-properties">
				<title>API Style Properties</title>
				<ul>
					<li>API styles influence important API properties</li>
					<ul>
						<li><em>Scalability:</em> Number of APIs, API teams, API consumers, and API interactions</li>
						<li><em>Usability:</em> Problem domain, established styles, available tooling</li>
						<li><em>Changeability:</em> BFF, known/unknown group of consumers</li>
						<li><em>Performance:</em> What are critical issues in known scenarios</li>
						<li><em>Reliability:</em> Operational concerns and centralization/decentralization</li>
					</ul>
				</ul>
			</slide>
			<slide id="api-style-context">
				<title>Context Considerations</title>
				<ul>
					<li><em>Backend for Frontend (BFF)</em> implies tight coupling producer/consumer</li>
					<ul>
						<li>API style and API design can be coordinated with the consumer</li>
					</ul>
					<li><em>Private APIs</em> implies a smaller group of potential consumers</li>
					<ul>
						<li>Style and design can be guided by internal guidelines/practices</li>
					</ul>
					<li><em>Partner APIs</em> implies a well-known group of consumers</li>
					<ul>
						<li>Broader appeal to consumers necessary</li>
					</ul>
					<li><em>Public APIs</em> is the most loosely coupled group of consumers</li>
					<ul>
						<li>No control over consumers and their preferences/tools and development cycles</li>
					</ul>
				</ul>
			</slide>
			<slide id="style-implementations">
				<title>API Styles in the Wild</title>
				<ul>
					<li><link href="tunnel-style"/>: XML-RPC, SOAP, gRPC, Avro</li>
					<li><link href="uri-style"/>: OpenAPI/Swagger, RAML, API Blueprint</li>
					<li><link href="hypermedia-style"/>: HAL, Siren, Atom, HATEOAS</li>
					<li><link href="query-style"/>: GraphQL, OData, SPARQL</li>
					<li><link href="event-style"/>: MQ, WebSub, MQTT, XMPP, AMQP, Kafka</li>
				</ul>
			</slide>
		</part>
		<part id="style-conclusions">
			<title>Conclusions</title>
			<slide id="no-style-hammer">
				<title>There is no Style Hammer</title>
				<ul>
					<li>API styles can be combined</li>
					<li>Style coherence makes a API landscape more usable</li>
					<li>Style fundamentalism may pick the wrong tool for a problem</li>
					<li>Be aware of styles and pick the one that works best</li>
				</ul>
			</slide>
			<slide id="styles-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="openapi">
		<title short="OpenAPI">OpenAPI (formerly known as Swagger)</title>
		<toc class="resources"><a href="https://github.com/OAI/OpenAPI-Specification" title="OpenAPI Specification Repository">OpenAPI</a>&#160;· <a href="http://openapi-map.apihandyman.io/?version=3.0" title="Interactive OpenAPI Map by Arnaud Lauret">OpenAPI Map</a></toc>
		<part id="openapi-intro">
			<title>OpenAPI Introduction</title>
			<slide id="openapi-basics">
				<title>OpenAPI Basics</title>
				<img src="openapi-logo.png" href="https://www.openapis.org/" style="float : right ; width : 20% ; margin-top : 0.5em ; margin-right : 2em ; "/>
				<ul>
					<li>Swagger started as an easy way to generate code from an API description</li>
					<ul>
						<li><em>Server code</em> is generated by generating stubs for all specified URI paths</li>
						<li><em>Client code</em> generates SDKs for clients by wrapping API interactions</li>
					</ul>
					<li><em>Swagger</em> was renamed to <em>OpenAPI</em> at the beginning of 2016</li>
					<ul>
						<li>Swagger still exists <a href="https://smartbear.com/">as a product suite</a> offered by <a href="https://swaggerhub.com/">SmartBear</a></li>
						<li><a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">OpenAPI 3.0</a> is the first standalone OpenAPI version and was <a href="https://www.openapis.org/blog/2017/07/26/the-oai-announces-the-openapi-specification-3-0-0">released in July 2017</a></li>
					</ul>
					<li>OpenAPI is focused on <link href="uri-style"/> APIs by modeling APIs as sets of URI paths</li>
					<ul>
						<li>Paths can be templated and have operations and optionally parameters</li>
						<li>JSON support is built into OpenAPI for request/response schemas</li>
						<li>XML support is present but rather weak in terms of XML sophistication</li>
					</ul>
				</ul>
			</slide>
			<slide id="json-yaml">
				<title>JSON and YAML</title>
				<ul>
					<li>JSON is the de-facto standard for structured data on the Web</li>
					<li>JSON is human-readable but visibly comes from a code background</li>
					<li><a href="http://yaml.org/" title="YAML Ain't Markup Language">YAML</a> evolved as a human-readable format for configuration data</li>
					<ul>
						<li>JSON data can be written in YAML for a more human-friendly syntax</li>
						<li>YAML has many additional features that JSON does not support</li>
					</ul>
					<li>OpenAPI is defined in JSON and allows JSON and YAML representations</li>
				</ul>
			</slide>
			<slide id="openapi-info-json">
				<title>OpenAPI Info Object (JSON)</title>
				<listing src="openapi-info.json" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="openapi-info-yaml">
				<title>OpenAPI Info Object (YAML)</title>
				<listing src="openapi-info.yaml" href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md#infoObject"/>
			</slide>
			<slide id="minimal-openapi-example">
				<title>Minimal OpenAPI Example</title>
				<ul>
					<li>Identification of the Swagger/OpenAPI version</li>
					<li>Minimal metadata about the described API</li>
					<li>URIs that are made available by the API</li>
					<li>Operations that can be performed on these URIs</li>
					<li>Responses to expect from these operations</li>
				</ul>
			</slide>
			<slide id="swagger-weather-json">
				<title>Minimal Swagger Example (JSON)</title>
				<listing src="swagger-weather.json"/>
			</slide>
			<slide id="swagger-weather-yaml">
				<title>Minimal Swagger Example (YAML)</title>
				<listing src="swagger-weather.yaml"/>
			</slide>
			<slide id="openapi-weather-json">
				<title>Minimal OpenAPI Example (JSON)</title>
				<listing src="openapi-weather.json"/>
			</slide>
			<slide id="openapi-weather-yaml">
				<title>Minimal OpenAPI Example (YAML)</title>
				<listing src="openapi-weather.yaml"/>
			</slide>
			<slide id="openapi-query-parameter">
				<title>Paths with Query Parameters</title>
				<ul>
					<li>URIs with Query Parameters: <code>/pets?limit=42</code></li>
				</ul>
				<listing src="petstore.yaml" line="10-23"/>
			</slide>
			<slide id="openapi-path-parameter">
				<title>Paths with Path Parameters</title>
				<ul>
					<li>URIs with Path Parameters: <code>/pets/somepetname</code></li>
				</ul>
				<listing src="petstore.yaml" line="56-68"/>
			</slide>
			<slide id="openapi-editor">
				<title>OpenAPI/Swagger Editor</title>
				<img title='Web-based interactive OpenAPI/Swagger editor' href="https://editor.swagger.io/" src="swagger-editor-petstore.png" class="fullsize"/>
			</slide>
			<slide id="openapi-map">
				<title>OpenAPI: The Complete Picture</title>
				<img title='OpenAPI Map by Arnau Lauret' href="http://openapi-map.apihandyman.io/?version=3.0" src="openapi-map.png" class="fullsize"/>
			</slide>
		</part>
		<part id="openapi-conclusions">
			<title>Conclusions</title>
			<slide id="openapi-summary">
				<title>Describing URI Style APIs</title>
				<ul>
					<li>OpenAPI describes APIs by listing all resource paths</li>
					<li>OpenAPI is often used to generate server/client code</li>
					<li>OpenAPI creates a static and tightly coupled API landscape</li>
					<li>Evolving OpenAPI APIs is not a core part of OpenAPI's mission</li>
				</ul>
			</slide>
			<slide id="openapi-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="change-management">
		<title short="Change Management">Change Management and Versioning</title>
		<toc class="resources"><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a>&#160;· <a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html" title='Erik Wilde, "Patterns for Robust Extensibility", April 2016'>Robust Extensibility</a>&#160;· <a href="http://semver.org/" title='Semantic Versioning 2.0.0'>Semantic Versioning</a>&#160;· <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-sunset-header" title='Erik Wilde, "The Sunset HTTP Header", Internet Draft wilde-sunset-header'>Sunset Header</a></toc>
		<part id="change-management-introduction">
			<title>Introduction</title>
			<slide id="versioning-practice">
				<title>Versioning in Practice</title>
				<ul>
					<li>Version numbers have an almost mythical role in IT</li>
					<ul>
						<li>But often they are only useful for signaling continuity or breakage points</li>
						<li>Most things work or break in a binary way (or simply refuse to even try)</li>
					</ul>
					<li>Compatibility comes in two basic flavors (one easier, one harder)</li>
					<ul>
						<li><em>Backwards compatibility</em> means to work with older components</li>
						<li><em>Forward compatibility</em> means to work with more advanced components</li>
					</ul>
					<li>The Web has good rules to support both compatibility types</li>
					<ul>
						<li><em>Backwards compatibility:</em> New browser accessing older content</li>
						<li><em>Forward compatibility:</em> Old browser accessing newer content</li>
					</ul>
				</ul>
			</slide>
			<slide id="versioning-tweet-fielding">
				<title>Versioning Breaks Things</title>
				<img title='Roy Fielding (@fielding): &apos;The reason to make a real REST API is to get evolvability … a &quot;v1&quot; is a middle finger to your API customers, indicating RPC/HTTP (not REST)&apos;' href="https://twitter.com/fielding/status/376835835670167552" src="versioning-tweet-fielding.png" class="fullsize"/>
			</slide>
			<slide id="evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Planning for evolution means to reduce pain in the future</li>
					<ul>
						<li>No immediate benefits other than <q>doing the right thing</q></li>
						<li>Modest effort when part of the API design process and culture</li>
					</ul>
					<li>Extensibility should be part of the <em>API design culture</em></li>
					<ul>
						<li>Each API must have and document a plan for API evolution</li>
						<li>The simplest possible plan may be to never change the API</li>
					</ul>
					<li>Extensibility should be made easy for API consumers</li>
					<ul>
						<li>Provide test cases that simulate correct/incorrect API extensions</li>
						<li>Provide feature flags so that services can enter <q>test mode</q></li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="robust-extensibility">
			<title>Robust Extensibility</title>
			<slide id="core-semantics">
				<title>Meaningful Core Semantics</title>
				<ul>
					<li>The core of the API allows clients to have meaningful interactions</li>
					<ul>
						<li>The starting point of an API should be meaningful and complete</li>
					</ul>
					<li>The core of the API is robust over time</li>
					<ul>
						<li>Anything that is added to the core does not change the core semantics</li>
					</ul>
					<li>Anything that is not part of the core can be safely ignored</li>
					<ul>
						<li><code>mustIgnore</code> semantics allow safe interactions beyond closely coordinated groups</li>
					</ul>
				</ul>
			</slide>
			<slide id="extension-points">
				<title>Well-Defined Extension Points</title>
				<ul>
					<li>APIs should be clear about where extensions are allowed</li>
					<ul>
						<li>API metamodels often decide where (potential) extension points are</li>
						<li>API schemas/definitions should further narrow down where extensions are allowed</li>
					</ul>
					<li>API tests can make sure that the extension points are properly implemented</li>
					<ul>
						<li>Extensions in allowed places are ignored and tests should succeed</li>
						<li>Extensions in other places should raise errors about malformed content</li>
					</ul>
					<li>Extension points are interesting to support in generic software</li>
					<ul>
						<li>Monitoring can report which and where extensions are being used</li>
						<li>Libraries can make it easy to create/parse extension data</li>
					</ul>
				</ul>
			</slide>
			<slide id="processing-model">
				<title>Well-Defined Processing Model</title>
				<ul>
					<li>Extensions are well-defined and their handling is well-defined as well</li>
					<ul>
						<li>Extension points make it clear where to expect extensions</li>
						<li>Processing models make it clear what to do with extensions</li>
					</ul>
					<li><code>mustIgnore</code> is a popular and good choice for extension processing</li>
					<ul>
						<li>Some formats allow extensions to declare their processing model (such as <code>mustUnderstand</code>)</li>
						<li>HTML has a rule of ignoring unknown elements but processing their content</li>
					</ul>
					<li>How to <em>learn</em> about extensions is a different matter</li>
					<ul>
						<li>If an API evolves along a single path it may be as simple as looking along that path</li>
						<li>If an API is used <a href="https://tools.ietf.org/html/draft-wilde-registries">in more complex ways</a> a registry may be a way to find extensions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="extensibility-examples">
			<title>Extensibility Examples</title>
			<slide id="extensibility-content">
				<title>Extensibility of Content</title>
				<ul>
					<li>Extending content can be done by <em>additive</em> changes to the content</li>
					<ul>
						<li><em>Adding properties</em> to the existing content model</li>
						<li><em>Limiting properties</em> to a more constraining appearance/value model</li>
					</ul>
					<li>Extension can never change the semantics of existing content</li>
					<ul>
						<li><em>Ignoring</em> extensions always must be a safe thing to do</li>
						<li><em>Dependencies across extensions</em> should be avoided if possible</li>
					</ul>
					<li>Specifying <em>extension points</em> depends on the representation format</li>
				</ul>
			</slide>
			<slide id="extensible-content-xml">
				<title>XML Content Extension</title>
				<listing src="address.xml"/>
				<listing src="address-extended.xml"/>
			</slide>
			<slide id="extensible-content-xsd">
				<title>XML Content Extension: XSD Schema</title>
				<listing src="address.xsd"/>
			</slide>
			<slide id="extensible-content-json">
				<title>JSON Content Extension</title>
				<listing src="address.json"/>
				<listing src="address-extended.json"/>
			</slide>
			<slide id="extensibility-control">
				<title>Extensibility of Controls</title>
				<ul>
					<li>Controls expose new paths of the workflow available to clients</li>
					<ul>
						<li>New paths should not have any impact on existing paths</li>
						<li>Existing clients should ignore those paths</li>
					</ul>
					<li>Hypermedia formats should be based on controls being an open set</li>
					<ul>
						<li>Specifics on how to add and handle extensions depend on the format</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="versioning-strategies">
			<title>Versioning Strategies</title>
			<slide id="semantic-versioning">
				<title><a href="http://semver.org/">Semantic Versioning</a></title>
				<ul>
					<li><a href="http://semver.org/">Semantic Versioning</a> standardizes the meaning of version numbers</li>
					<li>Version numbers follow the <code>MAJOR.MINOR.PATCH</code> pattern and the following rules</li>
					<ul>
						<li>Increase <code>MAJOR</code> version for incompatible API changes</li>
						<li>Increase <code>MINOR</code> version for adding functionality in a backwards-compatible manner</li>
						<li>Increase <code>PATCH</code> version for making backwards-compatible bug fixes</li>
					</ul>
					<li>Mostly about how to name implementation artifacts but also applicable to APIs</li>
					<ul>
						<li>Exposing detailed version/patch information is a potential security risk</li>
						<li>For well-designed APIs only <code>MINOR</code> may make sense to expose</li>
					</ul>
				</ul>
			</slide>
			<slide id="service-api-version">
				<title>Service vs. API Version</title>
				<ul>
					<li><em>Service versions</em> may be internal information only</li>
					<ul>
						<li>Implementation information does not have to shown up in the API</li>
						<li>For internal/trusted/open cases service and API may be the same thing</li>
					</ul>
					<li><em>API versions</em> are about changes that may affect consumers</li>
					<ul>
						<li><code>PATCH</code> does not change API design or behavior apart from increasing quality</li>
						<li><code>MINOR</code> does change API behavior but in a safe way</li>
						<li><code>MAJOR</code> changes API behavior in ways that require client adaptations</li>
					</ul>
					<li><code>PATCH</code>/<code>MINOR</code> may make sense to expose inside the API</li>
					<li><code>MAJOR</code> means that there is a <em>different API</em> for the <em>same service</em></li>
				</ul>
			</slide>
			<slide id="version-identification">
				<title>Identifying Versions</title>
				<ul>
					<li>Versioning may be necessary when the extension model is not working anymore</li>
					<li>Three main ways how to distinguish between versions at the API level</li>
					<ul>
						<li>Make version numbers part of the resource URI: <code>http://example.org/api/v2/</code></li>
						<li>Use specific HTTP headers: <code>API-Version: 2.0.0</code></li>
						<li>Use media types: <code>Accept: application/vnd.example.org.v2+json</code></li>
					</ul>
					<li>All of these have side-effects which have to be balanced</li>
					<ul>
						<li>New URIs change resource identity which may result in data integration problems</li>
						<li>Custom headers are specific for a service and hard to use in the general Web fabric</li>
						<li>Media types often are not used by APIs or the clients consuming them</li>
					</ul>
					<li>Most APIs choose URI-based versioning and introduce new <q>API identity</q></li>
					<ul>
						<li>Versioning at this level is little more than <q>keeping the API brand</q></li>
						<li>Version numbers can be used <em>anywhere</em> in the URI path</li>
					</ul>
				</ul>
			</slide>
			<slide id="linking-versions">
				<title>Linking Versions</title>
				<ul>
					<li>Communicating versions via links works better than naming schemes</li>
					<ul>
						<li>APIs remain self-contained as long as consumers are working with one version</li>
						<li>APIs are brought into context when consumers want versioning information</li>
					</ul>
					<li><a href="https://tools.ietf.org/html/rfc5829" title="RFC 5829: 'Link Relation Types for Simple Version Navigation between Web Resources', April 2010">RFC 5829</a> defines link relations for <q>simple version navigation</q></li>
					<ul>
						<li><code>successor-version</code> links to the newer version of the API</li>
						<li><code>latest-version</code> links to the newest version of the API</li>
						<li><code>predecessor-version</code> links to the older version of the API</li>
						<li><code>version-history</code> links to a resource about the version history</li>
					</ul>
					<li>Plays well with <em>home documents</em> and their role for an API</li>
					<ul>
						<li>APIs share home documents or at least version histories across versions</li>
						<li>Versioning links are used to allow navigation across all API versions</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="decommissioning">
			<title>Decommissioning</title>
			<slide id="http-sunset">
				<title>Signaling API End-of-Life</title>
				<ul>
					<li>APIs can change in terms of features and will be decommissioned at some point</li>
					<ul>
						<li><a href="http://dret.typepad.com/dretblog/2016/04/robust-extensibility.html">Robust extensibility</a> helps to facilitate non-breaking API changes</li>
						<li><em>Hypermedia</em> helps as a pattern to move extensibility beyond data models</li>
						<li><a href="http://semver.org/">Semantic versioning</a> may be used to keep track of API changes</li>
						<li><a href="http://dret.typepad.com/dretblog/2015/08/http-sunset-header.html">HTTP <code>Sunset</code>ting</a> can be used to <a href="http://webconcepts.info/concepts/http-header/Sunset">signal upcoming sunsets on the HTTP level</a></li>
					</ul>
					<li>One possible requirement is that APIs must support <code href="http://webconcepts.info/concepts/http-header/Sunset">Sunset</code></li>
					<ul>
						<li>Services must document/describe the support of <code>Sunset</code></li>
						<li>Services may implement <code>Sunset</code> any way they like</li>
						<li>The simplest option may be <em><code>Sunset</code> policies</em> on a gateway</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="change-management-conclusions">
			<title>Conclusions</title>
			<slide id="plan-for-evolution">
				<title>Plan for Evolution</title>
				<ul>
					<li>Evolvable APIs do not just happen</li>
					<li>Think about cost and economics for versioning</li>
					<li>Make evolution/versioning/deprecation part of API culture</li>
				</ul>
			</slide>
			<slide id="change-management-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="microservices">
		<title>Microservices</title>
		<toc class="resources"><a href="http://www.apiacademy.co/microservice-architecture-the-oreilly-book/" title="Mike Amundsen, Matt McLarty, Ronnie Mitra, and Irakli Nadareishvili, 'Microservice Architecture: Aligning Principles, Practices, and Culture', O'Reilly Media, June 2016">MSA Book</a>&#160;· <a href="https://martinfowler.com/microservices/" title="Martin Fowler's Microservices Resource Guide">Microservices Resource Guide</a></toc>
		<part id="microservices-pattern">
			<title>Microservices as a Pattern</title>
			<slide id="microservices-scalability">
				<title>Bottom-Up Motivation: Service Scalability</title>
				<ul>
					<li>Build modularized components that can be scaled individually</li>
					<ul>
						<li><em>Monitoring</em> allows insights into system status and load</li>
						<li><em>Rapid Provisioning</em> allows to react quickly when new capacity is required</li>
						<li><em>Rapid Deployment</em> means simple ways to develop/test/deploy/scale services</li>
					</ul>
					<li>Microservice architecture is more flexible than integrated approaches</li>
					<ul>
						<li>Scaling can be done per service instead of scaling bigger deployment units</li>
						<li>Code can be retired more easily by removing services from deployment</li>
						<li>Fewer unintended side-effects since all interactions are through APIs</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservices-digital-transformation">
				<title>Top-Down Motivation: Digital Transformation</title>
				<ul>
					<li>IT capabilities and management often are not aligned</li>
					<ul>
						<li><em>Capabilities</em> are growing and business demands are growing as well</li>
						<li><em>Management</em> becomes complex and impacts execution speed</li>
					</ul>
					<li>There is a difference in separating interfaces and implementations</li>
					<ul>
						<li><em>Interfaces</em> are useful for accessing capabilities</li>
						<li><em>Implementations</em> must support easy modifications and additions</li>
					</ul>
					<li>The first wave of <em>API focus (SOA)</em> focused on interfaces only</li>
					<ul>
						<li>Focusing on APIs as <em>business-aligned capabilities</em> is a necessary first step</li>
						<li>Agility suffers when implementations are not business-aligned</li>
						<li><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> means that changing implementation structure can be hard</li>
					</ul>
				</ul>
			</slide>
			<slide id="msa-conway">
				<title>Conway's Law</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
			</slide>
			<slide id="soapy-soa">
				<title>The SOA Crisis</title>
				<ul>
					<li>SOAP-style SOA are traditional IT monoliths exposing some capabilities</li>
					<li>MSA #1 goal is to create a loosely coupled service landscape</li>
					<ul>
						<li>Shared data storage creates coupling</li>
						<li>Shared infrastructure creates coupling</li>
						<li>Shared libraries create coupling</li>
						<li>Loose coupling allows to pick the right tool for the job</li>
						<li>Loose coupling allows to refactor/retire as required</li>
						<li>Loose coupling blurs the public/partner/private lines</li>
					</ul>
					<li><em>Using APIs</em> is one of the few overlaps between SOAP-style SOA and MSA</li>
				</ul>
			</slide>
			<slide id="microservices-are-soa">
				<title>Microservices are SOA!</title>
				<img title="Microservices are SOA!" src="microservices-are-soa.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="microservices-are-good-soa">
				<title>Microservices are SOA done Right!</title>
				<ul>
					<li><em>Decouple implementations</em> and not just interfaces</li>
					<li><em>Velocity</em> is determined by how hard it is to make changes</li>
					<li>The biggest problem is not <em>access to capabilities</em> but <em>capability agility</em></li>
					<ul>
						<li>Providing access to capabilities is better than doing nothing</li>
						<li><em>Agile management of the capability landscape</em> goes further than that</li>
					</ul>
					<li>Microservices apply <em>Web architecture</em> to <em>Enterprise IT</em></li>
					<ul>
						<li>Implementation details are completely invisible to service users</li>
						<li>Service consumption <em>only</em> uses well-defined and uniform interfaces</li>
					</ul>
				</ul>
			</slide>
			<slide id="monolith">
				<title>The Dreaded Monolith</title>
				<img title="Where you come from…" href="https://upload.wikimedia.org/wikipedia/commons/7/7b/Weltmaschine_gsellmann1.JPG" src="monolith.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-neat">
				<title>Microservices: The Starting Point</title>
				<img title="Where you think you're going…" href="https://static.pexels.com/photos/12598/96917deb7705adcee76b65caf8c652b1.jpg" src="microservices-ideal.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="msa-messy">
				<title>Microservices Over Time</title>
				<img title="By Lachlan Donald from Melbourne, Australia (Sharpest tool in the shed) [CC BY 2.0 (http://creativecommons.org/licenses/by/2.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AHuge_collection_of_tools_in_a_store_in_Chloride%2C_a_ghost_town_in_New_Mexico%2C_USA_-_July_2013.jpg" src="microservices-reality.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="soapy-discovery">
				<title>Old School Discovery</title>
				<ul>
					<li>SOAP's answer to service discovery was UDDI</li>
					<ul>
						<li>The biggest failure of the SOAP Web Services stack</li>
						<li>Allowing only one specific kind of service design</li>
						<li>Focusing on the function signature as a service's main description</li>
					</ul>
					<li>Building directories from carefully described and categorized entries</li>
					<ul>
						<li>Feels like the Yahoo! of service discovery: The one true model approach</li>
					</ul>
					<li>What does a Google of Service Discovery look like?</li>
					<ul>
						<li>Starting from services, <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">find available description/documentation resources</a></li>
						<li>Index description/documentation resources for subsequent discovery</li>
						<li>Add support for additional description/documentation formats as required</li>
					</ul>
				</ul>
			</slide>
			<slide id="ms-description-discovery">
				<title>Decentralize Description and Discovery</title>
				<ul>
					<li>MSA is all about making services more independent and self-contained</li>
					<ul>
						<li>Discovery should follow the same pattern: Avoid centralization, be polyglot</li>
					</ul>
					<li>Decentralized discovery is based on pulling/crawling diverse data</li>
					<ol>
						<li>Start by <a href="http://webconcepts.info/specs/IETF/I-D/draft-wilde-service-link-rel">finding available description/documentation resources</a></li>
						<li>Process these based on supported description/documentation formats</li>
						<li>Increase support if required by the evolving ecosystem</li>
						<li>Provide discovery services based on the resulting service ecosystem snapshot</li>
					</ol>
					<li>Added benefit: Reality-based view on description/documentation/service ecosystem</li>
				</ul>
			</slide>
		</part>
		<part id="msa-journey">
			<title>The MSA Journey</title>
			<slide id="change">
				<title>Transformation: Changing vs. Changeable</title>
				<ul>
					<li><em>Changing</em> implies a one-time activity</li>
					<li><em>Changeable</em> implies an intrinsic property</li>
					<blockquote>
						<p>Don't focus on what to <b>change into</b>;<br/>Focus on <b>embracing change</b> as your mode of existence.</p>
					</blockquote>
				</ul>
			</slide>
			<slide id="balance">
				<title>Delicate Balance</title>
				<ul>
					<li><em>Preserve:</em> Functional core and business foundations</li>
					<li><em>Nourish:</em> Ability to change and situational awareness</li>
					<li><a href="http://agilemanifesto.org/">Agile</a> moves from an IT approach to a business approach</li>
					<ul>
						<li><em>Individuals and interactions</em> over processes and tools</li>
						<li><em>Working software</em> over comprehensive documentation</li>
						<li><em>Customer collaboration</em> over contract negotiation</li>
						<li><em>Responding to change</em> over following a plan</li>
					</ul>
				</ul>
			</slide>
			<slide id="strangler">
				<title>Strangling the Monolith</title>
				<img title="Strangler Vine" href="https://commons.wikimedia.org/wiki/File:Strangler_tree.jpg" src="strangler-vine.jpg" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="good-strangling">
				<title>How to Strangle Well</title>
				<ul>
					<li>Manage access to old/new capabilities through a router or gateway</li>
					<ul>
						<li>Transitioning is a management process old/new should be unaware of</li>
					</ul>
					<li>Data sync/update is a separately managed process</li>
					<ul>
						<li>Sophistication and cost of sync/update depends on consistency requirements</li>
						<li>When one of the services disappears sync/update can be removed</li>
					</ul>
					<li>Manage/monitor transition of service replacement</li>
					<ul>
						<li>At some point in time decommissioning may be the most economical option</li>
						<li>Until then the <em>strangled monolith</em> is the best case scenario</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="culture-and-organization">
			<title>Culture and Organization</title>
			<slide id="culture">
				<title>Cultural Changes</title>
				<ul>
					<li>Remove red tape and embrace diversity</li>
					<li>Business environments change faster than ever</li>
					<ul>
						<li><em>Common question:</em> How to change into a more successful organization</li>
						<li><em>Better question:</em> How to become an organization that is better at changing</li>
					</ul>
					<li>The Web succeeded because it out-innovated everything else</li>
					<ul>
						<li>Permissionless decentralized innovation</li>
						<li>Data-driven decisions (traffic drives visibility and success)</li>
						<li>Continuous change enabled through loose coupling</li>
					</ul>
				</ul>
			</slide>
			<slide id="organization">
				<title>Organizational Changes</title>
				<blockquote><q href="http://www.melconway.com/Home/Conways_Law.html">Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</q> (<a href="https://en.wikipedia.org/wiki/Melvin_Conway">Mel Conway</a>)</blockquote>
				<ul>
					<li>Learn from all of <em>Conway's laws</em></li>
					<ol>
						<li>Focus on communications (<q>Communication dictates design</q>)</li>
						<li>Support continuous process (<q>Be able to do it over</q>)</li>
						<li>Improve team independence (<q>Interdependent teams create interdependent systems</q>)</li>
						<li>Keep project scope small (<q>Big problems/systems tend to shape-shift</q>)</li>
					</ol>
				</ul>
			</slide>
			<slide id="evolution">
				<title>MSA Evolution</title>
				<ul>
					<li>Embrace change and start changing today</li>
					<ul>
						<li>Start small and learn by doing</li>
						<li>MSA management is about empowering</li>
					</ul>
					<li>MSA creates an environment that is designed to be change-friendly</li>
					<ul>
						<li><em>MSA technologies</em> allow teams to deliver as fast as possible</li>
						<li><em>APIs</em> allows teams/partners to access new products as easily as possible</li>
					</ul>
				</ul>
			</slide>
		</part>
		<part id="microservices-and-apis">
			<title>Microservices and APIs</title>
			<slide id="microservice-api">
				<title>There is no such thing as a <q>Microservice API</q></title>
				<ul>
					<li>Microservices are all about <em>how to implement services</em></li>
					<li>APIs are all about <em>how to interact with services</em></li>
					<li>Microservices are an implementation detail from the API perspective</li>
					<li>Microservice-implemented APIs might exhibit certain properties</li>
					<ul>
						<li>Changing more often because of faster implementation cycles</li>
						<li>More diverse <em>API landscapes</em> because of more autonomy</li>
						<li>Smaller scope because of solutions targeted at specific problems</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-design">
				<title>Designing Microservice APIs</title>
				<ul>
					<li>API consumers just use an <em>API</em> and not a <em>Microservice API</em></li>
					<ul>
						<li>Microservice API design is no different from API design in general</li>
						<li>Tighter coupling may be acceptable for vertical scenarios (<a href="http://samnewman.io/patterns/architectural/bff/">BFF pattern</a>)</li>
					</ul>
					<li>Balancing autonomy/diversity and coherence/usability is necessary</li>
					<ul>
						<li>Microservices should have <em>freedom</em> to design their APIs</li>
						<li>API design should be driven by <em>design culture and patterns</em></li>
						<li>Microservices strategy needs to distill/document/distribute design patterns</li>
					</ul>
				</ul>
			</slide>
			<slide id="microservice-api-focus">
				<title>Focus Areas for Microservice APIs</title>
				<ul>
					<li>Be explicit about openness and extensibility</li>
					<li>Provide <em>glue</em> that makes combining services easy</li>
					<ul>
						<li>At the minimal level, always use global, unique, and persistent <em>identifiers</em></li>
						<li>Consider using <em>hypermedia</em> as a way to support service orchestration</li>
					</ul>
					<li>Be explicit about how services signal end-of-life</li>
				</ul>
			</slide>
		</part>
		<part id="microservices-conclusions">
			<title>Conclusions</title>
			<slide id="microservices-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="standards">
		<title>Standards</title>
		<toc class="resources"><a href="http://ietf.org/" title="Internet Engineering Task Force">IETF</a>&#160;· <a href="http://www.w3.org/" title="World Wide Web Consortium">W3C</a>&#160;· <a href="http://www.iso.org/" title="International Organization for Standardization">ISO</a>&#160;· <a href="http://www.iana.org/protocols" title="Internet Assigned Numbers Authority Protocol Registries">IANA Registries</a></toc>
		<part id="languages-standards">
			<title>APIs and Standards</title>
			<slide id="apis-are-languages">
				<title>API are Languages</title>
				<ul>
					<li>APIs allow service providers and consumers to communicate</li>
					<ul>
						<li>Service providers <em>define</em> the language to be used for service interactions</li>
						<li>Service consumers <em>use</em> the language to interact with the service</li>
					</ul>
					<li>Interfaces both separate and connect users of the interface</li>
					<ul>
						<li><em>Separation</em> means that the interface is self-contained</li>
						<li><em>Connection</em> means that the interface is easy to use</li>
					</ul>
					<li>Language design becomes different in complex landscapes</li>
					<ul>
						<li><em>Singular APIs</em> derive value from being individually polished products</li>
						<li><em>Landscape APIs</em> derive value from maximizing productivity across products</li>
					</ul>
				</ul>
			</slide>
			<slide id="languages-need-standards">
				<title>Languages need Standards</title>
				<ul>
					<li>Standards become building blocks of easily usable APIs</li>
					<ul>
						<li>Each building block reduces design effort and improves understandability</li>
					</ul>
					<li>Building block can be used from various areas</li>
					<ol>
						<li>General <em>API concepts</em> that can be used uniformly across various APIs</li>
						<li><em>Domain concepts</em> that can be used across APIs for a certain domain</li>
						<li><em>Organizational concepts</em> that make sense for APIs within an organization</li>
					</ol>
				</ul>
			</slide>
		</part>
		<part id="protocol-standards">
			<title>Protocols are Standards</title>
			<slide id="standard-types">
				<title><a href="https://www.safaribooksonline.com/library/view/restful-web-apis/9781449359713/pr05.html" title='"RESTful Web APIs" by Sam Ruby, Mike Amundsen, Leonard Richardson: Introduction'>Standard Types</a></title>
				<ul>
					<li><em>Fiat standards:</em> <q>Why not do it this way?</q></li>
					<li><em>Personal standards:</em> <q>I like the way this has been done.</q></li>
					<li><em>Corporate standards:</em> <q>Let's try to figure out a way to do this.</q></li>
					<li><em>Open standards:</em> <q>Hello everybody! Let's share a way to do this!</q></li>
				</ul>
			</slide>
			<slide id="xkcd-standards">
				<title>How Standards Proliferate</title>
				<img src="xkcd927.png" title="The nice thing about standards is that there are so many to choose from." href="https://xkcd.com/927/" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="sdos">
			<title>Standards-Defining Organizations (SDOs)</title>
			<slide id="ietf">
				<title><a href="http://ietf.org/">Internet Engineering Task Force (IETF)</a></title>
				<img title="Internet Engineering Task Force (IETF)" href="http://ietf.org/" src="ietf.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="w3c">
				<title><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a></title>
				<img title="World Wide Web Consortium (W3C)" href="http://www.w3c.org/" src="w3c.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
			<slide id="iso">
				<title><a href="http://www.iso.org/">International Organization for Standardization (ISO)</a></title>
				<img title="International Organization for Standardization (ISO)" href="http://www.iso.org/" src="iso.png" style=" width : 90% ; height : 70% ; object-fit : contain ; margin : 0% 4% 0% 4% ; "/>
			</slide>
		</part>
		<part id="standards-conclusions">
			<title>Conclusions</title>
			<slide id="standards-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
	<presentation id="programs">
		<title>Programs</title>
		<toc class="resources"><a href="http://apistylebook.com/" title='Arnaud Lauret, "API Stylebook"'>API Stylebook</a></toc>
		<part id="programs-conclusions">
			<title>Conclusions</title>
			<slide id="programs-q-and-a">
				<title>Thanks! Q&amp;A</title>
				<img src="where-to.png" title="What's Next?" style="float: right ; width : 30% ; margin : 4% ; "/>
				<ul>
					<li>Slides online: <a href="http://dret.net/lectures/ericsson-2019"><code>dret.net/lectures/ericsson-2019</code></a></li>
					<li>More information about myself:</li>
					<ul>
						<li>Web page: <a href="http://dret.net/netdret/"><code>dret.net/netdret/</code></a></li>
						<li>LinkedIn: <a href="http://www.linkedin.com/in/netdret"><code>linkedin.com/in/netdret</code></a></li>
					</ul>
					<li>Twitter handles:</li>
					<ul>
						<li>Erik Wilde: <a href="http://twitter.com/dret" class="twitter-follow-button" data-size="large" title="Erik Wilde on Twitter: @dret"><code>@dret</code></a></li>
						<li>API Academy: <a href="http://twitter.com/APIacademy" class="twitter-follow-button" data-size="large" title="API Academy on Twitter: @APIacademy"><code>@APIacademy</code></a></li>
					</ul>
				</ul>
			</slide>
		</part>
	</presentation>
</hotspot>